(function($) {
	this.MobileBestCategoryListModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mCategoryBest100List,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileBestCategoryModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/best100.daum",
			title : "베스트100 | Daum 쇼핑하우"
		},
		url : Shopping.apis.mCategoryBest100,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileBestShopRecommModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/recombest100.daum",
			title : "Daum 쇼핑하우"
		},
		url : Shopping.apis.bestshoprecomm
	})
})(jQuery);
(function($) {
	this.MobileBestTodayModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/todaybest.daum",
			title : "Daum 쇼핑하우"
		},
		url : Shopping.apis.mTodayBest100,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailChartImageModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mDetailChartImage
	})
})(jQuery);
(function($) {
	this.MobileDetailCompareModel = Backbone.ShoppingModel.extend({
		url : function() {
			var commonData = Shopping.views.mobileDetail.model.get("common");
			var url = Shopping.apis.mDetailCompare;
			if (commonData.isPlay) {
				url = Shopping.apis.mPlayDetailCompare
			}
			return url
		},
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailCouponModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mPlayDetailCoupon,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailGuideModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mDetailGuide,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailInfoModel = Backbone.ShoppingModel.extend({
		url : function() {
			var commonData = Shopping.views.mobileDetail.model.get("common");
			var url = Shopping.apis.mDetailInfo;
			if (commonData.isPlay) {
				url = Shopping.apis.mPlayDetailInfo
			}
			return url
		},
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailMainModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mDetailCommon,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailRelativeModel = Backbone.ShoppingModel.extend({
		url : function() {
			var commonData = Shopping.views.mobileDetail.model.get("common");
			var url = Shopping.apis.mDetailRelative;
			if (commonData.isPlay) {
				url = Shopping.apis.mPlayRelative
			}
			return url
		},
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailReviewContentModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mDetailReviewContent,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailReviewModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mDetailReview,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailSpecModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mDetailSpec,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileDetailTopCompareModel = Backbone.ShoppingModel.extend({
		url : function() {
			var commonData = Shopping.views.mobileDetail.model.get("common");
			var url = Shopping.apis.mDetailTopCompare;
			if (commonData.isPlay) {
				url = Shopping.apis.mPlayDetailTopCompare
			}
			return url
		},
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailTopModel = Backbone.ShoppingModel.extend({
		url : function() {
			var commonData = Shopping.views.mobileDetail.model.get("common");
			var url = Shopping.apis.mDetailTop;
			if (commonData.isPlay) {
				url = Shopping.apis.mPlayDetailTop
			}
			return url
		},
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileDetailWriteModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.checkUserInfo
	})
})(jQuery);
(function($) {
	window.MobileEventMatchModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mEventMatch,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileEventSohoModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mEventSoho,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileEventTodayModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mEventToday,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileForuEventModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/foru/main.daum",
			title : "Daum 쇼핑하우"
		},
		url : Shopping.apis.mForuEvent
	})
})(jQuery);
(function($) {
	window.MobileHotDealModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/mobilesale.daum",
			title : "모바일특가"
		},
		url : Shopping.apis.mHotdeal,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileMySohoModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/my/sohoroomlist.daum",
			title : "Daum 쇼핑하우"
		},
		defaults : {},
		url : Shopping.apis.mMySoho
	})
})(jQuery);
(function($) {
	window.MobilePlanningShowCateModel = Backbone.ShoppingModel.extend({
		defaults : {},
		url : Shopping.apis.mPlanningShowCate
	})
})(jQuery);
(function($) {
	window.MobilePlusshopDetailModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/plusshopdetail.daum",
			title : "플러스샵"
		},
		defaults : {},
		url : Shopping.apis.mPlusshopDetail
	})
})(jQuery);
(function($) {
	window.MobilePlusshopMainModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/plusshopmain.daum",
			title : "플러스샵"
		},
		defaults : {},
		url : Shopping.apis.mPlusshopMain
	})
})(jQuery);
(function($) {
	window.MobileRecentShoppingboxModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mRecentShopping,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileSearchModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "",
			title : ""
		},
		defaults : {
			best100 : {},
			bookList : {},
			brandCategoryList : {},
			brandList : {},
			categoryList : {},
			clickBestList : {},
			clixList : {},
			colorList : {},
			eventList : {},
			firstProdCateid : {},
			floatBanner : {},
			isWating : {},
			keywordList : {},
			optList : {},
			pageInfo : {},
			parameterList : {},
			priceOption : {},
			recommendCategoryList : {},
			searchList : {},
			shopList : {},
			sohoList : {},
			spqid : {},
			tabList : {},
			themeCategory : {},
			thisCategory : {},
			directMall : {},
			brandInfo : {},
			decidedViewType : {},
			sohovip : {}
		},
		url : Shopping.apis.search
	})
})(jQuery);
(function($) {
	window.MobileSearchRecentModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mMyLatest
	})
})(jQuery);
(function($) {
	window.MobileSearchRecommendModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.recomProdList
	})
})(jQuery);
(function($) {
	window.MobileShoppingPartnerModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mShoppingPartner,
		defaults : {}
	})
})(jQuery);
(function($) {
	this.MobileSimilarImageProdModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.similarImageProd,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileSpecialPriceModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mSpecialPrice,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.MobileTopBottomModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mTopBottom
	})
})(jQuery);
(function($) {
	window.MobileTopModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/main.daum",
			title : "Daum 쇼핑하우"
		},
		url : Shopping.apis.mTop
	})
})(jQuery);
(function($) {
	window.MobileTrendModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/todayshopping.daum",
			title : "오늘의쇼핑"
		},
		defaults : {},
		url : Shopping.apis.mTrend
	})
})(jQuery);
(function($) {
	window.MobileTvListDetailModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mTvListDetail,
		defaults : {}
	})
})(jQuery);
(function($) {
	window.PlanningShowAllModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/planningshow/main.daum",
			title : "Daum 쇼핑하우"
		},
		defaults : {
			planningShowAll : []
		},
		url : Shopping.apis.mPlanningShowAll
	})
})(jQuery);
(function($) {
	window.PlanningShowModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/planningshow/list.daum",
			title : "Daum 쇼핑하우"
		},
		defaults : {},
		url : Shopping.apis.mPlanningShow
	})
})(jQuery);
(function($) {
	window.StarshopAllModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/starshop/main.daum",
			title : "Daum 쇼핑하우"
		},
		defaults : {},
		url : Shopping.apis.mStarshopAll
	})
})(jQuery);
(function($) {
	window.StarshopModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/starshop/list.daum",
			title : "Daum 쇼핑하우"
		},
		defaults : {
			tabProdList : []
		},
		url : Shopping.apis.mStarshop
	})
})(jQuery);
(function($) {
	window.StyleOnAirProdlistModel = Backbone.ShoppingModel.extend({
		url : Shopping.apis.mTvProdList
	})
})(jQuery);
(function($) {
	window.StyleOnAirProgramModel = Backbone.ShoppingModel.extend({
		tiara : {
			url : "http://m.shopping.daum.net/mini/styleonair/main.daum",
			title : "Daum 쇼핑하우"
		},
		url : Shopping.apis.mTvList
	})
})(jQuery);
gesture.GestureSession.prototype.isFlick = function() {
	return daumtools.ua.os.android && (100 < this.term && this.term < 200)
};
gesture.GestureSession.prototype.recognizeGesture = function(x, y) {
	function point(x, y) {
		return {
			x : x,
			y : y,
			minus : function(aPoint) {
				return point(this.x - aPoint.x, this.y - aPoint.y)
			}
		}
	}
	var currentPos = point(x, y), delta = currentPos.minus(this.startPos);
	this.delta = delta;
	if (this.type === "unindentified") {
		if (Math.abs(delta.y) > this.gestureThreshold
				&& Math.abs(delta.y) > Math.abs(delta.x)) {
			this.type = "scroll";
			if (delta.y < 0) {
				this.direction = "up"
			} else {
				this.direction = "down"
			}
		} else {
			if (Math.abs(delta.x) > this.gestureThreshold
					&& Math.abs(delta.x) >= Math.abs(delta.y)) {
				this.type = "swipe";
				if (delta.x < 0) {
					this.direction = "left"
				} else {
					this.direction = "right"
				}
			}
		}
	}
};
slide.InfiniteDataSource = slide.InfiniteDataSource.extend({
	getPrevIndex : function() {
		var index = "";
		if (this.index <= 0) {
			index = this.data.length - 1
		} else {
			index = this.index - 1
		}
		return index
	},
	getNextIndex : function() {
		var index = "";
		if (this.index + 1 >= this.data.length) {
			index = 0
		} else {
			index = this.index + 1
		}
		return index
	}
});
(function($) {
	window.MobileSlideView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				initialize : function() {
					var TRESHOLD = daumtools.ua.os.android ? 0.08 : 0.15;
					var slideview = this;
					slide.Slide = slide.Slide
							.extend({
								isNextThreshold : function(session) {
									return this.container.getWidth() * -1
											* TRESHOLD > session.delta.x
								},
								isPrevThreshold : function(session) {
									return this.container.getWidth() * TRESHOLD < session.delta.x
								},
								checkAndResizeSlideFrame : function() {
									var cnt = 0;
									var self = this;
									function checkResize() {
										if (self.frameEl) {
											var width = self.frameEl.clientWidth;
											var height = self.frameEl.clientHeight;
											if (self.isChangedSize(width,
													height)) {
												self.resize(width, height);
												slideview.setCurrentHeight()
											} else {
												if (self.isDoingCheckSize
														&& cnt < 10) {
													cnt++;
													window.setTimeout(
															checkResize, 100)
												}
											}
										}
									}
									window.setTimeout(checkResize, 300)
								}
							});
					_.bindAll(this, "changeTabNavi", "setCurrentHeight")
				},
				customPanel : slide.Panel.extend({
					init : function(slide, option) {
						this._super(slide, option);
						this.$panel = $(this.el);
						var self = this
					},
					setData : function(dataEl) {
						this.el.innerHTML = "";
						var el = "";
						el = dataEl.toHTML(dataEl);
						this.$panel.append(el)
					}
				}),
				tmpViewMap : {},
				viewMap : {},
				tabMove : false,
				slideWrapTemplate : "#mainSlideTemplate",
				prefix : "",
				beforeLeftSize : 0,
				events : {
					"click [data-tabindex]" : "setTabIndex"
				},
				render : function() {
					this.$el.off();
					this.setElement(this.$el);
					this.$el.html(this.getChildTemplate(this.slideWrapTemplate,
							{
								viewMap : this.viewMap,
								tabClassName : this.tabClassName || "gnb_comm",
								tabAClassName : this.tabAClassName
										|| "link_menu"
							}));
					this.tabObj = this.$el.find("#mainTabMenu li");
					var index = this.getIndexByHash();
					var viewdata = this.viewItem(this.viewMap);
					this.setTotalWidth();
					this.viewdc = new slide.InfiniteDataSource(viewdata);
					this.viewdc.setCurrentIndex(index);
					this.viewSlide = new slide.Slide(this.$el.find(
							"#slideContent").get(0), this.viewdc, {
						panelClass : this.customPanel,
						container : {
							id : this.slideID
						}
					});
					this.viewSlide.on("next", this.changeTabNavi);
					this.viewSlide.on("prev", this.changeTabNavi);
					var slideview = this;
					this.viewSlide.on("endDrag", function(session) {
						session.targetEvent.preventDefault();
						if (slideview.viewSlide.isNextSwipe(session)) {
							slideview.setTabPosition(slideview.viewdc
									.getNextIndex())
						} else {
							if (slideview.viewSlide.isPrevSwipe(session)) {
								slideview.setTabPosition(slideview.viewdc
										.getPrevIndex())
							} else {
								slideview
										.setTabPosition(slideview.viewdc.index)
							}
						}
					});
					if (this.tabMove) {
						this.viewSlide.on("next", function() {
							$("#btnGnbNext").trigger("click")
						});
						this.viewSlide.on("prev", function() {
							$("#btnGnbPrev").trigger("click")
						});
						this.setClickCode()
					}
					this.viewSlide.on("change", this.changeTabNavi);
					this.setCurrentTabNavi(index);
					return this
				},
				getIndexByHash : function() {
					var tabindex = 0;
					if (this.viewMap[this.options.hash]) {
						tabindex = this.viewMap[this.options.hash].index
					}
					return tabindex
				},
				changeTabNavi : function() {
					this.options.paramStr = {};
					this.setCurrentTabNavi(this.viewdc.index);
					this.$el.find(".open_sort").removeClass("open_sort");
					$(window).scrollTop(0);
					$("#lawInfo").removeClass("open_notice")
				},
				setCurrentTabNavi : function(tabindex) {
					this.options.hash = _.keys(this.viewMap)[tabindex];
					var view = Shopping.views[this.viewMap[this.options.hash].viewName];
					var params = view.options.params;
					var firstHashChange = view.firstHashChange || false;
					if (firstHashChange) {
						this.hashChangeToreplace(params)
					} else {
						this.hashChange(params)
					}
					if (window.gargoyle) {
						gargoyle.initParam({
							de : "MO",
							s1 : "shopping",
							s2 : this.viewMap[this.options.hash].gg_s2,
							s3 : "",
							pn : this.viewMap[this.options.hash].gg_pn
						})
					}
					this.setTabPosition(tabindex);
					clearTimeout(this.timeid);
					this.timeid = setTimeout(_.bind(function() {
						view.model.sendPageView();
						this.chkCnt = 0;
						this.checkCurrentHeight()
					}, this), 300)
				},
				setTotalWidth : function() {
					var tabTotalWidth = 0;
					_.each(this.tabObj, function(t) {
						tabTotalWidth += $(t).outerWidth()
								+ parseInt($(t).css("margin-right").replace(
										"px", ""))
					});
					this.tabTotalWidth = tabTotalWidth
				},
				setTabPosition : function(tabindex) {
					tabindex = (tabindex) ? tabindex : this.getIndexByHash();
					this.tabObj.removeClass("on").filter(
							"li:eq(" + tabindex + ")").addClass("on");
					var parentLeft = $("#mContent").offset().left;
					if (this.tabMove) {
						var docWidth = $(document).outerWidth();
						var moveLeftSize = 0;
						var onTab = this.tabObj.filter(".on");
						var slideSize = (this.tabTotalWidth - docWidth)
								/ (_.size(this.tabObj) - 1);
						if (docWidth < this.tabTotalWidth) {
							moveLeftSize = slideSize * tabindex * -1;
							if (this.beforeLeftSize != moveLeftSize) {
								var lkj = this;
								if (ua_result.os.ios && false) {
									$(onTab).parent().animate({
										left : moveLeftSize
									}, {
										duration : 200,
										complete : function() {
											lkj.beforeLeftSize = moveLeftSize
										}
									})
								} else {
									$(onTab).parent().css("left",
											moveLeftSize + "px");
									this.beforeLeftSize = moveLeftSize
								}
							} else {
								$(onTab).parent().css("left",
										this.beforeLeftSize + "px")
							}
						} else {
							$(onTab).parent().css("left", "0px")
						}
					}
				},
				setCurrentHeight : function() {
					var panelHeight = this.$el.find(".panel:eq(1)").children()
							.outerHeight();
					if (panelHeight != 0) {
						this.$el.find(".slide").height(panelHeight);
						this.trigger("rendering:child")
					}
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				chkCnt : 0,
				checkCurrentHeight : function() {
					clearTimeout(this.chktimeid);
					if (this.chkCnt < 2) {
						this.chktimeid = setTimeout(_.bind(function() {
							var slideHeight = this.$el.find(".slide").height();
							var panelHeight = this.$el.find(".panel:eq(1)")
									.children().outerHeight();
							if (slideHeight != panelHeight) {
								this.setCurrentHeight()
							}
							this.checkCurrentHeight()
						}, this), 500);
						this.chkCnt++
					} else {
						this.chkCnt = 0
					}
				},
				setTabIndex : function(e) {
					e.preventDefault();
					var tabindex = $(e.currentTarget).data("tabindex");
					this.viewdc.setCurrentIndex(tabindex);
					this.viewSlide.show();
					this.viewSlide.emit("change")
				},
				initOption : function(paramsObj, option, resetObj) {
					if (_.isEmpty(option)) {
						_.each(paramsObj, function(value, key) {
							paramsObj[key] = getOptParam(
									decodeURIComponent(option), key, value)
						}, this)
					} else {
						_.each(paramsObj, function(value, key) {
							paramsObj[key] = getOptParam(
									decodeURIComponent(option), key,
									resetObj ? resetObj[key] : "")
						}, this)
					}
					return paramsObj
				},
				viewItem : function(datalist) {
					var data = [];
					_.each(datalist, function(value, key, obj) {
						data.push({
							hash : key,
							currentView : null,
							index : value.index,
							toHTML : this[key + "Render"] || function() {
								return key
							}
						})
					}, this);
					return data
				},
				hashChange : function(params) {
					var paramStr = this.getParamStr(params);
					var hash = "!" + this.prefix + "/" + this.options.hash
							+ "/" + paramStr;
					if (hash != location.hash) {
						Backbone.history.navigate(hash, {
							trigger : false
						})
					}
				},
				hashChangeToreplace : function(params) {
					var paramStr = this.getParamStr(params);
					Backbone.history.navigate("!" + this.prefix + "/"
							+ this.options.hash + "/" + paramStr, {
						trigger : false,
						replace : true
					})
				},
				getParamStr : function(params) {
					var paramStr = "";
					if (params != "" && _.isObject(params)) {
						_.each(params, function(value, key) {
							paramStr += ((paramStr == "") ? "" : "&") + key
									+ ":" + value
						})
					} else {
						if (_.isString(params)) {
							paramStr = params
						}
					}
					return paramStr
				}
			})
})(jQuery);
(function($) {
	window.MobileMyPageView = Backbone.ShoppingView
			.extend({
				tabName : "div",
				initialize : function() {
				},
				events : {
					"click .desc_all" : "allChecked",
					"click .btn_delete" : "deleteProduct",
					"change .select_sort" : "selectSort",
					"click [data-page]" : "moreMyPage",
					"click .btn_move_zzim" : "moveZZimPage",
					"click [data-prodidx]" : "goOutLink",
					"click .no_link a" : function(e) {
						e.preventDefault();
						alert("품절 및 단종된 상품입니다. 해당 상품이 존재하지 않습니다.")
					}
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var item = this.model.get("list")[prodidx];
					if (item.prodtype == "1") {
						return true
					} else {
						var isPlay = false;
						if (item.cateid) {
							isPlay = !item.cateid.indexOf("103108")
						}
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, isPlay)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), isPlay,
										item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				viewName : "",
				viewType : "",
				typeMap : {},
				submitURL : "",
				getTitle : function() {
					return {
						bigTitle : "",
						smallTitle : ""
					}
				},
				getLoginTitle : function() {
					return {
						bigTitle : "로그인이 필요한 메뉴입니다.",
						smallTitle : "<a href='https://logins.daum.net/accounts/loginform.do?mobilefull=1&url="
								+ encodeURIComponent(location.href)
								+ "' class='btn_login'>로그인 하기</a>"
					}
				},
				render : function() {
					try {
						$(window).scrollTop(0);
						this.$el.off();
						this.setElement(this.$el);
						this.$el
								.html(this
										.getTemplate({
											viewName : this.viewName,
											viewType : this.viewType,
											typeMap : this.typeMap,
											list : this.getProdList(),
											pageInfo : this.storeModel
													.get("pageInfo"),
											totalCnt : this.storeModel
													.get("totalCnt"),
											type : this.options.params.type
													|| "product",
											txtTitle : (this.storeModel
													.get("loginYN") == "Y") ? this
													.getTitle()
													: this.getLoginTitle(),
											submitURL : this.submitURL
										}))
					} catch (e) {
						this.error(e)
					}
				},
				getProdList : function() {
					return this.storeModel.get("list") || []
				},
				allChecked : function(e) {
					this.$el.find("input[type=checkbox]").prop(
							"checked",
							$(e.currentTarget).find("input[type=checkbox]")
									.prop("checked"))
				},
				deleteProduct : function(e) {
					e.preventDefault();
					var lkj = this;
					if (this.$el.find("[name=prodid]").serialize() != ""
							|| this.$el.find("[name=seq]").serialize() != "") {
						$.ajax({
							url : this.submitURL,
							data : this.$el.find("form").serialize()
						}).done(function() {
							lkj.storeModel.clear({
								silent : true
							});
							lkj.modelFetch()
						}).fail(function() {
							alert("삭제를 실패했습니다.")
						})
					} else {
						alert("삭제할 상품을 선택해 주십시요.");
						return false
					}
				},
				modelFetch : function() {
					this.model.clear({
						silent : true
					});
					this.model.fetch({
						data : this.options.params
					})
				},
				moreMyPage : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var page = target.data("page");
					this.options.params.page = page;
					this.hashChange();
					this.modelFetch()
				},
				storeList : function() {
					var storePageInfo = this.storeModel.get("pageInfo") || {
						page : 1
					};
					var pageInfo = this.model.get("pageInfo") || {
						page : 1
					};
					if (this.model.hasChanged("type")
							|| storePageInfo.page >= pageInfo.page) {
						this.storeModel.clear({
							silent : true
						})
					}
					if (this.model.get("loginYN") == "Y") {
						var data = this.model.toJSON();
						var storeData = this.getProdList() || [];
						data.list = (data.list) ? storeData.concat(data.list)
								: [];
						this.storeModel.set(data)
					} else {
						this.storeModel.clear({
							silent : true
						});
						this.storeModel.set({
							loginYN : "N"
						})
					}
				},
				selectSort : function(e) {
					var type = $(e.currentTarget).val();
					this.options.params.page = 1;
					this.options.params.type = type;
					this.storeModel.clear({
						silent : true
					});
					this.hashChange();
					this.modelFetch()
				},
				moveZZimPage : function(e) {
					e.preventDefault();
					this.storeModel.clear({
						silent : true
					});
					this.model.clear({
						silent : true
					});
					Shopping.routes.mMy.navigate($(e.currentTarget)
							.attr("href").replace("/mini/#", ""), {
						trigger : true
					})
				},
				hashChange : function() {
					Shopping.views.mMy.hashChange(this.options.params, "/my")
				}
			})
})(jQuery);
(function($) {
	window.MobileMainSlideView = MobileSlideView
			.extend({
				initialize : function() {
					MobileMainSlideView.__super__.initialize.apply(this,
							arguments);
					_.bindAll(this, "changeTabNavi", "planningallRender",
							"trendRender", "saleRender", "styleonairallRender",
							"bestRender", "foruRender", "plusshoplistRender",
							"resetSlide", "checkNewSection");
					this.tmpViewMap = _.clone(this.viewMap);
					this.slideID = "mTopSlide";
					try {
						checkGNBInfo.trigger("check:latest", this, {
							obj : this,
							e : "reset:mainSlide"
						});
						this.on("reset:mainSlide", this.resetSlide);
						this.listenTo(checkGNBInfo, "set:newIcon",
								this.checkNewSection);
						this.listenToOnce(this, "rendering:child", function() {
							checkGNBInfo.trigger("set:newIcon")
						})
					} catch (e) {
					}
				},
				viewMap : {
					trend : {
						index : 0,
						viewName : "mTrend",
						tabName : "트렌드",
						cc_a : "a=A_mobile_sh_trend_tab",
						gg_s2 : "trend",
						gg_pn : "top"
					},
					plusshoplist : {
						index : 1,
						viewName : "mPlusshopMain",
						tabName : "플러스샵",
						cc_a : "a=A_mobile_sh_plusshop_tab",
						gg_s2 : "plusshop",
						gg_pn : "top"
					},
					sale : {
						index : 2,
						viewName : "mSpecialPrice",
						tabName : "핫딜",
						cc_a : "a=A_mobile_sh_mtoday_tab",
						gg_s2 : "hotdeal",
						gg_pn : "top"
					},
					planningall : {
						index : 3,
						viewName : "mPlanningShowAll",
						tabName : "기획전",
						cc_a : "a=A_mobile_sh_event_tab",
						gg_s2 : "planningshow",
						gg_pn : "top"
					},
					best : {
						index : 4,
						viewName : "mBestshoprecommview",
						tabName : "베스트100",
						cc_a : "a=A_mobile_sh_best100_tab",
						gg_s2 : "best100",
						gg_pn : "top"
					},
					foru : {
						index : 5,
						viewName : "mForu",
						tabName : "For U",
						cc_a : "A_mobile_sh_foru_tab",
						gg_s2 : "foru",
						gg_pn : "top"
					}
				},
				tabMove : true,
				events : {
					"click [data-tabindex]" : "setTabIndex",
					"click [data-besttab]" : "changeBestTab"
				},
				planningallRender : function() {
					var params = _.clone(this.planningallParam);
					if (this.options.hash == "planningall") {
						this.initOption(params, this.options.paramStr,
								this.planningallParam)
					}
					var instance = setViewInstance(Shopping.views,
							window.MobileEventMainView, {
								name : "mPlanningShowAll",
								params : params,
								rendertrigger : true
							});
					if (instance) {
						Shopping.views.mPlanningShowAll.firstHashChange = true;
						Shopping.views.mPlanningShowAll.off("render:after");
						Shopping.views.mPlanningShowAll.on("render:after",
								this.setCurrentHeight, this);
						Shopping.views.mPlanningShowAll.model.fetch({
							sendtiara : false
						})
					} else {
						Shopping.views.mPlanningShowAll.firstHashChange = false;
						Shopping.views.mPlanningShowAll
								.setElement(Shopping.views.mPlanningShowAll.$el);
						Shopping.views.mPlanningShowAll.setViewEvent()
					}
					$(window).scrollTop(0);
					return Shopping.views.mPlanningShowAll.el
				},
				planningallParam : {
					page : 1,
					tab : ""
				},
				trendRender : function() {
					var params = _.clone(this.trendParam);
					if (this.options.hash == "trend") {
						this.initOption(params, this.options.paramStr,
								this.trendParam)
					}
					var instance = setViewInstance(Shopping.views,
							window.MobileTrendView, {
								name : "mTrend",
								params : params,
								rendertrigger : true
							});
					if (instance) {
						Shopping.views.mTrend.firstHashChange = true;
						Shopping.views.mTrend.off("render:after");
						Shopping.views.mTrend.on("render:after",
								this.setCurrentHeight, this);
						Shopping.views.mTrend.model.fetch({
							data : params,
							sendtiara : false
						})
					} else {
						Shopping.views.mTrend.firstHashChange = false;
						Shopping.views.mTrend
								.setElement(Shopping.views.mTrend.$el)
					}
					return Shopping.views.mTrend.el
				},
				trendParam : {
					page : 1,
					cateid : ""
				},
				saleRender : function() {
					var params = _.clone(this.saleParam);
					if (this.options.hash == "sale") {
						this.initOption(params, this.options.paramStr,
								this.saleParam)
					}
					var instance = setViewInstance(Shopping.views,
							window.MobileSpecialPriceView, {
								name : "mSpecialPrice",
								params : params,
								rendertrigger : true
							});
					if (instance) {
						Shopping.views.mSpecialPrice.firstHashChange = true;
						Shopping.views.mSpecialPrice.off("render:after");
						Shopping.views.mSpecialPrice.on("render:after",
								this.setCurrentHeight, this);
						Shopping.views.mSpecialPrice.model.fetch({
							data : params,
							sendtiara : false
						})
					} else {
						Shopping.views.mSpecialPrice.firstHashChange = false;
						Shopping.views.mSpecialPrice
								.setElement(Shopping.views.mSpecialPrice.$el)
					}
					return Shopping.views.mSpecialPrice.el
				},
				saleParam : {
					page : 1,
					cateid : "",
					dataseq : ""
				},
				styleonairallRender : function() {
					var instance = setViewInstance(Shopping.views,
							window.MobileStyleOnAirListView, {
								name : "mStyleonairList",
								rendertrigger : true
							});
					if (instance) {
						Shopping.views.mStyleonairList.off("render:after");
						Shopping.views.mStyleonairList.on("render:after",
								function() {
									this.setCurrentHeight();
									Shopping.views.mStyleonairList
											.restoreScroll()
								}, this);
						Shopping.views.mStyleonairList.modelFetch()
					} else {
						Shopping.views.mStyleonairList
								.setElement(Shopping.views.mStyleonairList.$el);
						Shopping.views.mStyleonairList.restoreScroll()
					}
					return Shopping.views.mStyleonairList.el
				},
				timeid : null,
				starshopallParam : {
					page : 1,
					tab : ""
				},
				changeBestTab : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var besttab = target.data("besttab");
					if (besttab == "today") {
						this.viewMap.best.viewName = "mMobileBestToday"
					} else {
						if (besttab == "category") {
							this.viewMap.best.viewName = "mMobileBestCategory"
						} else {
							this.viewMap.best.viewName = "mBestshoprecommview"
						}
					}
					Shopping.views[this.viewMap.best.viewName].options.params.besttab = besttab;
					this.setCurrentTabNavi(this.getIndexByHash());
					this.options.paramStr = "besttab:" + besttab;
					var bestTabEl = this.bestRender();
					this.$el.find(".panel:eq(1)").children().detach();
					this.$el.find(".panel:eq(1)").append(bestTabEl)
				},
				bestRender : function() {
					var viewEl = "";
					var selectTab = getOptParam(this.options.paramStr,
							"besttab", "");
					var view = "";
					var params = _.clone(this.resetBestparam);
					if (this.options.hash == "best") {
						params = this.initOption(params, this.options.paramStr,
								this.resetBestparam)
					}
					var todayinstance = setViewInstance(Shopping.views,
							window.MobileBestTodayView, {
								name : "mMobileBestToday",
								params : _.clone(params),
								rendertrigger : true
							});
					var cateinstance = setViewInstance(Shopping.views,
							window.MobileBestCategoryView, {
								name : "mMobileBestCategory",
								params : _.clone(params),
								rendertrigger : true
							});
					var themeinstance = setViewInstance(Shopping.views,
							window.MobileBestShopRecommView, {
								name : "mBestshoprecommview",
								params : _.clone(params),
								rendertrigger : true
							});
					if (selectTab == "today") {
						this.viewMap.best.viewName = "mMobileBestToday";
						Shopping.views.mMobileBestToday.off("render:after");
						Shopping.views.mMobileBestToday.on("render:after",
								this.setCurrentHeight, this);
						Shopping.views.mMobileBestToday.model.fetch({
							sendtiara : false,
							data : {
								cpp : 100
							}
						});
						viewEl = Shopping.views.mMobileBestToday.el
					} else {
						if (selectTab == "category") {
							this.viewMap.best.viewName = "mMobileBestCategory";
							Shopping.views.mMobileBestCategory
									.off("render:after");
							Shopping.views.mMobileBestCategory
									.on("render:after", this.setCurrentHeight,
											this);
							Shopping.views.mMobileBestCategory.model.fetch({
								data : params,
								params : _.clone(params),
								sendtiara : false
							});
							viewEl = Shopping.views.mMobileBestCategory.el
						} else {
							var areaid = params.areaid || "";
							this.viewMap.best.viewName = "mBestshoprecommview";
							if (!_.isEmpty(areaid)) {
								areaid = "A_sh_best100_main_"
										+ areaid.replace("A_sh_best100_main_",
												"").replace("product", "")
										+ "product"
							} else {
								areaid = ""
							}
							Shopping.views.mBestshoprecommview
									.off("render:after");
							Shopping.views.mBestshoprecommview
									.on("render:after", this.setCurrentHeight,
											this);
							Shopping.views.mBestshoprecommview.model.fetch({
								data : {
									mobile : "Y",
									areaid : areaid
								},
								sendtiara : false
							});
							viewEl = Shopping.views.mBestshoprecommview.el
						}
					}
					return viewEl
				},
				resetBestparam : {
					besttab : "",
					areaid : ""
				},
				bestParam : {
					besttab : "",
					areaid : ""
				},
				foruRender : function() {
					var params = _.clone(this.foruParam);
					if (this.options.hash == "foru") {
						params = this.initOption(params, this.options.paramStr,
								this.foruParam)
					}
					var instance = setViewInstance(Shopping.views,
							window.MobileForuView, {
								name : "mForu",
								params : params,
								rendertrigger : true
							});
					if (instance) {
						Shopping.views.mForu.off("render:after");
						Shopping.views.mForu.on("render:after",
								this.setCurrentHeight, this);
						checkGNBInfo.trigger("check:latest", this, {
							obj : Shopping.views.mForu,
							e : "fetch:foruModel"
						})
					} else {
						Shopping.views.mForu
								.setElement(Shopping.views.mForu.$el)
					}
					return Shopping.views.mForu.el
				},
				foruParam : {
					ppage : 1,
					pspage : 1
				},
				plusshoplistRender : function() {
					var instance = setViewInstance(Shopping.views,
							window.MobilePlusshopMainView, {
								name : "mPlusshopMain",
								rendertrigger : true
							});
					if (instance) {
						Shopping.views.mPlusshopMain.off("render:after");
						Shopping.views.mPlusshopMain.on("render:after",
								this.setCurrentHeight, this);
						Shopping.views.mPlusshopMain.model.fetch({
							sendtiara : false
						})
					} else {
						Shopping.views.mPlusshopMain
								.setElement(Shopping.views.mPlusshopMain.$el)
					}
					return Shopping.views.mPlusshopMain.el
				},
				resetSlide : function() {
					s_console.log("resetSlide");
					if (checkGNBInfo.hasMLatestListModel()) {
						this.viewMap = _.clone(this.tmpViewMap);
						$("#linkMenuForu").parent().show()
					} else {
						this.viewMap = _.omit(this.viewMap, "foru");
						$("#linkMenuForu").parent().hide()
					}
					if (_.size(this.tmpViewMap) != _.size(this.viewMap)
							&& this.viewdc && this.viewSlide) {
						this.viewdc.destroy();
						this.viewSlide.destroy();
						this.render()
					}
					try {
						checkGNBInfo.trigger("set:newIcon")
					} catch (e) {
					}
				},
				checkNewSection : function() {
					checkNewSection($(".gnb_comm .link_menu"))
				}
			})
})(jQuery);
(function($) {
	window.MobileSpecialPriceView = Backbone.ShoppingView
			.extend({
				tagName : "div",
				className : "content_hotdeal",
				initialize : function() {
					this.specialPriceModel = new MobileSpecialPriceModel();
					this.specialPriceModel.on("reset change",
							this.setStoreToSpecialPriceModel, this);
					this.model = new MobileHotDealModel();
					this.model.on("reset change", this.setStoreToModel, this);
					this.model.on("reset change", this.specialPriceModelFetch,
							this);
					this.storeModel = new Backbone.Model();
					this.storeModel.on("reset change", this.render, this);
					this.setTemplate("#mobileSpecialPriceTemplate");
					this.setChildTemplate("cateTemplate",
							"#mobileSpcecialPriceCateTemplate");
					this.setChildTemplate("shopmallTemplate",
							"#mobileShopSpcecialPriceTemplate")
				},
				events : {
					"click .link_titcate" : "toggleMenu",
					"click [data-page]" : "changePage",
					"click [data-cateid]" : "changeCateid"
				},
				changeCateid : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var cateid = target.data("cateid");
					this.options.params.page = 1;
					this.options.params.cateid = cateid;
					this.hashChange();
					this.model.clear({
						silent : true
					});
					this.model.fetch({
						data : this.options.params
					})
				},
				changePage : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var page = target.data("page");
					this.options.params.page = page;
					this.hashChange();
					this.specialPriceModel.fetch({
						data : this.options.params
					})
				},
				appendCategoryTemplate : function() {
					var categoryTemplate = this.getChildTemplate(
							"cateTemplate", {
								categoryList : this.storeModel
										.get("categoryList")
										|| [],
								parameters : this.storeModel.get("parameters")
										|| []
							});
					var cateid = this.storeModel.get("parameters").cateid || "";
					var selectedCate = _.find(this.storeModel
							.get("categoryList"), function(item) {
						return item.optseq == cateid
					});
					$(".link_titcate").html(
							((selectedCate) ? selectedCate.optvalue : "전체")
									+ '<span class="ico_key ico_sort"></span>');
					$(".info_sort").append(categoryTemplate);
					if (this.options.params.cateid != ""
							|| $(document).scrollTop() > 0) {
						this.appendSpecialPriceWrap()
					} else {
						$(document).one("scroll",
								this.appendSpecialPriceWrap.bind(this))
					}
				},
				appendSpecialPriceWrap : function() {
					var shopmallTemplate = this.getChildTemplate(
							"shopmallTemplate", {
								shopmallList : this.storeModel
										.get("shopmallList")
										|| [],
								pageInfo : this.storeModel.get("pageInfo"),
								hotdealSize : _.size(this.storeModel
										.get("list"))
							});
					this.$el.find("#shopmallListWrap").html(shopmallTemplate);
					this.trigger("render:after")
				},
				specialPriceModelFetch : function() {
					this.specialPriceModel.fetch({
						data : this.options.params
					})
				},
				setStoreToSpecialPriceModel : function() {
					var data = this.storeModel.toJSON();
					data.categoryList = this.specialPriceModel
							.get("categoryList");
					data.parameters = this.specialPriceModel.get("parameters");
					var shopmallList = this.storeModel.get("shopmallList");
					if (this.specialPriceModel.hasChanged("parameters")
							|| data.pageInfo.page > this.specialPriceModel
									.get("pageInfo").page) {
						data.shopmallList = this.specialPriceModel.get("list")
					} else {
						data.shopmallList = shopmallList
								.concat(this.specialPriceModel.get("list"))
					}
					data.pageInfo = this.specialPriceModel.get("pageInfo");
					this.storeModel.set(data, {
						silent : true
					});
					this.appendCategoryTemplate()
				},
				setStoreToModel : function() {
					var data = this.model.toJSON();
					this.storeModel.set(data)
				},
				render : function() {
					this.$el.html(this.getTemplate({
						hotdealList : this.storeModel.get("list"),
						partnerList : this.storeModel.get("partnerList"),
						adBanner : this.storeModel.get("adBanner") || {}
					}));
					return this.$el
				},
				getShopmallList : function(list) {
					return _.filter(list, function(item, i) {
						return item.areaid == "A_mobile_sh_bestbyshop_item"
					}) || []
				},
				toggleMenu : function(e) {
					e.preventDefault();
					this.$el.find(".info_sort").toggleClass("open_sort")
				},
				hashChange : function() {
					Shopping.views.mMain.hashChange(this.options.params, "")
				}
			})
})(jQuery);
(function($) {
	window.MobileTopView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				swipeData : {},
				dataSource : {},
				slide : {},
				eventIdx : 0,
				initialize : function() {
					this.model = new MobileTopModel();
					this.model.on("reset change", this.render, this);
					this.modelBottom = new MobileTopBottomModel();
					this.modelBottom
							.on("reset change", this.bottomRender, this);
					this.setTemplate("#MobileTopViewTemplate")
				},
				events : {
					"click .tab" : "setTabHandler"
				},
				render : function() {
					try {
						this.$el.off();
						this.model.set({
							HOWAPPINFO : HOWAPPINFO
						}, {
							silent : true
						});
						this.setTemplate("#MobileTopViewTemplate");
						this.$el.html(this.getTemplate(this.model.toJSON()));
						this.setSwipeData("todayList", this.model
								.get("todayList"));
						this.setSwipeData("todayshopping", this.model
								.get("todayshopping"));
						this.setEventHandler();
						this.modelBottom.fetch()
					} catch (e) {
						this.error(e)
					}
				},
				bottomRender : function() {
					try {
						this.modelBottom.set({
							HOWAPPINFO : HOWAPPINFO
						}, {
							silent : true
						});
						this.setTemplate("#MobileTopBottomViewTemplate");
						this.$el.append(this.getTemplate(this.modelBottom
								.toJSON()));
						this.setSwipeData("bsContentList", this.modelBottom
								.get("bsContentList"));
						this.setClickCode();
						if (!$("#daumContent").hasClass("nav_on")
								&& !HOWAPPINFO) {
							$("#daumFoot").show()
						}
						if (window.pageYOffset <= 0) {
							window.scrollTo(1, 0)
						}
					} catch (e) {
						this.error(e)
					}
				},
				openLayer : function(e) {
					if ($.cookie("main_help") != "false") {
						if (!window.orientation || window.orientation == 0
								|| window.orientation == 180) {
							var imgUrl = "http://m1.daumcdn.net/imgsrc.search/shopping/img/mobile/m640/20130404_popup1.png";
							if (HOWAPPINFO) {
								imgUrl = "http://m1.daumcdn.net/imgsrc.search/shopping/img/mobile/m640/20130405_popup1.png"
							}
							var layer = document.createElement("div");
							$(layer)
									.addClass("open_help_layer")
									.html(
											'<div style="position:relative"><img src="'
													+ imgUrl
													+ '" class="img_layer"/><a href="#none" class="btn_close_layer">닫기</a></span></div>')
									.height(
											HOWAPPINFO ? $(window).height() + 6
													: $(window).height()).find(
											".btn_close_layer").on("click",
											this.closeLayer);
							$("body").append(layer).addClass("hide_cont")
						} else {
							$.cookie("main_help", "false", {
								expires : 9999
							});
							$(".open_help_layer").remove();
							$("body").removeClass("hide_cont");
							$(window).off("orientationchange.helplayer")
						}
					}
				},
				closeLayer : function(e) {
					e.preventDefault();
					$(".open_help_layer").remove();
					$("body").removeClass("hide_cont");
					$(window).off("orientationchange.helplayer");
					$.cookie("main_help", "false", {
						expires : 9999
					});
					$(window).scrollTop(0)
				},
				toggleMoreInfo : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					target.parent().parent().toggleClass("info_open")
				},
				setEventHandler : function() {
					this.eventData = $(".box_sale a");
					this.setEventTimer();
					this.setRankTimer()
				},
				setEventTimer : function() {
					clearTimeout(this.eventdelay);
					var self = this;
					_.each(this.eventData, function(t, i) {
						(self.eventIdx == i) ? ($(t).css("top", "0")) : ($(t)
								.css("top", "-300%"))
					});
					this.eventIdx = (this.eventData.size() == (this.eventIdx + 1)) ? 0
							: this.eventIdx + 1;
					this.eventdelay = window.setTimeout(_.bind(
							this.setEventTimer, this), 3000)
				},
				setRankTimer : function() {
					clearTimeout(this.rankdelay);
					$(".rank_compare").toggleClass("next");
					this.rankdelay = window.setTimeout(_.bind(
							this.setRankTimer, this), 4000)
				},
				setSwipeData : function(area, data) {
					this.swipeData[area] = [];
					var self = this;
					if (data.length > 0) {
						_.each(data, function(t, i) {
							self.swipeData[area].push(self.getSwipeTemplate(
									area, t, i))
						});
						this.setCreateSwipe(area)
					}
				},
				getSwipeTemplate : function(area, t, i) {
					return {
						todayList : this.getTodayListTemplate(t, i),
						todayshopping : this.getTodayShoppingTemplate(t, i),
						bsContentList : this.getBest100Template(t)
					}[area]
				},
				getTodayListTemplate : function(t, i) {
					return {
						toHTML : function() {
							return _
									.template(
											'<div class="view_goods">	<span class="time"><strong class="txt">모바일특가</strong><strong class="num"><%= date %></strong></span>	<a href="<%= href %>" data-cc="t=T_mobile,g=G_mobile_sh,a=A_mobile_sh_mtoday,o=<%= i %>" class="thumb"><img src="<%= src %>" alt="<%- title %>" class="thumb_img"></a></div>',
											{
												date : t.date,
												href : t.href,
												src : t.src,
												title : t.title,
												i : i + 1
											})
						}
					}
				},
				getTodayShoppingTemplate : function(t, i) {
					var cate = (i < this.model.get("tab1Size")) ? "hot"
							: ((i < (this.model.get("tab1Size") + this.model
									.get("tab2Size"))) ? "fashion" : "living");
					return {
						cate : cate,
						toHTML : function() {
							return _
									.template(
											'<div class="today_shop"><ul class="list_today"><% _.each(subItemList, function(t,i) { %><li>	<a href="<%= t.linkUrl %>" class="link_today">		<span class="thumb"><img src="<%= t.imgUrl %>" class="thumb_img" alt="<%- t.text0 + \' \'+ t.text1%>"></span>		<span class="tit"><%= t.text0 %><br/><%= t.text1 %></span>	</a></li><% }); %></ul></div>',
											{
												cate : cate,
												subItemList : t.shopItemList
											})
						}
					}
				},
				getBest100Template : function(t) {
					return {
						cate : t.cateid,
						toHTML : function() {
							return _
									.template(
											'<div class="box_list"><ol class="list_best_top"><% _.each(list, function(t,i){ %><li>	<a href="<%= t.href %>" data-cc="t=T_mobile,g=G_mobile_sh,a=A_mobile_sh_best100,o=<%= i+1 %>" class="link_best">		<span class="thumb">			<span class="img_top ico_rank<%= t.rank %>"><%= t.rank %>위</span>			<img src="<%= t.src %>" width="80" height="80" alt="<%- t.title %>">		</span>		<span class="cont">			<span class="tit"><%= __.cutString(t.title,24,\'...\') %></span>			<em class="price"><%= __.toNumberExp(t.price) %><span class="screen_out">원</span></em>		</span>	</a></li><%if (i==2) {%></ol><ol class="list_best_top"><% } %><% }); %></ol></div>',
											{
												cate : t.cateid,
												list : t.list
											})
						}
					}
				},
				getframeEl : function(area) {
					return {
						todayList : {
							frameEl : $("#flickingWrap")[0],
							prevBtn : $("#btnPrev"),
							nextBtn : $("#btnNext"),
							index : 0
						},
						todayshopping : {
							frameEl : $("#flickingTodayWrap")[0],
							prevBtn : $("#btnTodayPrev"),
							nextBtn : $("#btnTodayNext"),
							tab : $(".tab_today .tab"),
							page : $("#todayPaging"),
							moreBtn : $("#btnTodayMore"),
							moreHref : MOBILEPATH
									+ "todayshopping.daum?appcode=TODAYSHOPPING&tabType=",
							index : __.rdm(this.model.get("tab1Size") - 1)
						},
						bsContentList : {
							frameEl : $("#flickingBest100Wrap")[0],
							prevBtn : $("#btnBest100Prev"),
							nextBtn : $("#btnBest100Next"),
							tab : $(".tab_best .tab"),
							page : $("#best100Paging"),
							moreBtn : $("#btnBestMore"),
							moreHref : MOBILEPATH
									+ "best100.daum?appcode=BESTCATE&cateid=",
							index : 0
						}
					}[area]
				},
				setCurrentPage : function(area) {
					if (this.getframeEl(area).page) {
						this.getframeEl(area).page.html("<em>"
								+ (this.dataSource[area].index + 1) + "</em>/"
								+ this.dataSource[area].data.length)
					}
				},
				setCurrentTab : function(area) {
					if (this.getframeEl(area).tab) {
						var cate = "";
						this.dataSource[area].queryCurrent(function(data) {
							cate = data.cate
						});
						_.each(this.getframeEl(area).tab, function(t, i) {
							$(t).removeClass("on");
							if ($(t).attr("data-cate") == cate) {
								$(t).addClass("on")
							}
						});
						if (this.getframeEl(area).moreBtn) {
							this.getframeEl(area).moreBtn.attr("href", this
									.getframeEl(area).moreHref
									+ cate)
						}
					}
				},
				setTabHandler : function(e) {
					e.preventDefault();
					var area = $(e.currentTarget).attr("data-area");
					var index = parseInt($(e.currentTarget).attr("data-index"),
							10);
					this.setCurrentIndex(area, index)
				},
				setCurrentIndex : function(area, index) {
					this.dataSource[area].setCurrentIndex(index);
					this.slide[area].show();
					this.setTabPage(area)
				},
				setTabPage : function(area) {
					this.setCurrentTab(area);
					this.setCurrentPage(area)
				},
				onSlideNext : function() {
				},
				onSlidePrev : function() {
				},
				setCreateSwipe : function(area) {
					this.dataSource[area] = new slide.InfiniteDataSource(
							this.swipeData[area]);
					this.slide[area] = new slide.Slide(
							this.getframeEl(area).frameEl,
							this.dataSource[area]);
					var self = this;
					this.slide[area].on("next", function() {
						self.setTabPage(area);
						self.onSlideNext()
					});
					this.slide[area].on("prev", function() {
						self.setTabPage(area);
						self.onSlidePrev()
					});
					$(this.getframeEl(area).prevBtn).on("click", function() {
						self.slide[area].prev()
					});
					$(this.getframeEl(area).nextBtn).on("click", function() {
						self.slide[area].next()
					});
					this.setCurrentIndex(area, this.getframeEl(area).index)
				}
			})
})(jQuery);
(function($) {
	window.MobileBestCategoryView = Backbone.ShoppingView.extend({
		tagName : "div",
		initialize : function() {
			this.model = new MobileBestCategoryModel();
			this.model.on("reset change", this.render, this);
			this.setTemplate("#mobileBestCategoryTemplate")
		},
		events : {
			"click [data-cateid]" : "moveList"
		},
		moveList : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			Backbone.history.navigate("!/best/besttab:category&cateid:"
					+ target.data("cateid"), {
				trigger : true
			})
		},
		render : function() {
			this.$el.html(this.getTemplate(this.model.toJSON()))
		},
		hashChange : function() {
			Shopping.views.mMain.hashChange(this.options.params, "")
		}
	})
})(jQuery);
(function($) {
	window.MobileBestCatetoryListView = Backbone.ShoppingView.extend({
		tagName : "div",
		initialize : function() {
			this.model = new MobileBestCategoryListModel();
			this.model.on("reset change", this.render, this);
			this.setTemplate("#mobileBestCategoryListTemplate")
		},
		events : {},
		render : function() {
			this.$el.html(this.getTemplate(this.model.toJSON()))
		}
	})
})(jQuery);
(function($) {
	window.MobileBestShopRecommView = Backbone.ShoppingView
			.extend({
				tagName : "div",
				initialize : function() {
					this.setTemplate("#mobileBestShopRecommTemplate");
					this.model = new MobileBestShopRecommModel();
					this.model.on("reset change", this.render, this)
				},
				events : {
					"click [data-prodidx]" : "goOutLink"
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var tabidx = target.data("tabidx");
					var tab = this.model.get("list")[tabidx];
					var item = tab.list[prodidx];
					if (item.prodtype == "1") {
						return true
					} else {
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.shopid, false)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.shopid,
										target.attr("href"), false, item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				render : function() {
					try {
						this.$el.html(this.getTemplate({
							list : this.getRecommList(),
							mobilePath : MOBILEPATH
						}));
						this.setClickCode({
							t : "T_mobile",
							g : "G_mobile_best100"
						})
					} catch (e) {
						this.error(e)
					}
				},
				getRecommList : function() {
					var list = this.model.get("list");
					var returnList = [];
					var selectTab = 0;
					if (this.model.get("selectTab") != ""
							&& this.model.get("selectTab").length == 1) {
						selectTab = parseInt(this.model.get("selectTab"), 10)
					}
					if (selectTab != 0) {
						returnList.push(list[selectTab]);
						_.each(list, function(item, i) {
							if (i != selectTab) {
								returnList.push(item)
							}
						})
					} else {
						returnList = list
					}
					return returnList
				},
				hashChange : function() {
					Shopping.views.mMain.hashChange(this.options.params, "")
				}
			})
})(jQuery);
(function($) {
	window.MobileBestTodayView = Backbone.ShoppingView
			.extend({
				tagName : "div",
				initialize : function() {
					this.model = new MobileBestTodayModel();
					this.model.on("reset change", this.render, this);
					this.setTemplate("#mobileBestTodayTemplate")
				},
				events : {
					"click [data-prodidx]" : "goOutLink"
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var item = this.model.get("list")[prodidx];
					if (item.prodtype == "1") {
						return true
					} else {
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, false)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), false, item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				render : function() {
					this.$el.html(this.getTemplate(this.model.toJSON()))
				},
				hashChange : function() {
					Shopping.views.mMain.hashChange(this.options.params, "")
				}
			})
})(jQuery);
(function($) {
	window.MobileDetailCategoryView = Backbone.ShoppingView.extend({
		el : "#detailCategory",
		initialize : function() {
			this.setTemplate("#mobileDetailCategoryTitleTemplate");
			this.model = new (Backbone.ShoppingModel.extend({
				url : Shopping.apis.mCategory
			}));
			this.model.on("sync", this.render, this);
			this.list = [];
			this.upcateid = "";
			this.currentCateid = "";
			this.currentDepth = 0;
			_.bindAll(this, "slideRender")
		},
		moveCatenavi : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var cate = target.data("cateid");
			this.resetSaveParam();
			this.model.fetch({
				data : {
					cateid : cate
				}
			}).done(this.slideRender)
		},
		upCateMove : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			this.model.fetch({
				data : {
					cateid : this.upcateid
				}
			}).done(this.slideRender)
		},
		render : function() {
			this.setElement("#detailCategory");
			if (this.options.resetParam) {
				this.resetSaveParam()
			}
			this.currentCateid = this.currentCateid
					|| this.options.common.cateid;
			this.titleRender();
			this.options.resetParam = false
		},
		resetSaveParam : function() {
			this.list = [];
			this.upcateid = "";
			this.currentCateid = "";
			this.currentDepth = 0
		},
		titleRender : function() {
			var data = this.model.toJSON();
			var self = this;
			var titleData = [];
			var getTitleData = function(item) {
				var category = _.first(item);
				if (category && _.has(category, "subList")) {
					self.list = category.subList;
					titleData.push(_.omit(category, "subList"));
					getTitleData(category.subList)
				} else {
					if (category) {
						if (category.groupid) {
							self.list = item
						}
						var lastCate = _.find(item, function(t) {
							return t.cateid == self.currentCateid
						});
						if (lastCate) {
							titleData.push(lastCate)
						}
					}
				}
			};
			getTitleData(data.category);
			var subData = _.last(titleData, 2);
			if (!_.isEmpty(titleData)) {
				this.$el.find(".info_depth").html(this.getTemplate({
					list : subData
				}));
				if (this.$el.hasClass("depth_open")) {
					this.$el.find(".ico_close").hide()
				}
				var tempData = _.clone(titleData);
				tempData.pop();
				var upcateList = _.last(tempData, 2);
				var currentCate = _.first(subData);
				var upcate = _.first(upcateList);
				this.currentCateid = currentCate.cateid;
				this.currentDepth = currentCate.depth;
				if (_.size(titleData) > 2) {
					this.upcateid = upcate.cateid;
					this.$el.find(".link_high").show()
				} else {
					this.upcateid = "";
					this.$el.find(".link_high").hide()
				}
			}
		},
		events : {
			"click .link_up" : "showUpCateLayer",
			"click .link_now" : "showLayer",
			"click .link_high" : "upCateMove",
			"click [data-cateid]" : "moveCatenavi"
		},
		showUpCateLayer : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			this.$el.toggleClass("depth_open");
			this.$el.find(".ico_close").toggle();
			if (this.$el.hasClass("depth_open") && this.upcateid) {
				this.upCateMove(e)
			}
		},
		showLayer : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			this.$el.toggleClass("depth_open");
			this.$el.find(".ico_close").toggle();
			if (this.$el.hasClass("depth_open")) {
				this.slideRender()
			}
		},
		slideRender : function() {
			if (this.slideDs) {
				this.slideDs.destroy();
				this.cateSlide.destroy()
			}
			var row = 8;
			var totalPage = Math.ceil(_.size(this.list) / row);
			var chunkData = __.chunk(this.list, row, true);
			var datasource = [];
			var self = this;
			_.each(chunkData, function(item, index) {
				datasource.push({
					list : item,
					page : index,
					total : totalPage,
					params : this.model.get("params"),
					toHTML : function(list) {
						return self.getChildTemplate(
								"#detailCategoryItemTemplate", {
									list : this.list
								})
					}
				})
			}, this);
			this.slideDs = new slide.DataSource(datasource);
			this.cateSlide = new slide.Slide(
					this.$el.find("#cateSlideContent")[0], this.slideDs, {
						panel : {
							tagName : "ul",
							className : "list_catelayer"
						}
					});
			this.pageRender({
				page : this.slideDs.index,
				total : _.size(datasource)
			});
			this.cateSlide.on("next", _.bind(function() {
				this.slideDs.queryCurrent(_.bind(this.pageRender, this))
			}, this));
			this.cateSlide.on("prev", _.bind(function() {
				this.slideDs.queryCurrent(_.bind(this.pageRender, this))
			}, this))
		},
		pageRender : function(data) {
			if (data) {
				this.$el.find("#cateSlidePage").show();
				this.$el.find("#cateSlidePage").html(
						this.getChildTemplate("#detailCategoryPageContent",
								data));
				if (data.last == "Y") {
				}
			} else {
				this.$el.find("#cateSlidePage").hide()
			}
		}
	})
})(jQuery);
(function($) {
	window.MobileDetailCompareView = Backbone.ShoppingView
			.extend({
				el : "#tabContent",
				initialize : function() {
					this.model = new MobileDetailCompareModel();
					this.model.on("remake", this.render, this);
					this.commonModel = new (Backbone.Model.extend({
						defaults : {
							cateid : "",
							prodid : "",
							mobile_buy_yn : ""
						}
					}));
					this.chartModel = new MobileDetailChartImageModel();
					this.chartModel.on("remake", this.chartRender, this);
					this.setTemplate("#mobileDetailCompareTemplate");
					this.setChildTemplate("#mobileChartImageTemplate");
					this.storeCompareList = [];
					this.currentPage = 0;
					this.storeMobileBuy = "N";
					this.chartTerm = "1m"
				},
				events : {
					"click .fold_item" : "toggleSameProd",
					"click [data-page]" : "changePage",
					"click [data-month]" : "changeTerm",
					"click [data-prodidx]" : "goOutLink",
					"click .link_top" : moveTop
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var sameidx = target.data("sameidx");
					var item = {
						isPlay : !this.options.common.cateid.indexOf("103108"),
						id : this.storeCompareList[prodidx].id,
						cpId : this.storeCompareList[prodidx].cpId,
						mvalidyn : this.storeCompareList[prodidx].mvalidyn
					};
					if (_.isNumber(sameidx)) {
						item = {
							id : this.storeCompareList[prodidx].samePriceList[sameidx].id,
							cpId : this.storeCompareList[prodidx].samePriceList[sameidx].cpId,
							mvalidyn : this.storeCompareList[prodidx].samePriceList[sameidx].mvalidyn
						}
					}
					if (item.mvalidyn == "N") {
						Backbone.history.previousFragment = Backbone.history.fragment;
						Backbone.history.navigate("outLinkLayer");
						onlyPcLayer(item.id, item.isPlay)
					} else {
						if (item.cpId == "11st" || item.cpId == "gmarket"
								|| item.cpId == "auction") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							priceDiffLayer(item.id, target.attr("href"),
									item.isPlay, item.cpId)
						} else {
							return true
						}
					}
					return false
				},
				render : function() {
					this.setElement("#tabContent");
					this.rootUrl = "#!/detail/" + this.options.common.prodid
							+ "/";
					this.params = _.clone(this.options.params);
					_.extend(this.params, this.options.common);
					this.checkList();
					var data = this.model.toJSON();
					data.storeSelectPage = this.currentPage;
					data.compareList = this.storeCompareList;
					data.common = this.options.common;
					data.params = this.options.params;
					this.$el.html(this.getTemplate(data));
					this.getChartImage();
					if (M_SHOPHOW.GNB) {
						M_SHOPHOW.GNB.checkZZim()
					}
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				chartRender : function() {
					var data = this.chartModel.toJSON();
					data.common = this.options.common;
					if (!data.common.isPlay) {
						data.detailTop = Shopping.views.mobileDetail.model
								.get("detailTop");
						chartPriceTrend("one", "648df6_"
								+ this.options.common.prodid + "_"
								+ this.options.common.subcode, "",
								this.chartTerm, "topTrend", "MOBILE");
						this.$el.find("#trendSection").html(
								this.getChildTemplate(
										"#mobileChartImageTemplate", data));
						Shopping.views.mobileDetail.SHOP_CC.setHandler(this.el)
					} else {
						this.$el.find("#trendSection").hide();
						this.$el.find(".tit_state").hide()
					}
				},
				changeTerm : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					this.chartTerm = target.data("month");
					this.getChartImage()
				},
				getChartImage : function() {
					var data = this.options.common;
					data.term = this.chartTerm;
					this.chartModel.fetch({
						data : data,
						remake : true
					})
				},
				checkList : function() {
					this.commonModel.set(this.options.common);
					if (this.options.common.isPlay) {
						this.commonModel.set("mobile_buy_yn", "")
					} else {
						this.commonModel.set("mobile_buy_yn", this.model
								.get("parameters").mobile_buy_yn)
					}
					var data = this.model.toJSON();
					if (data.pageInfo.selectPage == 1
							|| this.commonModel.hasChanged("prodid")
							|| this.commonModel.hasChanged("subcode")
							|| this.commonModel.hasChanged("seat")
							|| this.commonModel.hasChanged("mobile_buy_yn")) {
						this.storeCompareList = [];
						this.currentPage = 0
					}
					if (this.currentPage < data.pageInfo.selectPage) {
						this.storeCompareList = this.storeCompareList
								.concat(data.compareList);
						this.currentPage = data.pageInfo.selectPage
					}
				},
				toggleSameProd : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					this.$el.find(
							"[data-sameprod=" + target.data("togglesameid")
									+ "]").toggle();
					var arrow = target.find(".ico_compare");
					arrow.hasClass("ico_off") ? arrow.attr("class",
							"ico_compare ico_on") : arrow.attr("class",
							"ico_compare ico_off")
				},
				changePage : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var page = target.data("page");
					this.params.page = page;
					this.params.pageSize = 20;
					this.model.fetch({
						data : this.params,
						remake : true
					})
				}
			})
})(jQuery);
(function($) {
	window.MobileDetailInfoView = Backbone.ShoppingView
			.extend({
				el : "#tabContent",
				initialize : function() {
					this.model = new MobileDetailInfoModel();
					this.model.on("remake", this.render, this);
					this.setTemplate("#mobileDetailInfoTemplate");
					this.setChildTemplate("#detailSlidePageTemplate");
					_.bindAll(this, "renderSlidePage")
				},
				events : {
					"click #moveTop" : moveTop,
					"click .link_subtop" : moveTop
				},
				render : function() {
					this.setElement("#tabContent");
					this.$el.attr("class", "section_type2");
					var data = this.model.toJSON();
					data.common = this.options.common;
					this.$el.html(this.getTemplate(data));
					this.renderSlideView();
					Shopping.views.mobileDetail.SHOP_CC.setHandler(this.el);
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				renderSlideView : function() {
					var isPlay = this.options.common.isPlay;
					var imageList = isPlay ? this.model.get("photoList") || []
							: this.model.get("detailInfo").imageList || [];
					var template = isPlay ? _
							.template('<img src="<%= __.getProductImageUrl(bigImgUrl, 270) %>" onerror="this.src=\''
									+ __.getErrorImage(270)
									+ '\'" width="200" class="thumb_item" alt="상품이미지">')
							: _
									.template('<img src="<%= __.getProductImageUrl(image, 270, imgupdtime, id) %>" width="200" class="thumb_item" alt="상품이미지" onerror="this.src=\''
											+ __.getErrorImage(270) + "'\">");
					if (!_.isEmpty(imageList)) {
						this.$el.find("#slideSection").show();
						var id = this.options.common.prodid;
						var datalist = [];
						_.each(imageList, function(image, index) {
							datalist.push({
								currentPage : index,
								id : id,
								image : image,
								size : _.size(imageList),
								template : template,
								toHTML : function() {
									var data = this.image;
									data.id = this.id;
									return this.template(data)
								}
							})
						});
						if (_.size(imageList) > 1) {
							this.ds = new slide.DataSource(datalist);
							var sl = new slide.Slide(this.$el
									.find("#infoSlide").get(0), this.ds, {
								container : {
									id : "mDetailInfoImageSlide"
								}
							});
							sl.on("prev", this.renderSlidePage);
							sl.on("next", this.renderSlidePage);
							this.renderSlidePage()
						} else {
							_.each(datalist, function(item) {
								var data = item.image;
								data.id = item.id;
								this.$el.find("#infoSlide")
										.html(template(data))
							}, this);
							this.$el.find("#infoPage").hide()
						}
					} else {
						this.$el.find("#slideSection").hide()
					}
				},
				renderSlidePage : function() {
					this.ds.queryCurrent(_.bind(function(data) {
						this.$el.find("#infoPage").html(
								this.getChildTemplate(
										"#detailSlidePageTemplate", data))
					}, this))
				}
			})
})(jQuery);
(function($) {
	window.MobileDetailMainView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				initialize : function() {
					this.model = new MobileDetailMainModel();
					this.model.on("remake", this.render, this);
					this.tiaraModel = new Backbone.ShoppingModel();
					this.setTemplate("#mobileDetailMainTemplate");
					_.bindAll(this, "renderLayer");
					this.$window = $(window);
					if (window.gargoyle) {
						try {
							var comm = this.model.get("common");
							gargoyle
									.initParam({
										de : "MO",
										s1 : "shopping",
										s2 : "detail",
										s3 : "",
										pn : (comm.modelYN == "Y") ? (comm.isPlay ? "play"
												: "model")
												: "product",
										t : "T_mobile"
									})
						} catch (e) {
						}
					}
				},
				render : function() {
					$("#daumWrap").addClass("detail_content");
					this.$el.off();
					this.setElement("#mContent");
					if (this.model.get("code") == "204") {
						alert("해당 상품이 존재하지 않습니다.");
						window.history.back()
					}
					this.setElement("#mContent");
					var common = this.model.get("common");
					var cc_g = "";
					if (common.modelYN == "Y") {
						if (common.isPlay) {
							this.tiaraModel.tiara = {
								url : "http://m.shopping.daum.net/mini/playdetail.daum",
								title : "공연상세 | Daum 쇼핑하우"
							};
							cc_g = "G_nsh_mobile_play_model"
						} else {
							this.tiaraModel.tiara = {
								url : "http://m.shopping.daum.net/mini/productdetail.daum",
								title : "모델상세 | Daum 쇼핑하우"
							};
							cc_g = "G_nsh_mobile_model"
						}
					} else {
						this.tiaraModel.tiara = {
							url : "http://m.shopping.daum.net/mini/normaldetail.daum",
							title : "일반상세 | Daum 쇼핑하우"
						};
						cc_g = "G_nsh_mobile_model"
					}
					if (window.gargoyle) {
						gargoyle
								.initParam({
									de : "MO",
									s1 : "shopping",
									s2 : "detail",
									s3 : "",
									pn : (common.modelYN == "Y") ? (common.isPlay ? "play"
											: "model")
											: "product",
									t : "T_mobile",
									g : cc_g
								})
					}
					this.tiaraModel.sendPageView();
					this.params = this.options.params;
					this.rootUrl = "#!/detail/" + this.options.prodid + "/";
					var data = this.model.toJSON();
					data.tab = this.options.params.tab || "top";
					this.$el.html(this.getTemplate(data));
					this.renderCategoryView();
					this.renderTabView();
					if (data.tab == "write") {
						this.$el.find(".desc_notice").hide()
					} else {
						this.$el.find(".desc_notice").show()
					}
					if (!_.isEmpty(this.options.params.zzimid)) {
						addMobileZzim(this.options.params.zzimid)
					}
					$(".tit_navi").off("click");
					if (common.modelYN == "Y") {
						$(".tit_navi").on("click", _.bind(function() {
							this.setNavigation("tab", "top")
						}, this))
					}
					$(window).scrollTop($("#mContent").offset().top - 10);
					this.setClickCode({
						t : "T_mobile",
						g : cc_g
					}, false);
					this.SHOP_CC.setHandler(this.$el.find(".select_product"));
					this.SHOP_CC.setHandler(this.$el.find(".tab_info"));
					$("#recomProd").hide();
					if (Shopping.views.mobileSearchMain) {
						Shopping.views.mobileSearchMain
								.makeChildViewInstance("MobileSearchRecentView").model
								.fetch({
									data : {
										pagetype : "model"
									}
								})
					}
				},
				renderCategoryView : function() {
					var common = this.model.get("common");
					setViewInstance(this.childView, MobileDetailCategoryView, {
						name : "mDetailCategory",
						common : common,
						resetSaveParam : true,
						params : _.clone(this.options.params)
					});
					this.childView.mDetailCategory.model.fetch({
						data : {
							cateid : common.cateid
						}
					})
				},
				renderTabView : function() {
					var currentTab = (this.options.params.tab || "Top")
							.replace(/./, function(c) {
								return c.toUpperCase()
							});
					var viewClass = "MobileDetail" + currentTab + "View";
					var viewName = "mobileDetail" + currentTab;
					var renderFunc = "render" + currentTab;
					setViewInstance(this.childView, window[viewClass], {
						name : viewName,
						common : this.model.get("common"),
						params : _.clone(this.options.params)
					});
					var fetchParams = _.clone(this.options.params);
					var common = _.clone(this.model.get("common"));
					if (common.modelYN == "N") {
						common.fullName = ""
					}
					_.extend(fetchParams, common);
					if (currentTab == "Compare") {
						fetchParams.pageSize = 20
					} else {
						if (currentTab == "Review") {
							fetchParams.reviewcpp = 10
						}
					}
					if (this[renderFunc]) {
						this[renderFunc](fetchParams)
					} else {
						this.renderTopSummary(fetchParams);
						this.childView[viewName].model.fetch({
							data : fetchParams,
							remake : true
						})
					}
				},
				renderTop : function(data) {
					this.$el.find("#detailTop").show();
					this.$el.find("#detailTopSummary").hide();
					setViewInstance(this.childView, MobileDetailTopView, {
						name : "mobileDetailTop",
						common : this.model.get("common"),
						params : _.clone(this.options.params)
					});
					var fetchParams = _.clone(this.options.params);
					_.extend(fetchParams, this.model.get("common"));
					_.extend(fetchParams, Shopping.preventParams);
					this.childView.mobileDetailTop.model.fetch({
						data : fetchParams,
						remake : true
					});
					setViewInstance(this.childView, MobileSimilarImageProdView,
							{
								name : "mobileDetailSimilarImageProd"
							});
					this.childView.mobileDetailSimilarImageProd.modelFetch(
							this.options.prodid, "detail")
				},
				renderTopSummary : function() {
					this.$el.find("#detailTop").hide();
					this.$el.find("#detailTopSummary").show();
					setViewInstance(this.childView, MobileDetailTopSummaryView,
							{
								name : "mobileDetailTopSummary",
								common : this.model.get("common"),
								params : _.clone(this.options.params)
							});
					var fetchParams = _.clone(this.options.params);
					_.extend(fetchParams, this.model.get("common"));
					_.extend(fetchParams, Shopping.preventParams);
					this.childView.mobileDetailTopSummary.model.fetch({
						data : fetchParams,
						remake : true
					})
				},
				events : {
					"click [data-tab]" : "changeTab",
					"click .select_product .link_fold" : "toggleSelectBox",
					"click [data-subcode]" : "changeSubcode",
					"click [data-seat]" : "changeSeat",
					"click #subcodeMore" : "moreGroup"
				},
				moreGroup : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					target.parent().addClass("more");
					target.hide()
				},
				changeSubcode : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var subcode = target.data("subcode");
					var data = {
						subcode : subcode,
						tab : "compare"
					};
					this.setNavigation(data)
				},
				changeSeat : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var seat = target.data("seat");
					var data = {
						seat : seat,
						tab : "compare"
					};
					this.setNavigation(data)
				},
				toggleSelectBox : function(e) {
					e.preventDefault();
					this.$el.find(".select_product").toggleClass("fold_on")
				},
				changeTab : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var tab = target.data("tab");
					if (tab == "write") {
						var isLogin = false;
						$
								.ajax({
									url : Shopping.apis.reviewCheckLogin,
									context : this,
									async : false
								})
								.success(
										function(r) {
											if (r.isLogin !== "Y") {
												document.location.href = "https://logins.daum.net/accounts/loginform.do?category=searchshop&url="
														+ encodeURIComponent(document.location.href
																.replace(/#.+/,
																		"")
																+ this
																		.getMoveHash(
																				"tab",
																				"write"))
											} else {
												this.setNavigation("tab", tab)
											}
										})
					} else {
						this.setNavigation("tab", tab)
					}
				},
				renderLayer : function(type, clickid) {
					var target = this.$el.find("#" + clickid);
					var url = target.attr("href");
					var prodid = "";
					var isPlay = (this.model.get("common") || {}).isPlay;
					if (type == "pconly") {
						prodid = target.size() > 0 ? target.data("pconly")
								: clickid;
						onlyPcLayer(prodid, isPlay)
					} else {
						prodid = target.data("diffid");
						var shopid = target.data("diffshopid");
						priceDiffLayer(prodid, url, isPlay, shopid)
					}
					this.SHOP_CC.setHandler($(".shopping_layer"))
				}
			})
})(jQuery);
(function($) {
	window.MobileDetailReviewView = Backbone.ShoppingView.extend({
		el : "#tabContent",
		initialize : function() {
			this.model = new MobileDetailReviewModel();
			this.model.on("remake", this.render, this);
			this.guideModel = new MobileDetailGuideModel();
			this.guideModel.on("remake", this.guideRender, this);
			this.setTemplate("#mobileDetailReviewMainTemplate");
			this.setChildTemplate("#mobileDetailReviewContentTemplate");
			this.setChildTemplate("#mobileDetailGuideContentTemplate");
			this.selectTab = "review";
			this.storeReview = {
				page : 0,
				pageInfo : {},
				list : [],
				cpList : [],
				prodid : ""
			};
			this.storeGuide = {
				wtype : "",
				list : [],
				page : ""
			};
			this.guideList = {
				"2" : {
					title : "지식",
					wtype : "2",
					list : "knowledgeList"
				},
				"4" : {
					title : "카페",
					wtype : "4",
					list : "cafeList"
				},
				"8" : {
					title : "블로그",
					wtype : "8",
					list : "blogList"
				},
				"16" : {
					title : "게시판",
					wtype : "16",
					list : "boardList"
				}
			};
			this.checkGuideList = {
				best : {
					wtype : "",
					list : "bestShoppingGuide"
				},
				video : {
					wtype : "",
					list : "multiMedia"
				},
				"2" : {
					wtype : "2",
					list : "knowledgeList"
				},
				"4" : {
					wtype : "4",
					list : "cafeList"
				},
				"8" : {
					wtype : "8",
					list : "blogList"
				},
				"16" : {
					wtype : "16",
					list : "boardList"
				}
			}
		},
		events : {
			"change .opt_select" : "changeOption",
			"click [data-reviewpage]" : "changeReivewPage",
			"click [data-subtab]" : "changeTab",
			"click [data-wtype]" : "selTab",
			"click [data-wpage]" : "selPage",
			"click .link_top" : moveTop,
			"click .btn_del" : "delReview",
			"click .btn_modify" : "modifyReview"
		},
		modifyReview : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var data = {
				seqid : target.data("seqid"),
				tab : "write"
			};
			this.setNavigation(data)
		},
		delReview : function(e) {
			e.preventDefault();
			if (confirm("삭제하시겠습니까?")) {
				var target = $(e.currentTarget);
				var data = this.params;
				data.id = target.data("seqid");
				this.resetStoreReivewList();
				$.ajax({
					url : Shopping.apis.deleteUserReview,
					data : data,
					context : this,
					async : false
				}).success(function(e) {
					if (e.code == "200") {
						alert("삭제 되었습니다.");
						this.model.fetch({
							data : this.params,
							remake : true
						})
					}
				})
			}
		},
		selPage : function(e) {
			e.preventDefault();
			var el = $(e.currentTarget);
			this.guidparams.wpage = el.attr("data-wpage");
			this.send()
		},
		changeTab : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			if (target.data("subtab") == "review") {
				this.reviewRender()
			} else {
				this.params.wcount = 3;
				this.guideModel.fetch({
					data : this.params,
					remake : true
				})
			}
		},
		changeReivewPage : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var page = target.data("reviewpage");
			this.params.page = page;
			this.params.reviewcpp = "10";
			this.model.fetch({
				data : this.params,
				remake : true
			})
		},
		changeOption : function(e) {
			var target = $(e.currentTarget);
			var value = target.find(":selected").text();
			target.parent().find(".tit_sort").html(
					value + '<span class="ico_compare ico_arrow"></span>');
			if (target.attr("name") == "wtype") {
				this.guidparams.wtype = target.val();
				this.guidparams.wpage = 1;
				this.send()
			} else {
				this.resetStoreReivewList();
				this.params.shopid = target.val();
				this.params.page = 1;
				this.model.fetch({
					data : this.params,
					remake : true
				})
			}
		},
		render : function() {
			this.setElement("#tabContent");
			this.rootUrl = "#!/detail/" + this.options.common.prodid + "/";
			this.$el.attr("class", "section_type4");
			var data = this.model.toJSON();
			data.common = this.options.common;
			_.extend(this.params, this.options.params);
			_.extend(this.params, this.options.common);
			this.$el.html(this.getTemplate(data));
			if (this.selectTab == "review") {
				this.reviewRender()
			} else {
				this.params.wcount = 3;
				this.guideModel.fetch({
					data : this.params,
					remake : true
				})
			}
		},
		guideRender : function() {
			var data = this.guideModel.toJSON();
			var listCnt = 0;
			var selectList = {};
			_.extend(this.guidparams, this.options.common);
			_.extend(this.guidparams, this.options.params);
			_.extend(this.guidparams, this.guideModel.get("parameter"));
			if (data.parameter.wtype == 1) {
				_.each(this.checkGuideList, function(item, index) {
					if (data[item.list].total > 0) {
						listCnt++;
						selectList = item
					}
				});
				if (listCnt == 1 && selectList.wtype != "") {
					this.guidparams.wtype = selectList.wtype;
					this.guidparams.wpage = 1;
					this.send();
					return false
				}
			}
			data.params = this.guidparams;
			data.common = this.options.common;
			var type = data.parameter.wtype;
			if (type != 1) {
				this.storeGuideData();
				var name = this.guideList[type].list;
				data[name].list = this.storeGuide.list;
				data.currentPage = this.storeGuide.page
			}
			this.$el.find("#subTabContent").html(
					this.getChildTemplate("#mobileDetailGuideContentTemplate",
							data));
			Shopping.views.mobileDetail.SHOP_CC.setHandler(this.el);
			if (window.gargoyle) {
				gargoyle.bind()
			}
		},
		storeGuideData : function() {
			var data = this.guideModel.toJSON();
			var type = data.parameter.wtype;
			var targetName = this.guideList[type].list;
			if (this.storeGuide.wtype != data.parameter.wtype) {
				this.storeGuide = {
					wtype : "",
					list : [],
					page : 0
				};
				this.storeGuide.wtype = data.parameter.wtype
			}
			if (parseInt(this.storeGuide.page, 10) < parseInt(
					data.pageInfo.selectPage, 10)) {
				var selectList = data[targetName].list;
				this.storeGuide.list = this.storeGuide.list.concat(selectList);
				this.storeGuide.page = data.pageInfo.selectPage
			}
		},
		reviewRender : function() {
			var data = this.model.toJSON();
			this.storeReviewList();
			data.currentPage = this.storeReview.page;
			data.reviewList.list = this.storeReview.list;
			data.cpList = this.storeReview.cpList;
			data.pageInfo = this.storeReview.pageInfo;
			data.params = this.options.params;
			data.common = this.options.common;
			this.$el.find("#subTabContent").html(
					this.getChildTemplate("#mobileDetailReviewContentTemplate",
							data));
			Shopping.views.mobileDetail.SHOP_CC.setHandler(this.el);
			if (window.gargoyle) {
				gargoyle.bind()
			}
		},
		resetStoreReivewList : function() {
			this.storeReview = {
				page : 0,
				list : [],
				prodid : this.options.common.prodid,
				cpList : [],
				pageInfo : {}
			}
		},
		storeReviewList : function() {
			var data = this.model.toJSON();
			if ((this.storeReview.prodid != this.options.common.prodid)
					|| this.currentTab != this.options.params.tab) {
				this.storeReview.prodid = this.options.common.prodid;
				this.resetStoreReivewList()
			}
			if (parseInt(data.pageInfo.selectPage, 10) > parseInt(
					this.storeReview.page, 10)) {
				this.currentTab = this.options.params.tab;
				this.storeReview.list = this.storeReview.list
						.concat(data.reviewList.list);
				this.storeReview.page = data.pageInfo.selectPage;
				this.storeReview.cpList = data.cpList;
				this.storeReview.pageInfo = data.pageInfo
			}
		},
		selTab : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			this.guidparams.wtype = target.val() || target.data("wtype");
			this.guidparams.wpage = "1";
			this.send();
			moveTop()
		},
		params : {},
		guidparams : {
			wpage : "1",
			wtype : "1",
			wcount : "3"
		},
		send : function() {
			this.guideModel.clear({
				silent : true
			});
			this.guideModel.fetch({
				data : this.guidparams,
				remake : true
			})
		}
	})
})(jQuery);
(function($) {
	window.MobileDetailSummaryTabView = Backbone.ShoppingView
			.extend({
				el : "#tabContent",
				initialize : function() {
					this.setTemplate("#mobileDetailSummaryTemplate");
					this.setChildTemplate("#detailSlidePageTemplate");
					this.models = {};
					this.modelList = [ "TopCompare", "Spec", "Review",
							"Relative" ];
					this.normalList = [ "Review", "Coupon" ];
					_.bindAll(this, "renderSlideCatePage",
							"renderSlideBrandPage", "renderSlideRankPage");
					this.storeReview = {
						page : 0,
						list : [],
						prodid : ""
					}
				},
				events : {
					"click [data-relativetab]" : "changeRelativeTab",
					"click [data-reviewpage]" : "changeReivewPage",
					"click .btn_del" : "delReview",
					"click .btn_modify" : "modifyReview",
					"click [data-prodidx]" : "goOutLink",
					"click .link_top" : moveTop
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var item = this.models.TopCompareModel.get("mallList")[prodidx];
					var isPlay = !this.options.common.cateid.indexOf("103108");
					if (item.mvalidyn == "N") {
						Backbone.history.previousFragment = Backbone.history.fragment;
						Backbone.history.navigate("outLinkLayer");
						onlyPcLayer(item.id, isPlay)
					} else {
						if (item.cpId == "11st" || item.cpId == "gmarket"
								|| item.cpId == "auction") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							priceDiffLayer(item.id, target.attr("href"),
									isPlay, item.cpId)
						} else {
							return true
						}
					}
					return false
				},
				modifyReview : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var data = {
						seqid : target.data("seqid"),
						tab : "write"
					};
					this.setNavigation(data)
				},
				delReview : function(e) {
					e.preventDefault();
					if (confirm("삭제하시겠습니까?")) {
						var target = $(e.currentTarget);
						var data = this.params;
						data.id = target.data("seqid");
						this.resetStoreReivewList();
						$.ajax({
							url : Shopping.apis.deleteUserReview,
							data : data,
							context : this,
							async : false
						}).success(function(e) {
							if (e.code == "200") {
								alert("삭제 되었습니다.");
								this.models.ReviewModel.fetch({
									data : this.params,
									remake : true
								})
							}
						})
					}
				},
				changeReivewPage : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var page = target.data("reviewpage");
					this.params.page = page;
					this.params.reviewcpp = "10";
					this.models.ReviewModel.fetch({
						data : this.params,
						remake : true
					})
				},
				changeRelativeTab : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var subtab = target.data("relativetab");
					this.$el.find("#sectionRelative").attr("class",
							"box_item box_best select_" + subtab);
					if (subtab == "rank") {
						if (this.rankdc) {
							this.rankSlide = new slide.Slide(this.$el.find(
									"#rankBest").get(0), this.rankdc, {
								container : {
									id : "mDetailRankBestSlide"
								}
							});
							this.rankSlide.on("endDrag", function(session) {
								session.targetEvent.preventDefault()
							});
							this.rankSlide.on("prev", this.renderSlideRankPage);
							this.rankSlide.on("next", this.renderSlideRankPage)
						}
						this.renderSlideRankPage();
						Shopping.views.mobileDetail.SHOP_CC.setHandler(this.$el
								.find("#rankBest"))
					} else {
						if (subtab == "brand") {
							this.brandSlide = new slide.Slide(this.$el.find(
									"#brandBest").get(0), this.branddc, {
								container : {
									id : "mDetailBrandBestSlide"
								}
							});
							this.brandSlide.on("endDrag", function(session) {
								session.targetEvent.preventDefault()
							});
							this.brandSlide.on("prev",
									this.renderSlideBrandPage);
							this.brandSlide.on("next",
									this.renderSlideBrandPage);
							this.renderSlideBrandPage();
							Shopping.views.mobileDetail.SHOP_CC
									.setHandler(this.$el.find("#brandBest"))
						}
					}
				},
				fetchs : function(param) {
					this.params = param;
					this.render();
					var modelName = "";
					var fetchModelList = this.options.common.modelYN == "Y" ? this.modelList
							: this.normalList;
					_
							.each(
									fetchModelList,
									function(item) {
										modelName = item + "Model";
										if (!this.models[modelName]) {
											this.initModel(item)
										}
										if (modelName == "SpecModel"
												&& this.options.common.isPlay) {
											this.models[item + "Model"]
													.set(this.options.topModel);
											this.renderSpec(this.models[item
													+ "Model"])
										} else {
											if (modelName == "ReviewModel") {
												param.reviewcpp = "10"
											}
											if (modelName == "CouponModel") {
												param.shopid = this.options.topModel.cpId
											}
											if (modelName == "TopCompareModel") {
												param.modelStatus = this.options.common.modelStatus
											}
											param.mobile_buy_yn = "";
											this.models[item + "Model"].fetch({
												data : param,
												remake : true
											})
										}
									}, this)
				},
				initModel : function(name) {
					var modelName = name + "Model";
					var modelClass = "MobileDetail" + name + "Model";
					this.models[modelName] = new window[modelClass];
					this.setChildTemplate("#section" + name + "Template");
					this.models[modelName].on("remake", this["render" + name]
							|| function(datamodel) {
								var localName = name;
								var data = datamodel.toJSON();
								data.common = this.options.common;
								data.topModel = this.options.topModel;
								if (data.code != "204") {
									this.$el.find("#section" + localName)
											.show();
									this.$el.find("#section" + localName).html(
											this.getChildTemplate("#section"
													+ localName + "Template",
													data))
								} else {
									this.$el.find("#section" + localName)
											.hide()
								}
								Shopping.views.mobileDetail.SHOP_CC
										.setHandler(this.$el.find("#section"
												+ localName))
							}, this)
				},
				renderTopCompare : function(dataModel) {
					var data = dataModel.toJSON();
					data.common = this.options.common;
					if (data.code != "204" && data.common.modelStatus == "Y") {
						this.$el.find("#sectionTopCompare").show();
						this.$el.find("#sectionTopCompare").html(
								this.getChildTemplate(
										"#sectionTopCompareTemplate", data));
						Shopping.views.mobileDetail.SHOP_CC.setHandler(this.$el
								.find("#sectionTopCompare"))
					} else {
						this.$el.find("#sectionTopCompare").hide()
					}
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				renderReview : function(dataModel) {
					var data = dataModel.toJSON();
					data.common = this.options.common;
					if (this.options.common.modelYN == "N") {
						this.storeReviewList();
						data.currentPage = this.storeReview.page;
						data.reviewList.list = this.storeReview.list
					}
					if (_.isEmpty(data.reviewList.list)
							&& this.options.common.modelYN == "N") {
						this.$el.find("#sectionReview").hide()
					} else {
						this.$el.find("#sectionReview").html(
								this.getChildTemplate("#sectionReviewTemplate",
										data));
						Shopping.views.mobileDetail.SHOP_CC.setHandler(this.$el
								.find("#sectionReview"))
					}
				},
				resetStoreReivewList : function() {
					this.storeReview = {
						page : 0,
						list : [],
						prodid : this.options.common.prodid
					}
				},
				storeReviewList : function() {
					var data = this.models.ReviewModel.toJSON();
					if (this.storeReview.prodid != this.options.common.prodid) {
						this.storeReview.prodid = this.options.common.prodid;
						this.resetStoreReivewList()
					}
					if (parseInt(data.pageInfo.selectPage, 10) > parseInt(
							this.storeReview.page, 10)) {
						this.storeReview.list = this.storeReview.list
								.concat(data.reviewList.list);
						this.storeReview.page = data.pageInfo.selectPage
					}
				},
				render : function() {
					this.setElement("#tabContent");
					this.$el.attr("class", "section_type1");
					this.rootUrl = "#!/detail/" + this.options.common.prodid
							+ "/";
					this.$el.html(this.getTemplate(this.options));
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				renderSpec : function(dataModel) {
					var data = dataModel.toJSON();
					data.top = this.options.topModel;
					data.common = this.options.common;
					this.$el.find("#sectionSpec")
							.html(
									this.getChildTemplate(
											"#sectionSpecTemplate", data));
					Shopping.views.mobileDetail.SHOP_CC.setHandler(this.$el
							.find("#sectionSpec"))
				},
				renderRelative : function(dataModel) {
					var data = dataModel.get("detailTopRight");
					data.common = this.options.common;
					this.$el.find("#sectionRelative").html(
							this.getChildTemplate("#sectionRelativeTemplate",
									data));
					if (!_.isEmpty(data.sameRankBestList)) {
						var rank = data.sameRankBestList.slice(0, 9);
						var rankdata = this.getDataItem(rank);
						this.rankdc = new slide.InfiniteDataSource(rankdata)
					} else {
						delete this.rankdc
					}
					if (!_.isEmpty(data.sameBrandBestList)) {
						var brand = data.sameBrandBestList.slice(0, 9);
						var branddata = this.getDataItem(brand);
						this.branddc = new slide.InfiniteDataSource(branddata)
					} else {
						delete this.branddc
					}
					if (!_.isEmpty(data.sameCateBestList)) {
						var category = data.sameCateBestList.slice(0, 9);
						var categorydata = this.getDataItem(category);
						this.categorydc = new slide.InfiniteDataSource(
								categorydata);
						this.cateogrySlide = new slide.Slide(this.$el.find(
								"#categoryBest").get(0), this.categorydc, {
							container : {
								id : "mDetailCategoryBestSlide"
							}
						});
						this.cateogrySlide.on("endDrag", function(session) {
							session.targetEvent.preventDefault()
						});
						Shopping.views.mobileDetail.SHOP_CC.setHandler(this.$el
								.find("#sectionRelative"));
						this.cateogrySlide.on("prev", this.renderSlideCatePage);
						this.cateogrySlide.on("next", this.renderSlideCatePage)
					} else {
						delete this.categorydc
					}
					this.renderSlideCatePage();
					if (M_SHOPHOW.GNB) {
						M_SHOPHOW.GNB.checkZZim()
					}
				},
				getDataItem : function(list) {
					var data = [];
					var itemTemplate = _
							.template('<ul class="list_img _GL"><% _.each(itemlist, function(item, index){ %><%	var DETAILURL=\'\', target=\'\';	if (\'ABCDE\'.indexOf(item.id.substr(0,1)) > -1) {		DETAILURL = __.getMoibleDetailUrl(item.id);	} else {		DETAILURL = item.link;		target = \'target="_blank"\';	}%><li class="_GI" data-gg="{d:,s:,c:,p:<%= item.id || item.prodid %>,o1:<%=(currentPage*size)+index+1%>,o2:<%=index+1%>}">	<a href="<%= DETAILURL %>" <%= target %> class="link_cont" data-cc="a=<%= isPlay ? "A_nsh_mobile_play_model_tab_etcprod" : "A_nsh_mobile_model_tab_etcprod" %>">		<img src="<%= __.getProductImageUrl(item.image, 140, item.imgupdtime, item.id || item.prodid) %>" onerror="this.src=\''
									+ __.getErrorImage(120)
									+ '\'" class="thumb_img _GC" width="86" height="86" alt="<%- item.name %>">		<span class="cont_info">			<span class="tit_subject"><%= __.cutString(item.name, 20) %> </span>			<strong class="txt_desc"><%= __.toNumberExp(item.price) %><span class="txt_won">원</span></strong>		</span>		<span class="frame_g"></span>	</a></li><% }); %></ul>');
					var chunkList = __.chunk(list, 3, true);
					var chunkSize = chunkList.length;
					var isPlay = this.options.common.isPlay;
					_.each(chunkList, function(chunk, chunkindex) {
						data.push({
							itemlist : chunk,
							currentPage : chunkindex,
							template : itemTemplate,
							size : chunkSize,
							isPlay : isPlay,
							toHTML : function() {
								return this.template(this)
							}
						})
					});
					return data
				},
				renderSlideCatePage : function() {
					if (this.categorydc) {
						this.categorydc.queryCurrent(_.bind(function(data) {
							this.$el.find("#categoryPaging").html(
									this.getChildTemplate(
											"#detailSlidePageTemplate", data))
						}, this))
					} else {
						this.$el
								.find("#categoryBest")
								.html(
										'<p class="empty_content" style="margin-top:75px;height:84px;text-align:center;vertical-align:middle;">총 0건의 관련상품이 있습니다.</p>')
					}
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				renderSlideBrandPage : function() {
					if (this.branddc) {
						this.branddc.queryCurrent(_.bind(function(data) {
							this.$el.find("#brandPaging").html(
									this.getChildTemplate(
											"#detailSlidePageTemplate", data))
						}, this))
					} else {
						this.$el
								.find("#brandBest")
								.html(
										'<p class="empty_content" style="margin-top:75px;height:84px;text-align:center;vertical-align:middle;">총 0건의 관련상품이 있습니다.</p>')
					}
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				renderSlideRankPage : function() {
					if (this.rankdc) {
						this.rankdc.queryCurrent(_.bind(function(data) {
							this.$el.find("#rankPaging").html(
									this.getChildTemplate(
											"#detailSlidePageTemplate", data))
						}, this))
					} else {
						this.$el
								.find("#rankBest")
								.html(
										'<p class="empty_content" style="margin-top:75px;height:84px;text-align:center;vertical-align:middle;">총 0건의 관련상품이 있습니다.</p>')
					}
					if (window.gargoyle) {
						gargoyle.bind()
					}
				}
			})
})(jQuery);
(function($) {
	window.MobileDetailTopSummaryView = Backbone.ShoppingView.extend({
		el : "#detailTopSummary",
		initialize : function() {
			this.model = new MobileDetailTopModel();
			this.model.on("remake", this.render, this);
			this.setTemplate("#mobileDetailTopSummaryTemplate")
		},
		events : {},
		render : function() {
			this.setElement("#detailTopSummary");
			var data = this.model.toJSON();
			data.common = this.options.common;
			data.params = this.options.params;
			this.$el.html(this.getTemplate(data))
		}
	})
})(jQuery);
(function($) {
	window.MobileDetailTopView = Backbone.ShoppingView
			.extend({
				el : "#detailTop",
				initialize : function() {
					this.model = new MobileDetailTopModel();
					this.model.on("remake", this.render, this);
					this.setTemplate("#mobileDetailTopTemplate");
					this.setChildTemplate("#detailSlidePageTemplate");
					_.bindAll(this, "renderSlidePage")
				},
				events : {
					"click .btn_mark" : "addZzim",
				},
				addZzim : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					addMobileZzim(this.options.common.prodid);
					target.blur()
				},
				render : function() {
					this.setElement("#detailTop");
					var data = this.model.get("detailTop");
					data.common = this.options.common;
					data.params = this.options.params;
					if (data.common.modelYN == "N") {
						this.$el.addClass("pc_detail")
					} else {
						this.$el.removeClass("pc_detail")
					}
					this.$el.html(this.getTemplate(data));
					this.renderTabView();
					var imageList = [];
					_.each(data.imageList, function(item) {
						imageList.push(__.getProductImageUrl(item.image, 270,
								item.imgupdtime, data.id))
					});
					var snsShare = {
						narrowEl : this.$el.find("#narrowSocialShareContainer")
								.get(0),
						context : {
							link : "http://shopping.daum.net/mini/productdetail.daum?prodid="
									+ data.common.prodid,
							isNarrow : true,
							service_name : "다음쇼핑하우",
							prefix : data.common.fullName,
							linkMap : {},
							url_info : {
								title : data.common.fullName,
								imageurl : imageList
							},
							kakaoAPI : {
								appkey : "8c3302c54a3e0d27738e842440ee9930"
							}
						}
					};
					new socialshare.Main(snsShare.narrowEl, snsShare.context);
					this.renderSlideView();
					Shopping.views.mobileDetail.SHOP_CC.setHandler(this.el);
					if (M_SHOPHOW.GNB) {
						M_SHOPHOW.GNB.checkZZim()
					}
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				renderTabView : function() {
					setViewInstance(this.childView, MobileDetailSummaryTabView,
							{
								name : "mobileDetailSummaryTab",
								common : this.options.common,
								params : _.clone(this.options.params),
								topModel : this.model.get("detailTop")
							});
					var fetchParams = _.clone(this.options.params);
					_.extend(fetchParams, this.options.common);
					_.extend(fetchParams, Shopping.preventParams);
					this.childView.mobileDetailSummaryTab.fetchs(fetchParams)
				},
				renderSlideView : function() {
					var imageList = this.model.get("detailTop").imageList || [];
					var template = _
							.template('<li><span class="link_product" onfocus="this.blur();"><img src="<%= __.getProductImageUrl(image, 270, imgupdtime, id) %>" onerror="this.src=\''
									+ __.getErrorImage(500)
									+ '\'" width="306" height="309" alt="상품이미지"></span></li>');
					var datalist = [];
					var id = this.options.common.prodid;
					_.each(imageList, function(image, index) {
						datalist.push({
							id : id,
							currentPage : index,
							image : image,
							size : _.size(imageList),
							template : template,
							toHTML : function() {
								var data = this.image;
								data.id = this.id;
								return this.template(data)
							}
						})
					});
					if (_.size(imageList) > 1) {
						this.ds = new slide.InfiniteDataSource(datalist);
						var sl = new slide.Slide(this.$el.find("#slideList")
								.get(0), this.ds, {
							container : {
								id : "mDetailImageSlide"
							}
						});
						sl.on("prev", this.renderSlidePage);
						sl.on("next", this.renderSlidePage);
						var prev = this.$el.find(".link_pre");
						var next = this.$el.find(".link_next");
						prev.off("click");
						next.off("click");
						prev.on("click", function(e) {
							e.preventDefault();
							sl.prev()
						});
						next.on("click", function(e) {
							e.preventDefault();
							sl.next()
						});
						this.renderSlidePage()
					} else {
						_.each(datalist, function(item) {
							var data = item.image;
							data.id = item.id;
							this.$el.find("#slideList").html(template(data))
						}, this);
						this.$el.find(".link_pre").hide();
						this.$el.find(".link_next").hide();
						this.$el.find("#slidPage").hide()
					}
				},
				renderSlidePage : function() {
					this.ds.queryCurrent(_.bind(function(data) {
						this.$el.find("#slidPage").html(
								this.getChildTemplate(
										"#detailSlidePageTemplate", data))
					}, this))
				}
			})
})(jQuery);
(function($) {
	window.MobileDetailWriteView = Backbone.ShoppingView
			.extend({
				el : "#tabContent",
				initialize : function() {
					this.model = new MobileDetailWriteModel();
					this.model.on("remake", this.render, this);
					this.reviewContent = new MobileDetailReviewContentModel();
					this.reviewContent.on("remake", this.changeContent, this);
					this.setTemplate("#mobileDetailReveiwWriteTemplate")
				},
				events : {
					"click .star_rate" : "touchRating",
					"touchmove .star_rate" : "touchRating",
					"mousemove .star_rate" : "touchRating",
					"submit #reviewForm" : "formSubmit",
					"click #btnCancel" : "moveBack"
				},
				changeContent : function(model) {
					var data = model.get("reviewContent");
					this.$el.find("#writeMod").val("U");
					this.$el.find("#reviewSeq").val(data.id);
					this.$el.find("#reviewRate").val(data.rate);
					this.$el.find(".inner_star").css("width",
							data.rate * 20 + "%");
					this.$el.find(".tf_cmt").val(__.unescape(data.contents))
				},
				moveBack : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					this.rootUrl = "#!/detail/" + this.options.common.prodid
							+ "/tab:review";
					this.setNavigation()
				},
				render : function() {
					if (!_.isEmpty(this.model.get("daumUser"))) {
						this.setElement("#tabContent");
						this.$el.attr("class", "section_type3");
						var data = this.model.toJSON();
						data.common = this.options.common;
						data.params = this.options.params;
						this.$el.html(this.getTemplate(data));
						var params = {};
						_.extend(params, this.options.params);
						_.extend(params, this.options.common);
						if (!_.isEmpty(params.seqid)) {
							this.reviewContent.fetch({
								data : params,
								remake : true
							})
						}
					} else {
						var url = "https://logins.daum.net/accounts/loginform.do?mobilefull=1&url=";
						url += encodeURIComponent(document.location.href);
						document.location.replace(url)
					}
				},
				checkLogin : function(e) {
					var isLogin = false;
					$
							.ajax({
								url : Shopping.apis.reviewCheckLogin,
								context : this,
								async : false
							})
							.success(
									function(r) {
										if (r.isLogin !== "Y") {
											if (confirm("로그인이 필요합니다. 로그인 하시겠습니까?")) {
												document.location.href = "https://logins.daum.net/accounts/loginform.do?category=searchshop&url="
														+ encodeURIComponent(document.location.href)
											}
											$(e.currentTarget).blur();
											isLogin = false
										} else {
											isLogin = true
										}
									});
					return isLogin
				},
				formSubmit : function(e) {
					e.preventDefault();
					var target = this.$el.find("#reviewForm");
					var rating = target.find("reviewRate").val();
					if (this.checkLogin(e)) {
						if (_.isEmpty($.trim(target.find("[name=content]")
								.val()))) {
							alert("내용을 입력해주세요.");
							this.$el.find("[name=content]").focus();
							return false
						}
						if (parseInt(rating) <= 0) {
							alert("별점을 선택해주세요.");
							return false
						}
						target.find("#reviewTitle").val(
								__.cutString(this.$el.find("[name=content]")
										.val(), 30, "..."));
						$
								.ajax({
									url : Shopping.apis.writeUserReview,
									data : target.serializeArray(),
									type : "post",
									context : this
								})
								.success(
										function(r) {
											if (r.code == "200") {
												var mode = this.$el.find(
														"#writeMod").val();
												if (mode == "U") {
													alert("수정 되었습니다.")
												} else {
													alert("등록 되었습니다.")
												}
												if (Shopping.views.mobileDetail.childView.mobileDetailReview) {
													Shopping.views.mobileDetail.childView.mobileDetailReview
															.resetStoreReivewList()
												}
												Backbone.history
														.navigate(
																"!/detail/"
																		+ this.options.common.prodid
																		+ "/tab:review",
																{
																	trigger : true
																})
											} else {
												alert("에러가 발생하였습니다.")
											}
										})
					}
				},
				touchRating : function(e) {
					e.preventDefault();
					var pageX = e.type == "touchmove" ? e.originalEvent.touches[0].pageX
							: e.pageX;
					var $rate = this.$el.find(".star_rate");
					var coords = $rate.offset();
					var position = pageX - coords.left + 10;
					var starCount = 5;
					var width = $rate.width();
					var star = Math.round(position / (width / starCount));
					var starValue = star >= starCount ? starCount : star;
					starValue = starValue <= 0 ? 0 : starValue;
					this.$el.find(".inner_star").css("width",
							starValue * 20 + "%");
					this.$el.find("#reviewRate").val(starValue)
				}
			})
})(jQuery);
(function($) {
	window.MobileEventMainView = Backbone.ShoppingView
			.extend({
				tagName : "div",
				initialize : function() {
					this.model = new (Backbone.ShoppingModel
							.extend({
								defaults : {
									today : 1,
									soho : 2,
									match : 0
								},
								tiara : {
									url : "http://m.shopping.daum.net/mini/planningshow/main.daum",
									title : "Daum 쇼핑하우"
								},
								url : Shopping.apis.mEventOrder
							}));
					this.model.on("reset change", this.render, this);
					this.setTemplate("#mobileEventMainTemplate");
					this.orderMap = {
						today : {
							className : "box_recomm"
						},
						soho : {
							className : ""
						},
						match : {
							className : "wrap_match"
						}
					}
				},
				setViewEvent : function() {
					if (this.childView.mEventToday) {
						this.childView.mEventToday
								.setElement(this.childView.mEventToday.$el)
					}
					if (this.childView.mEventSoho) {
						this.childView.mEventSoho
								.setElement(this.childView.mEventSoho.$el)
					}
					if (this.childView.mEventMatch) {
						this.childView.mEventMatch
								.setElement(this.childView.mEventMatch.$el)
					}
					if (this.childView.mEventCate) {
						this.childView.mEventCate
								.setElement(this.childView.mEventCate.$el)
					}
				},
				render : function() {
					var data = this.model.toJSON();
					data.orderMap = this.orderMap;
					this.$el.html(this.getTemplate(data));
					this.cateRender();
					this.todayPickRender();
					this.popSohoRender();
					this.matchRender();
					return this.$el
				},
				todayPickRender : function() {
					var instance = setViewInstance(this.childView,
							window.MobileEventTodayView, {
								name : "mEventToday",
								rendertrigger : true
							});
					if (instance) {
						this.childView.mEventToday.model.fetch()
					} else {
						this.childView.mEventToday.render()
					}
				},
				popSohoRender : function() {
					var instance = setViewInstance(this.childView,
							window.MobileEventSohoView, {
								name : "mEventSoho",
								rendertrigger : true
							});
					if (instance) {
						this.childView.mEventSoho.model.fetch()
					} else {
						this.childView.mEventSoho.render()
					}
				},
				matchRender : function() {
					var instance = setViewInstance(this.childView,
							window.MobileEventMatchView, {
								name : "mEventMatch",
								rendertrigger : true
							});
					if (instance) {
						this.childView.mEventMatch.model.fetch()
					} else {
						this.childView.mEventMatch.render()
					}
				},
				cateRender : function() {
					var instance = setViewInstance(this.childView,
							window.MobilePlanningShowCateView, {
								name : "mEventCate",
								rendertrigger : true,
								ccaPrefix : "A_mobile_event_top_navi",
								params : {}
							});
					this.childView.mEventCate.off("render:after");
					this.childView.mEventCate
							.on(
									"render:after",
									function(view) {
										view.$el
												.prepend('<h4 class="tit_plan">카테고리별 기획전</h4>');
										this.trigger("render:after", this)
									}, this);
					this.childView.mEventCate.model.fetch();
					var el = this.childView.mEventCate.$el;
					this.$el.append(el)
				}
			})
})(jQuery);
(function($) {
	window.MobileEventMatchView = Backbone.ShoppingView.extend({
		el : "#matchEvent",
		initialize : function() {
			this.model = new MobileEventMatchModel();
			this.model.on("reset change", this.render, this);
			this.setTemplate("#mobileEventMatchTemplate")
		},
		events : {},
		render : function() {
			this.setElement("#matchEvent");
			var data = this.model.toJSON();
			data.matchEventTitle = {
				text0 : this.model.get("text_5"),
				text1 : this.model.get("text_6")
			};
			this.$el.html(this.getTemplate(data))
		}
	})
})(jQuery);
(function($) {
	window.MobileEventSohoView = Backbone.ShoppingView.extend({
		el : "#sohoEvent",
		initialize : function() {
			this.model = new MobileEventSohoModel();
			this.model.on("reset change", this.render, this);
			this.setTemplate("#mobileEventSohoTemplate")
		},
		events : {},
		render : function() {
			this.setElement("#sohoEvent");
			this.$el.html(this.getTemplate(this.model.toJSON()))
		}
	})
})(jQuery);
(function($) {
	window.MobileEventTodayView = Backbone.ShoppingView.extend({
		el : "#todayEvent",
		initialize : function() {
			this.model = new MobileEventTodayModel();
			this.model.on("reset change", this.render, this);
			this.setTemplate("#mobileEventTodayTemplate");
			this.page = 1
		},
		events : {
			"click .btn_prev" : "prevPage",
			"click .btn_next" : "nextPage"
		},
		render : function() {
			this.setElement("#todayEvent");
			var data = this.model.toJSON();
			data.todayList = this.getPageList(this.page);
			data.page = this.page;
			data.endPage = this.endPage = Math.ceil(_.size(this.model
					.get("todayList")) / 2);
			this.$el.html(this.getTemplate(data))
		},
		getPageList : function(page) {
			var list = this.model.get("todayList");
			var startPage = (page - 1) * 2;
			var endPage = startPage + 2;
			return list.slice(startPage, endPage)
		},
		prevPage : function(e) {
			e.preventDefault();
			var tempPage = this.page - 1;
			if (tempPage <= 0) {
				this.page = this.endPage
			} else {
				this.page = tempPage
			}
			this.render()
		},
		nextPage : function(e) {
			e.preventDefault();
			var tempPage = this.page + 1;
			if (tempPage > this.endPage) {
				this.page = 1
			} else {
				this.page = tempPage
			}
			this.render()
		}
	})
})(jQuery);
(function($) {
	window.MobileForuView = Backbone.ShoppingView
			.extend({
				tagName : "div",
				initialize : function() {
					this.model = new MobileForuEventModel();
					this.model.on("reset change", this.render, this);
					this.on("fetch:foruModel", this.modelFetch);
					this.setTemplate("#mobileForuTemplate")
				},
				prodidList : [],
				events : {
					"click [data-page]" : "changePage",
					"click [data-prodidx]" : "goOutLink"
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var item = this.getProductList()[prodidx];
					if (item.prodtype == "1") {
						return true
					} else {
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, false)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), false, item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				productPage : 1,
				productTatalPage : 1,
				planningShowPage : 1,
				planningShowTotalPage : 1,
				render : function() {
					try {
						this.$el.html(this.getTemplate({
							productList : this.getProductList(),
							planningshowList : this.getPlanningShowList(),
							planningTodayList : this.model
									.get("planningTodayList"),
							planningMatch : this.model.get("planningMatch"),
							productPage : this.productPage,
							productTotalPage : this.productTotalPage,
							planningShowPage : this.planningShowPage,
							planningShowTotalPage : this.planningShowTotalPage
						}));
						return this
					} catch (e) {
						this.error(e)
					}
				},
				modelFetch : function() {
					if (checkGNBInfo.hasMLatestListModel()) {
						this.prodidList = _.first(_.pluck(checkGNBInfo
								.getMLatestList(), "prodid"), 15);
						if (_.size(this.prodidList) > 0) {
							this.model.clear({
								silent : true
							});
							this.model.fetch({
								data : {
									prodid : this.prodidList.join(",")
								},
								sendtiara : false
							})
						}
					}
				},
				getProductList : function() {
					this.productTotalPage = Math
							.ceil(_.size(Shopping.views.mForu.model
									.get("productList")) / 20);
					var productList = _.first(Shopping.views.mForu.model
							.get("productList"), 20 * this.productPage)
							|| [];
					return productList
				},
				getPlanningShowList : function() {
					this.planningShowTotalPage = Math.ceil(_
							.size(Shopping.views.mForu.model
									.get("planningshowList")) / 30);
					var planningshowList = _.first(Shopping.views.mForu.model
							.get("planningshowList"),
							30 * this.planningShowPage)
							|| [];
					return planningshowList
				},
				changePage : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var page = target.data("page");
					var type = target.data("pagetype");
					if (type == "p") {
						this.productPage = (this.productTotalPage < this.productPage) ? this.productTotalPage
								: this.productPage + 1
					} else {
						this.planningShowPage = (this.planningShowTotalPage < this.planningShowPage) ? this.planningShowTotalPage
								: this.planningShowPage + 1
					}
					this.options.params.ppage = this.productPage;
					this.options.params.pspage = this.planningShowPage;
					this.hashChange();
					this.render()
				},
				hashChange : function() {
					Shopping.views.mMain.hashChange(this.options.params, "")
				}
			})
})(jQuery);
(function($) {
	window.MobileMyLatestView = MobileMyPageView
			.extend({
				tabName : "div",
				initialize : function() {
					this.model = new MobileMyLatestModel();
					this.model.on("reset change", this.storeList, this);
					this.storeModel = new Backbone.Model();
					this.storeModel.on("reset change", this.render, this);
					this.setTemplate("#mobileMyPageTemplate")
				},
				getTitle : function() {
					return {
						bigTitle : "최근 본 상품이 없습니다.",
						smallTitle : "상품 상세 정보를 확인하시면 <br/>최근본상품 메뉴에 자동으로 저장됩니다."
					}
				},
				getLoginTitle : function() {
					return {
						bigTitle : "로그인이 필요한 메뉴입니다.",
						smallTitle : '<a href="https://logins.daum.net/accounts/loginform.do?mobilefull=1&url='
								+ encodeURIComponent("http://" + location.host
										+ "/mini/#!/my/mylatest/page:1")
								+ '" class="btn_login">로그인 하기</a>'
					}
				},
				viewType : "lastest",
				viewName : "최근 본 상품",
				submitURL : "/v1.0/deleterecent.json"
			})
})(jQuery);
(function($) {
	window.MobileMyPageView = Backbone.ShoppingView
			.extend({
				tabName : "div",
				initialize : function() {
				},
				events : {
					"click .desc_all" : "allChecked",
					"click .btn_delete" : "deleteProduct",
					"change .select_sort" : "selectSort",
					"click [data-page]" : "moreMyPage",
					"click .btn_move_zzim" : "moveZZimPage",
					"click [data-prodidx]" : "goOutLink",
					"click .no_link a" : function(e) {
						e.preventDefault();
						alert("품절 및 단종된 상품입니다. 해당 상품이 존재하지 않습니다.")
					}
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var item = this.model.get("list")[prodidx];
					if (item.prodtype == "1") {
						return true
					} else {
						var isPlay = false;
						if (item.cateid) {
							isPlay = !item.cateid.indexOf("103108")
						}
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, isPlay)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), isPlay,
										item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				viewName : "",
				viewType : "",
				typeMap : {},
				submitURL : "",
				getTitle : function() {
					return {
						bigTitle : "",
						smallTitle : ""
					}
				},
				getLoginTitle : function() {
					return {
						bigTitle : "로그인이 필요한 메뉴입니다.",
						smallTitle : "<a href='https://logins.daum.net/accounts/loginform.do?mobilefull=1&url="
								+ encodeURIComponent(location.href)
								+ "' class='btn_login'>로그인 하기</a>"
					}
				},
				render : function() {
					try {
						$(window).scrollTop(0);
						this.$el.off();
						this.setElement(this.$el);
						this.$el
								.html(this
										.getTemplate({
											viewName : this.viewName,
											viewType : this.viewType,
											typeMap : this.typeMap,
											list : this.getProdList(),
											pageInfo : this.storeModel
													.get("pageInfo"),
											totalCnt : this.storeModel
													.get("totalCnt"),
											type : this.options.params.type
													|| "product",
											txtTitle : (this.storeModel
													.get("loginYN") == "Y") ? this
													.getTitle()
													: this.getLoginTitle(),
											submitURL : this.submitURL
										}))
					} catch (e) {
						this.error(e)
					}
				},
				getProdList : function() {
					return this.storeModel.get("list") || []
				},
				allChecked : function(e) {
					this.$el.find("input[type=checkbox]").prop(
							"checked",
							$(e.currentTarget).find("input[type=checkbox]")
									.prop("checked"))
				},
				deleteProduct : function(e) {
					e.preventDefault();
					var lkj = this;
					if (this.$el.find("[name=prodid]").serialize() != ""
							|| this.$el.find("[name=seq]").serialize() != "") {
						$.ajax({
							url : this.submitURL,
							data : this.$el.find("form").serialize()
						}).done(function() {
							lkj.storeModel.clear({
								silent : true
							});
							lkj.modelFetch()
						}).fail(function() {
							alert("삭제를 실패했습니다.")
						})
					} else {
						alert("삭제할 상품을 선택해 주십시요.");
						return false
					}
				},
				modelFetch : function() {
					this.model.clear({
						silent : true
					});
					this.model.fetch({
						data : this.options.params
					})
				},
				moreMyPage : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var page = target.data("page");
					this.options.params.page = page;
					this.hashChange();
					this.modelFetch()
				},
				storeList : function() {
					var storePageInfo = this.storeModel.get("pageInfo") || {
						page : 1
					};
					var pageInfo = this.model.get("pageInfo") || {
						page : 1
					};
					if (this.model.hasChanged("type")
							|| storePageInfo.page >= pageInfo.page) {
						this.storeModel.clear({
							silent : true
						})
					}
					if (this.model.get("loginYN") == "Y") {
						var data = this.model.toJSON();
						var storeData = this.getProdList() || [];
						data.list = (data.list) ? storeData.concat(data.list)
								: [];
						this.storeModel.set(data)
					} else {
						this.storeModel.clear({
							silent : true
						});
						this.storeModel.set({
							loginYN : "N"
						})
					}
				},
				selectSort : function(e) {
					var type = $(e.currentTarget).val();
					this.options.params.page = 1;
					this.options.params.type = type;
					this.storeModel.clear({
						silent : true
					});
					this.hashChange();
					this.modelFetch()
				},
				moveZZimPage : function(e) {
					e.preventDefault();
					this.storeModel.clear({
						silent : true
					});
					this.model.clear({
						silent : true
					});
					Shopping.routes.mMy.navigate($(e.currentTarget)
							.attr("href").replace("/mini/#", ""), {
						trigger : true
					})
				},
				hashChange : function() {
					Shopping.views.mMy.hashChange(this.options.params, "/my")
				}
			})
})(jQuery);
(function($) {
	window.MobileMySlideView = MobileSlideView.extend({
		initialize : function() {
			_.bindAll(this, "render", "changeTabNavi", "zzimRender",
					"latestRender", "mysohoRender");
			this.slideID = "mMySlide"
		},
		prefix : "/my",
		viewMap : {
			zzim : {
				index : 0,
				viewName : "mMyZzim",
				tabName : "찜상품",
				cc_a : "",
				gg_s2 : "my",
				gg_pn : "zzim"
			},
			latest : {
				index : 1,
				viewName : "mMyLatest",
				tabName : "최근 본 상품",
				cc_a : "",
				gg_s2 : "my",
				gg_pn : "latestproduct"
			},
			mysoho : {
				index : 2,
				viewName : "mMySoho",
				tabName : "마이 소호",
				cc_a : "",
				gg_s2 : "my",
				gg_pn : "mysoho"
			}
		},
		tabClassName : "list_tabmenu",
		tabAClassName : "link_tabmenu",
		zzimRender : function() {
			var params = _.clone(this.zzimParam);
			params = this.initOption(params, this.options.paramStr,
					this.zzimParam);
			var instance = setViewInstance(Shopping.views,
					window.MobileMyZzimView, {
						name : "mMyZzim",
						params : params,
						rendertrigger : true
					});
			Shopping.views.mMyZzim.off("render:after");
			Shopping.views.mMyZzim.on("render:after", this.setCurrentHeight,
					this);
			Shopping.views.mMyZzim.model.clear({
				silent : true
			});
			Shopping.views.mMyZzim.model.fetch({
				data : params,
				sendtiara : false
			});
			return Shopping.views.mMyZzim.el
		},
		zzimParam : {
			page : 1,
			type : "product"
		},
		latestRender : function() {
			var params = _.clone(this.latestParam);
			params = this.initOption(params, this.options.paramStr,
					this.latestParam);
			params.pagetype = "my";
			var instance = setViewInstance(Shopping.views,
					window.MobileMyLatestView, {
						name : "mMyLatest",
						params : params,
						rendertrigger : true
					});
			Shopping.views.mMyLatest.off("render:after");
			Shopping.views.mMyLatest.on("render:after", this.setCurrentHeight,
					this);
			Shopping.views.mMyLatest.model.clear({
				silent : true
			});
			Shopping.views.mMyLatest.model.fetch({
				data : params,
				sendtiara : false
			});
			return Shopping.views.mMyLatest.el
		},
		latestParam : {
			page : 1
		},
		mysohoRender : function() {
			var params = _.clone(this.mySohoParam);
			params = this.initOption(params, this.options.paramStr,
					this.mySohoParam);
			var instance = setViewInstance(Shopping.views,
					window.MobileMySohoView, {
						name : "mMySoho",
						params : params,
						rendertrigger : true
					});
			if (instance) {
				Shopping.views.mMySoho.off("render:after");
				Shopping.views.mMySoho.on("render:after",
						this.setCurrentHeight, this);
				Shopping.views.mMySoho.model.fetch({
					data : params,
					sendtiara : false
				})
			} else {
				Shopping.views.mMySoho.setElement(Shopping.views.mMySoho.$el);
				this.setCurrentHeight()
			}
			return Shopping.views.mMySoho.el
		},
		mySohoParam : {
			page : 1
		}
	})
})(jQuery);
(function($) {
	window.MobileMySohoView = MobileMyPageView
			.extend({
				tabName : "div",
				initialize : function() {
					this.model = new MobileMySohoModel();
					this.model.on("reset change", this.storeList, this);
					this.storeModel = new Backbone.Model();
					this.storeModel.on("reset change", this.render, this);
					this.setTemplate("#mobileMySohoTemplate")
				},
				getTitle : function() {
					return {
						bigTitle : "즐겨찾는 소호몰이 없습니다.",
						smallTitle : "우측 사이드메뉴>패션소호>베스트소호를 클릭해서 <br/>관심있는 소호몰을 즐겨찾기해보세요~!"
					}
				},
				getLoginTitle : function() {
					return {
						bigTitle : "로그인이 필요한 메뉴입니다.",
						smallTitle : "<a href='https://logins.daum.net/accounts/loginform.do?mobilefull=1&url="
								+ encodeURIComponent("http://" + location.host
										+ "/mini/#!/my/mysoho/page:1")
								+ "' class='btn_login'>로그인 하기</a>"
					}
				},
				viewType : "soho",
				viewName : "마이 소호",
				submitURL : "/v1.0/deletesohoroom.json"
			})
})(jQuery);
(function($) {
	window.MobileMyZzimView = MobileMyPageView
			.extend({
				initialize : function() {
					this.model = new MobileMyZzimModel();
					this.model.on("reset change", this.storeList, this);
					this.storeModel = new Backbone.Model();
					this.storeModel.on("reset change", this.render, this);
					this.setTemplate("#mobileMyPageTemplate")
				},
				viewType : "product",
				viewName : "찜상품",
				getTitle : function() {
					var txtTitle = {
						bigTitle : "찜한 상품이 없습니다.",
						smallTitle : "관심 있는 상품을 고민말고 찜!<br/>간편하게 MY쇼핑 리스트에 담아보세요."
					};
					return txtTitle
				},
				getLoginTitle : function() {
					return {
						bigTitle : "로그인이 필요한 메뉴입니다.",
						smallTitle : "<a href='https://logins.daum.net/accounts/loginform.do?mobilefull=1&url="
								+ encodeURIComponent("http://"
										+ location.host
										+ "/mini/#!/my/zzim/page:1&type:product")
								+ "' class='btn_login'>로그인 하기</a>"
					}
				},
				submitURL : "/v1.0/deletezzim.json"
			})
})(jQuery);
(function($) {
	window.MobilePlanningShowCateView = Backbone.ShoppingView.extend({
		tagName : "div",
		className : "cate_plan",
		initialize : function() {
			this.model = new MobilePlanningShowCateModel();
			this.model.on("reset change", this.setStoreModel, this);
			this.storeModel = new Backbone.Model();
			this.storeModel.on("reset change", this.render, this);
			this.setTemplate("#mobilePlanningShowCategoryTemplate")
		},
		events : {
			"click .paging_shopping .btn_prev" : "movePrev",
			"click .paging_shopping .btn_next" : "moveNext",
			"click [data-cateid]" : "moveOtherCate"
		},
		page : 1,
		render : function() {
			this.$el.off();
			this.setElement(this.$el);
			if (this.storeModel.has("cateList")) {
				var data = this.storeModel.toJSON();
				data.ccaPrefix = this.options.ccaPrefix;
				this.$el.html(this.getTemplate(data))
			}
			return this.$el
		},
		setStoreModel : function() {
			this.initStoreModel();
			var cateid = this.model.get("cateid");
			this.storeModel.set({
				page : this.page,
				cateid : cateid
			})
		},
		initStoreModel : function() {
			var cateList = [];
			var itemMap = {};
			var cateToListMap = this.storeModel.get("cateToListMap") || {};
			var cateToList = [];
			var totalPage = 0;
			_.each(this.model.get("cateList"), function(item, index) {
				if (item.key != "000") {
					itemMap = {};
					itemMap.name = this.getCateName(item.name);
					itemMap.key = item.key;
					cateToList = this.setPagingList(this.model
							.get("cateToListMap")[item.key].list
							|| []);
					if (!cateToListMap[item.key]) {
						cateToListMap[item.key] = {
							list : cateToList,
							startpage : totalPage,
							endpage : totalPage + _.size(cateToList)
						};
						totalPage += _.size(cateToList)
					} else {
						cateToListMap[item.key].list = cateToList;
						totalPage += _.size(cateToList)
					}
					cateList.push(itemMap)
				}
			}.bind(this));
			this.storeModel.set({
				cateToListMap : cateToListMap,
				cateList : cateList,
				totalPage : totalPage
			}, {
				silent : true
			})
		},
		getCateName : function(catename) {
			var returnCateName = "";
			catename = catename.split("/");
			_.each(catename, function(item, i) {
				returnCateName = returnCateName
						+ (i == 0 ? "" : (i == _.size(catename) - 1) ? "<br>"
								: "&middot;") + item
			});
			return returnCateName
		},
		setPagingList : function(list) {
			var omitList = this.getOmitList(list);
			var chunklist = __.chunk(omitList, 8, true);
			var range = _.range(1, _.size(chunklist) + 1);
			return _.object(range, chunklist)
		},
		getOmitList : function(list) {
			var areaid = this.options.params.areaid;
			var omitList = _.find(list, function(item) {
				return item.areaid == areaid
			});
			var resultList = _.without(list, omitList);
			return resultList
		},
		movePrev : function(e) {
			e.preventDefault();
			var keys = [];
			_.each(this.storeModel.get("cateList"), function(item, i) {
				keys.push(item.key)
			});
			var cateToListMap = this.storeModel.get("cateToListMap");
			var cateid = this.storeModel.get("cateid") + "";
			if (this.page - 1 <= 0) {
				var selectedIndex = _.indexOf(keys, cateid);
				selectedIndex = (selectedIndex - 1 < 0) ? _.size(keys) - 1
						: selectedIndex - 1;
				cateid = keys[selectedIndex];
				this.page = _.size(cateToListMap[cateid].list)
			} else {
				this.page = this.page - 1
			}
			this.storeModel.set({
				page : this.page,
				cateid : cateid
			})
		},
		moveNext : function(e) {
			e.preventDefault();
			var keys = [];
			_.each(this.storeModel.get("cateList"), function(item, i) {
				keys.push(item.key)
			});
			var cateToListMap = this.storeModel.get("cateToListMap");
			var cateid = this.storeModel.get("cateid") + "";
			if (this.page + 1 > _.size(cateToListMap[cateid].list)) {
				var selectedIndex = _.indexOf(keys, cateid);
				selectedIndex = (selectedIndex + 1 >= _.size(keys)) ? 0
						: selectedIndex + 1;
				cateid = keys[selectedIndex];
				this.page = 1
			} else {
				this.page = this.page + 1
			}
			this.storeModel.set({
				page : this.page,
				cateid : cateid
			})
		},
		moveOtherCate : function(e) {
			e.preventDefault();
			var cateid = $(e.currentTarget).data("cateid");
			this.page = 1;
			this.storeModel.set({
				page : this.page,
				cateid : cateid
			})
		}
	})
})(jQuery);
(function($) {
	window.PlanningShowAllView = Backbone.ShoppingView.extend({
		tagName : "div",
		initialize : function() {
			this.model = new PlanningShowAllModel();
			this.model.on("reset change", this.storeList, this);
			this.storeModel = new Backbone.Model();
			this.storeModel.on("reset change", this.render, this);
			this.setTemplate("#mobileMainEventTemplate")
		},
		events : {
			"click [data-page]" : "changePage",
			"click [data-tab]" : "changeTab",
			"click .link_titcate" : "toggleSortLayer"
		},
		render : function() {
			try {
				var dfd = $.Deferred();
				dfd.done(function(self) {
					$(self.el).html(self.getTemplate(self.storeModel.toJSON()))
				}).resolve(this);
				return this
			} catch (e) {
				this.error(e)
			}
		},
		toggleSortLayer : function(e) {
			e.preventDefault();
			this.$el.find(".info_sort").toggleClass("open_sort")
		},
		changePage : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var page = target.data("page");
			this.options.params.page = page;
			this.hashChange();
			this.model.fetch({
				data : this.options.params
			})
		},
		changeTab : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var tab = target.data("tab");
			this.options.params.page = 1;
			this.options.params.tab = tab;
			this.hashChange();
			this.model.fetch({
				data : this.options.params
			})
		},
		storeList : function() {
			var storePageInfo = this.storeModel.get("pageInfo") || {};
			var pageInfo = this.model.get("pageInfo");
			if (this.model.hasChanged("parameters")
					|| storePageInfo.page > pageInfo.page) {
				this.storeModel.clear({
					silent : true
				})
			}
			var data = this.model.toJSON();
			var storeData = this.storeModel.get("list") || [];
			data.list = storeData.concat(data.list);
			this.storeModel.set(data)
		},
		checkScrollTop : function(e) {
			if ($(e.currentTarget).attr("target") != "_blank") {
				var dfd = $.Deferred();
				dfd.done(function(self, e) {
					e.preventDefault();
					var scrollTop = $(window).scrollTop();
					self.options.params.scrollTop = scrollTop;
					self.hashChange()
				}).done(function(self, e) {
					location.href = $(e.currentTarget).attr("href")
				}).resolve(this, e)
			}
		},
		hashChange : function() {
			Shopping.views.mMain.hashChange(this.options.params, "")
		},
		hashChangeToreplace : function() {
			Shopping.views.mMain.hashChangeToreplace(this.options.params, "")
		}
	})
})(jQuery);
(function($) {
	window.PlanningShowView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				initialize : function() {
					this.model = new PlanningShowModel();
					this.model.on("reset change", this.render, this);
					this.setTemplate("#planningViewTemplate");
					this.toScroll = 0;
					this.isFirst = true;
					this.tabPage = 1;
					if (window.gargoyle) {
						try {
							gargoyle.initParam({
								de : "MO",
								s1 : "shopping",
								s2 : "planningshow",
								s3 : "",
								pn : this.options.showId,
								t : "T_mobile",
								g : "G_mobile_event"
							})
						} catch (e) {
						}
					}
					this.on("render:after", function() {
						setTimeout(_.bind(this.fixedLayer, this), 500)
					}, this)
				},
				events : {
					"click .planningshow .link_tab" : "selectMainExhibition",
					"click .planningshow [data-page]" : "selectPagingBtn",
					"click .tab_plan a.btn_prev" : "prevTabMove",
					"click .tab_plan a.btn_next" : "nextTabMove",
					"click .select_plan .btn_all" : "toggleCategory",
					"click [data-prodidx]" : "goOutLink"
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var prodlist = this.model.get("tabProdList") || [];
					var item = prodlist[prodidx];
					if (item.prodtype == "model") {
						return true
					} else {
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, false)
						} else {
							if (item.shopId == "11st"
									|| item.shopId == "gmarket"
									|| item.shopId == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), false, item.shopId)
							} else {
								return true
							}
						}
						return false
					}
				},
				render : function() {
					try {
						if (window.gargoyle) {
							gargoyle.initParam({
								de : "MO",
								s1 : "shopping",
								s2 : "planningshow",
								s3 : "",
								pn : this.options.showId,
								t : "T_mobile",
								g : "G_mobile_event"
							})
						}
						this.$el.off();
						this.setElement("#mContent");
						$("#daumFoot").hide();
						this.model.set({
							viewtype : this.options.params.viewtype
						}, {
							silent : true
						});
						this.uniqTabList();
						var data = this.model.toJSON();
						this.options.params.page = this.options.params.page == "" ? 1
								: parseInt(this.options.params.page, 10);
						data.params = this.options.params;
						if (this.isFirst) {
							this.totalPage = data.pageInfo ? data.pageInfo.totalPage
									: 1;
							this.isFirst = false
						}
						data.tabCnt = this.tabCnt = (_.size(data.tabList) % 4 == 0) ? 4
								: 3;
						data.firstTotalPage = parseInt(this.totalPage, 10);
						$(this.el).html(this.getTemplate(data));
						this.setClickCode({
							t : "T_mobile",
							g : "G_mobile_event"
						});
						if (!$("#daumContent").hasClass("nav_on")
								&& !HOWAPPINFO) {
							$("#daumFoot").show()
						}
						this.autoScrollTop();
						var tabOnIndex = this.$el.find(".list_tab_sub .on")
								.index();
						this.tabPage = parseInt(tabOnIndex / data.tabCnt, 10) + 1;
						this.tabMove();
						this.setChildView();
						if (window.gargoyle) {
							gargoyle.init({
								a : this.model.get("selectTab")
							})
						}
						return this
					} catch (e) {
						this.error(e)
					}
				},
				autoScrollTop : function() {
					if (this.options.params.tabid != "") {
						this.toScroll = this.$el.find(".tab_plan").offset().top
					}
					if (this.toScroll != 0) {
						$(window).scrollTop(this.toScroll);
						this.toScroll = 0
					} else {
						$(window).scrollTop(93)
					}
				},
				selectMainExhibition : function(e) {
					e.preventDefault();
					this.isFirst = true;
					var targetNode = e.currentTarget.parentNode;
					var list = this.$el.find(".list_theme li");
					_.each(list, function(item, index) {
						if (item == targetNode) {
							$(item).addClass("on")
						} else {
							$(item).removeClass("on")
						}
					});
					var url = "!/planningshow/" + this.options.showId
							+ "/tabid:" + e.currentTarget.parentNode.id
							+ "&page:1";
					Backbone.history.navigate(url, {
						trigger : true
					})
				},
				selectPagingBtn : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var url = "!/planningshow/" + this.options.showId
							+ "/page:" + target.data("page") + "&tabid:"
							+ this.model.get("selectTab");
					Backbone.history.navigate(url, {
						trigger : true,
						replace : true
					});
					this.toScroll = $(window).scrollTop()
				},
				selectViewType : function(viewtype) {
					var url = "!/planningshow/"
							+ Shopping.views.planningShow.options.showId
							+ "/tabid:"
							+ Shopping.views.planningShow.model
									.get("selectTab")
							+ "&page:"
							+ Shopping.views.planningShow.model.get("pageInfo").selectPage
							+ "&viewtype:" + viewtype;
					Backbone.history.navigate(url, {
						trigger : true
					})
				},
				uniqTabList : function() {
					var tabUniqList = _.uniq(_.pluck(this.model.get("tabList"),
							"tabId"));
					var tabList = [];
					_.each(tabUniqList, function(t) {
						tabList.push(_.find(Shopping.views.planningShow.model
								.get("tabList"), function(item) {
							return item.tabId == t
						}))
					});
					this.tabCnt = (_.size(tabList) % 4 == 0) ? 4 : 3;
					this.totalTabCnt = Math.ceil(_.size(tabList) / this.tabCnt);
					this.model.set({
						tabList : tabList
					}, {
						silent : true
					})
				},
				prevTabMove : function(e) {
					e.preventDefault();
					this.tabPage--;
					this.tabMove()
				},
				nextTabMove : function(e) {
					e.preventDefault();
					this.tabPage++;
					this.tabMove()
				},
				tabMove : function() {
					if (this.tabPage < 1) {
						this.tabPage = this.totalTabCnt
					} else {
						if (this.tabPage > this.totalTabCnt) {
							this.tabPage = 1
						}
					}
					var startNum = 3 * (this.tabPage - 1);
					var endNum = (startNum + this.tabCnt) - 1;
					this.$el.find(".list_tab_sub li").show();
					this.$el.find(".list_tab_sub li:lt(" + startNum + ")")
							.hide();
					this.$el.find(".list_tab_sub li:gt(" + endNum + ")").hide()
				},
				setChildView : function() {
					var instance = setViewInstance(
							Shopping.views.planningShow.childView,
							window.MobilePlanningShowCateView, {
								name : "mPlanningshowCate",
								rendertrigger : true,
								params : {
									cateid : this.model.get("cateid") || "",
									areaid : this.options.showId || ""
								}
							});
					if (instance) {
						this.childView.mPlanningshowCate.model.fetch({
							data : {
								cateid : this.model.get("cateid") || "",
								areaid : this.options.showId || ""
							}
						})
					} else {
						if (this.model.get("cateid") != "") {
							this.childView.mPlanningshowCate.model.set({
								cateid : this.model.get("cateid")
							}, {
								silent : true
							})
						}
						this.childView.mPlanningshowCate.setStoreModel()
					}
				},
				toggleCategory : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					if (this.$el.find(".select_plan").hasClass("select_on")) {
						this.$el.find(".select_plan").removeClass("select_on")
					} else {
						this.$el.find(".select_plan").addClass("select_on");
						this.childView.mPlanningshowCate.render();
						this.$el.find(".inner_select").detach(".cate_plan");
						this.$el.find(".inner_select").append(
								this.childView.mPlanningshowCate.$el)
					}
				},
				fixedLayer : function() {
					var $fixedLayer = $("#fixedLayer__");
					var originFixObj = Shopping.views.planningShow.$el
							.find(".fixed_obj__");
					if (_.size(originFixObj) > 0) {
						var cloneFixObj = originFixObj.clone(true);
						if (!Shopping.fixedEvent) {
							Shopping.fixedEvent = new mobileSetFix({
								min : originFixObj.offset().top,
								position : "fixed"
							})
						} else {
							Shopping.fixedEvent.reset()
						}
						$fixedLayer.append(cloneFixObj);
						$fixedLayer.off("click.linkTab");
						$fixedLayer
								.on(
										"click.linkTab",
										".link_tab",
										function(e) {
											e.preventDefault();
											Shopping.views.planningShow.isFirst = true;
											var targetNode = e.currentTarget.parentNode;
											var list = $("#fixedLayer__").find(
													".list_theme li");
											_.each(list, function(item, index) {
												if (item == targetNode) {
													$(item).addClass("on")
												} else {
													$(item).removeClass("on")
												}
											});
											var url = "!/planningshow/"
													+ Shopping.views.planningShow.options.showId
													+ "/tabid:"
													+ e.currentTarget.parentNode.id
													+ "&page:1";
											Backbone.history.navigate(url, {
												trigger : true
											})
										});
						$fixedLayer.off("click.btnPrev");
						$fixedLayer.on("click.btnPrev", ".tab_plan a.btn_prev",
								function(e) {
									e.preventDefault();
									Shopping.views.planningShow.$el.find(
											".tab_plan a.btn_prev").trigger(
											"click");
									Shopping.fixedEvent.tabPage--;
									Shopping.fixedEvent.tabMove()
								});
						$fixedLayer.off("click.btnNext");
						$fixedLayer.on("click.btnNext", ".tab_plan a.btn_next",
								function(e) {
									e.preventDefault();
									Shopping.views.planningShow.$el.find(
											".tab_plan a.btn_next").trigger(
											"click");
									Shopping.fixedEvent.tabPage++;
									Shopping.fixedEvent.tabMove()
								});
						Shopping.fixedEvent.tabPage = Shopping.views.planningShow.tabPage;
						Shopping.fixedEvent.tabMove = function() {
							if (this.tabPage < 1) {
								this.tabPage = Shopping.views.planningShow.totalTabCnt
							} else {
								if (this.tabPage > Shopping.views.planningShow.totalTabCnt) {
									this.tabPage = 1
								}
							}
							var startNum = 3 * (this.tabPage - 1);
							var endNum = (startNum + Shopping.views.planningShow.tabCnt) - 1;
							$("#fixedLayer__").find(".list_tab_sub li").show();
							$("#fixedLayer__").find(
									".list_tab_sub li:lt(" + startNum + ")")
									.hide();
							$("#fixedLayer__").find(
									".list_tab_sub li:gt(" + endNum + ")")
									.hide()
						}
					}
				}
			})
})(jQuery);
(function($) {
	window.MobilePlusshopDetailView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				initialize : function() {
					this.model = new MobilePlusshopDetailModel();
					this.model.on("reset change", this.render, this);
					this.listmodel = new MobilePlusshopDetailModel();
					this.listmodel.on("reset change", this.replaceModelList,
							this);
					this.setTemplate("#mobilePlusshopDetailTemplate");
					this.setChildTemplate("#mobilePlusshopSlideTemplate");
					this.fixed = null;
					if (window.gargoyle) {
						try {
							gargoyle.initParam({
								de : "MO",
								s1 : "shopping",
								s2 : "plusshop",
								s3 : "",
								pn : "shopbest"
							})
						} catch (e) {
						}
					}
				},
				events : {
					"click #openCategory" : "toggleCategoryLayer",
					"click [data-sohocateid]" : "fetchList",
					"click .cont_plus [data-page]" : "morePage",
					"click .link_top" : moveTop,
					"click [data-prodidx]" : "goOutLink"
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var prodlist = this.model.get("detailProdList") || [];
					var item = prodlist[prodidx];
					if (item.model == "1") {
						return true
					} else {
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, false)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), false, item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				page : 1,
				countperpage : 30,
				blnClickMorePage : false,
				render : function() {
					try {
						this.$el.off();
						this.setElement(this.$el);
						if (this.model.get("code") == "600") {
							Backbone.history.navigate("#!/plusshoplist/", {
								trigger : true
							});
							return false
						} else {
							var detailTop = this.model.get("detailTop");
							if (_.isEmpty(detailTop)
									|| detailTop.topType == "noResult") {
								Backbone.history.navigate("#!/plusshoplist/", {
									trigger : true
								});
								return false
							} else {
								var viewType = this.model.get("viewType");
								var detailProdList = this.setProdList(
										this.model.get("detailProdList"),
										viewType);
								var detailLowerProdList = this
										.setLowerProdList(this.model
												.get("detailProdList"),
												viewType);
								var categoryList = this.model
										.get("categoryList");
								var totalCnt = this.model.get("totalCnt") || 0;
								var totalPage = Math
										.round((this.model.get("totalCnt") / this.countperpage) + 0.5) || 0;
								totalCnt = (viewType == "BEST" && totalCnt > 100) ? 100
										: totalCnt;
								this.$el.html(this.getTemplate({
									shopInfo : detailTop.shopinfo || {},
									banner : detailTop.banner || {},
									topType : detailTop.topType || "only",
									detailProdList : detailProdList,
									categoryList : categoryList,
									lowerprodList : detailLowerProdList,
									viewType : viewType,
									totalCnt : totalCnt,
									cateid : this.model.get("cateid") || "",
									catename : this.model.get("catename")
											|| "전체 카테고리",
									page : this.page,
									totalPage : totalPage
								}));
								this.setSlide((detailTop.toplist || []),
										(detailTop.topType || "only"));
								if (!this.blnClickMorePage) {
									this.setScrollTop()
								} else {
									this.blnCLickMorePage = false
								}
							}
						}
						if (window.gargoyle) {
							try {
								gargoyle.initParam({
									de : "MO",
									s1 : "shopping",
									s2 : "plusshop",
									s3 : "",
									pn : "shopbest"
								})
							} catch (e) {
							}
							gargoyle.bind()
						}
						return this
					} catch (e) {
						this.error(e)
					}
				},
				setScrollTop : function() {
					$(window).scrollTop(this.options.scrollTop || 93)
				},
				setSlide : function(data, topType) {
					if (topType == "only") {
						this.$el.find("#plusshopSildeWrap").html(
								this.getChildTemplate(
										"#mobilePlusshopSlideTemplate", {
											img : _.first(data).img,
											link : _.first(data).link,
											title : _.first(data).title,
											minprice : _.first(data).minprice,
											maxprice : _.first(data).maxprice,
											topType : topType
										}))
					} else {
						var viewdata = this.setDataSource(data, topType);
						this.viewdc = new slide.InfiniteDataSource(viewdata);
						this.viewSlide = new slide.Slide(this.$el.find(
								"#plusshopSildeWrap").get(0), this.viewdc, {
							container : {
								id : "mPlusshopSlide"
							}
						});
						this.viewSlide.on("endDrag", function(session) {
							session.targetEvent.preventDefault()
						});
						this.viewSlide.on("next", _.bind(this.setDesc, this));
						this.viewSlide.on("prev", _.bind(this.setDesc, this));
						var lkj = this;
						$("#plusshopPrevBtn").on("click", function(e) {
							e.preventDefault();
							lkj.viewSlide.prev()
						});
						$("#plusshopNextBtn").on("click", function(e) {
							e.preventDefault();
							lkj.viewSlide.next()
						});
						this.setDesc()
					}
				},
				setDesc : function() {
					$("#plusshopTopPage").html(this.viewdc.index + 1);
					$("#plusshopTopTotalCnt").html(_.size(this.viewdc.data))
				},
				setDataSource : function(data, topType) {
					var viewdata = [];
					var lkj = this;
					_.each(data, function(item, i) {
						viewdata.push({
							toHTML : function() {
								return lkj.getChildTemplate(
										"#mobilePlusshopSlideTemplate", {
											img : item.img,
											link : item.link,
											title : item.title,
											minprice : item.minprice,
											maxprice : item.maxprice,
											topType : topType
										})
							}
						})
					});
					return viewdata
				},
				setProdList : function(list, viewType) {
					if (viewType == "BEST") {
						return _.first(list, 10)
					} else {
						return _.first(list, this.page * this.countperpage)
					}
				},
				setLowerProdList : function(list, viewType) {
					if (viewType == "BEST") {
						return _.rest(_.first(list, 100), 10)
					} else {
						return []
					}
				},
				toggleCategoryLayer : function(e) {
					e.preventDefault();
					$(".info_plus").toggleClass("open_sort")
				},
				fetchList : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var cateid = target.data("sohocateid");
					this.page = 1;
					Backbone.history.navigate("#!/plusshop/"
							+ this.options.shopid + "/" + cateid, {
						replace : false,
						trigger : false
					});
					this.listmodel.clear({
						silent : true
					});
					this.listmodel.fetch({
						data : {
							shopid : this.options.shopid,
							cateid : cateid,
							listonly : "Y"
						}
					})
				},
				replaceModelList : function() {
					this.blnClickMorePage = true;
					this.model.set(this.listmodel.toJSON())
				},
				morePage : function(e) {
					e.preventDefault();
					this.blnClickMorePage = true;
					this.page++;
					this.render()
				},
				fixedLayer : function() {
					var originFixObj = this.$el.find(".fixed_obj__");
					var cloneFixObj = originFixObj.clone(true);
					if (!Shopping.fixedEvent) {
						Shopping.fixedEvent = new mobileSetFix({
							min : originFixObj.offset().top,
							position : "fixed"
						})
					} else {
						Shopping.fixedEvent.reset()
					}
					$("#fixedLayer__").append(cloneFixObj)
				}
			})
})(jQuery);
(function($) {
	window.MobilePlusshopMainView = Backbone.ShoppingView
			.extend({
				tagName : "div",
				className : "cont_plus",
				initialize : function() {
					this.model = new MobilePlusshopMainModel();
					this.model.on("reset change", this.render, this);
					this.setTemplate("#mobilePlusshopMainTemplate")
				},
				events : {
					"click .list_plusshop .link_fold" : "openRelatedProducts",
					"click .list_plusshop .link_item, .list_plusshop .link_rel" : "delContents"
				},
				render : function() {
					try {
						this.$el.html(this.getTemplate(this.model.toJSON()));
						return this
					} catch (e) {
						this.error(e)
					}
				},
				hashChange : function() {
					Shopping.views.mMain.hashChange(this.options.params, "")
				},
				openRelatedProducts : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget).parent();
					target.toggleClass("on");
					Shopping.views.mMain.setCurrentHeight()
				},
				setRandomOpen : function() {
					var profileList = this.model.get("profileList");
					if (_.size(profileList) > 10) {
						var openIndex = __.pickRandom(profileList, 10, 0);
						_.each(openIndex, function(item, i) {
							if (profileList[item]) {
								profileList[item].openflag = "Y"
							}
						})
					} else {
						_.each(profileList, function(item, i) {
							item.openflag = "Y"
						})
					}
					this.model.set({
						profileList : profileList
					}, {
						silent : true
					})
				},
				delContents : function(e) {
					var target = $(e.currentTarget);
					$(window)
							.scrollTop(
									(target.attr("href").indexOf("plusshopdb") > 0) ? 168
											: 44);
					$("#mContent")
							.html(
									"<div style='backgroun-color:#fff;height:500px'>&nbsp;</div>")
				}
			})
})(jQuery);
(function($) {
	window.MobileSearchImageView = Backbone.ShoppingView.extend({
		el : "#searchList",
		initialize : function() {
			this.setTemplate("#MobileSearchImageViewTemplate");
			this.model = new MobileSearchModel();
			this.model.on("reset change", this.render, this)
		},
		events : {
			"click [data-prodidx]" : function(e) {
				return Shopping.views.mobileSearchMain.goOutLink(e)
			}
		},
		render : function() {
			this.setElement("#searchList");
			this.$el.parent().attr("class", "cont_item cont_image");
			var searchList = Shopping.views.mobileSearchMain.getSearchList();
			this.$el.html(this.getTemplate({
				searchList : searchList,
				page : this.options.page,
				page_size : this.options.page_size
			}));
			checkGNBInfo.trigger("check:zzim");
			if (window.gargoyle) {
				gargoyle.bind()
			}
		}
	})
})(jQuery);
(function($) {
	window.MobileSearchListView = Backbone.ShoppingView.extend({
		el : "#searchList",
		initialize : function() {
			this.setTemplate("#MobileSearchListViewTemplate");
			this.model = new MobileSearchModel();
			this.model.on("reset change", this.render, this);
			this.$window = $(window)
		},
		events : {
			"click .link_info" : "toggleMoreInfo",
			"click [data-bigimageidx]" : "showBigImage",
			"click [data-prodidx]" : function(e) {
				return Shopping.views.mobileSearchMain.goOutLink(e)
			}
		},
		render : function() {
			this.setElement("#searchList");
			this.$el.parent().attr("class", "cont_item cont_text");
			var searchList = Shopping.views.mobileSearchMain.getSearchList();
			this.$el.html(this.getTemplate({
				searchList : searchList,
				page : this.options.page,
				page_size : this.options.page_size
			}));
			checkGNBInfo.trigger("check:zzim");
			if (window.gargoyle) {
				gargoyle.bind()
			}
		},
		toggleMoreInfo : function(e) {
			var target = $(e.currentTarget);
			target.parent().parent().parent().toggleClass("info_open")
		},
		showBigImage : function(e) {
			var body = $("body");
			var target = $(e.currentTarget);
			var list = Shopping.views.mobileSearchMain.getSearchList().list;
			var mobileSearchBigImageTemplate = _
					.template(TEMPLATE.MobileSearchBigImageTemplate
							|| $("#MobileSearchBigImageTemplate").html());
			var imageLayer = $.trim(mobileSearchBigImageTemplate({
				top : this.$window.scrollTop()
						+ (this.$window.height() > 480 ? 100 : 50) + "px",
				height : body.height() + "px",
				item : list[target.data("bigimageidx")]
			}));
			var layerContainer = $("#mobileSearchBigImage");
			if (layerContainer.size() > 0) {
				layerContainer.replaceWith(imageLayer)
			} else {
				body.append(imageLayer)
			}
		}
	})
})(jQuery);
(function($) {
	window.MobileSearchMainView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				initialize : function() {
					this.model = new MobileSearchModel();
					this.model.on("reset change", this.render, this);
					this.setTemplate("#MobileSearchMainViewTemplate");
					this.router = Shopping.routes.mobileSearch;
					this.refineOptions = {};
					this.selectParamsObj = {};
					this.initParamForGargoyle()
				},
				events : {
					"click .link_fold" : "toggleKeyword",
					"click .view_sort" : "viewToggleLayer",
					"change .select_sort" : "changeSort",
					"click [data-view]" : "changeView",
					"click #moibleBuy" : "changeMoibleBuy",
					"click .link_mobile" : "triggerClick",
					"click .label_mobile" : "labelClick",
					"click [data-page]" : "morePage",
					"click .link_result" : "deleteOption",
					"click .cont_recomm [data-optkey]" : "changeOption"
				},
				render : function() {
					try {
						this.$el.off();
						this.setElement("#mContent");
						this.setParamRefineOption();
						this.childCommonData = {
							idx : this.options.idx || 0,
							docid : this.options.docid,
							page : this.options.page,
							page_size : this.options.page_size
						};
						if (this.options.docid) {
							this.options.view_type = "preview"
						}
						if (this.model.get("code") != "204") {
							if (this.options.part == "N"
									|| this.$el.find("#searchList").length == 0) {
								$("#daumWrap").removeClass("searchoption_cont");
								var endItemIndex = this.options.page
										* this.options.page_size > this.model
										.get("searchList").total ? this.model
										.get("searchList").total
										: this.options.page
												* this.options.page_size;
								var viewData = _
										.extend(
												this.model.toJSON(),
												{
													params : this.options,
													endItemIndex : endItemIndex > this.model
															.get("searchList").total ? this.model
															.get("searchList").total
															: endItemIndex
												});
								this.$el.html(this.getTemplate(viewData))
							}
							if (this.options.view_type != "") {
								this.router.param.view_type = this.options.view_type
							} else {
								if (Backbone.history.fragment
										.indexOf("view_type") <= -1) {
									this.options.view_type = "list";
									this.router.param.view_type = this.options.view_type
								}
							}
							this.initParamForGargoyle();
							var optionview = this
									.makeChildViewInstance(
											"MobileSearchOptionView",
											{
												isCateChange : this.options.isCateChange
											});
							if (this.options.part == "N") {
								var obj = this.model.toJSON();
								obj.params = this.options;
								optionview.model.set(obj, {
									silent : false
								})
							} else {
								optionview.model.set("parameterList",
										this.model.get("parameterList"), {
											silent : false
										})
							}
							if (_.isEmpty(this.$el.find("#optionContent")
									.html())) {
								optionview.render()
							}
							if (this.options.view_type == "list") {
								this.renderChildView("MobileSearchListView")
							} else {
								if (this.options.view_type == "image") {
									this
											.renderChildView("MobileSearchImageView")
								} else {
									if (this.options.view_type == "preview") {
										this
												.renderChildView("MobileSearchPreviewView")
									} else {
										this
												.renderChildView("MobileSearchListView")
									}
								}
							}
							this
									.makeChildViewInstance("MobileSearchRecentView").model
									.fetch({
										data : {
											pagetype : Shopping.views.mobileSearchMain.options.cc_type
										}
									});
							this.$el
									.find("#searchListCount")
									.html(
											__
													.toNumberExp(this.model
															.get("searchList").total || 0));
							this.setSelectedOption();
							if (!_.isEmpty(this.options.q)) {
								this.sendRealTimeIssue()
							}
							this
									.sendTongQuery("page="
											+ this.options.page
											+ ",sq="
											+ encodeURIComponent(this.options.q)
											+ ",devid=MO,sflag="
											+ (jQuery.cookie("sflag") || "N")
											+ ",sa="
											+ encodeURIComponent(this.model
													.get("qaKeyword")
													|| "")
											+ ",sc="
											+ (this.model.get("searchList") ? this.model
													.get("searchList").total
													: 0)
											+ ",saq=,spc="
											+ this.options.cateid
											+ ",spqid="
											+ (this.model.get("spqid") || "")
											+ ",preferer="
											+ encodeURIComponent(window.location.href))
						} else {
							this.$el.off();
							this.renderChildView("MobileSearchNoResultView", {
								data : this.model.toJSON(),
								params : _.clone(this.options)
							});
							this.initParamForGargoyle()
						}
						$("#daumTotalSuggestLayer").hide();
						var $mNav = $("#mNav");
						if (!$mNav.hasClass("show_gnb") && !HOWAPPINFO) {
							$("#daumFoot").show()
						}
						if (!$mNav.hasClass("show_gnb")) {
							M_SHOPHOW.footer.asyncRender()
						}
						if (!_.isEmpty(this.options.zzimid)) {
							addMobileZzim(this.options.zzimid)
						}
						if (M_SHOPHOW.GNB) {
							if (this.model.get("thisCategory").realcateid != M_SHOPHOW.GNB.selCateid
									&& M_SHOPHOW.GNB.isReset) {
								var cateid = this.model.get("thisCategory").realcateid;
								var brandcateid = (this.model
										.get("thisCategory").type == "B" ? this.model
										.get("thisCategory").id
										: "");
								var cateDepth = this.depthCateidMap[this.model
										.get("thisCategory").depth]
										|| "bcate";
								if (this.model.get("thisCategory").type == "G"
										&& this.model.get("thisCategory")[cateDepth
												+ "type"] == "B") {
									cateid = this.model.get("thisCategory")[this.depthCateidMap[this.model
											.get("thisCategory").depth - 1]
											+ "id"]
											|| "";
									brandcateid = this.model
											.get("thisCategory")[cateDepth
											+ "id"]
											|| ""
								}
								M_SHOPHOW.GNB.setCateid({
									cateid : cateid,
									bcateid : brandcateid
								})
							}
							if (!M_SHOPHOW.GNB.isReset) {
								M_SHOPHOW.GNB.isReset = true
							}
							M_SHOPHOW.GNB.checkZZim()
						}
						this.trigger("render");
						if (window.gargoyle) {
							gargoyle.bind()
						}
					} catch (e) {
						this.error(e)
					}
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var likenessidx = target.data("likenessidx");
					var mallidx = target.data("mallidx");
					var item = {
						isPlay : !this.getSearchList().list[prodidx].lastcateid
								.indexOf("103108"),
						model : this.getSearchList().list[prodidx].model || "0",
						id : this.getSearchList().list[prodidx].id,
						cpId : this.getSearchList().list[prodidx].cpId,
						mvalidyn : this.getSearchList().list[prodidx].mvalidyn
					};
					if (_.isNumber(mallidx)) {
						item = {
							model : 0,
							id : this.getSearchList().list[prodidx].mallList[mallidx].docid,
							cpId : this.getSearchList().list[prodidx].mallList[mallidx].shopid,
							mvalidyn : this.getSearchList().list[prodidx].mallList[mallidx].mvalidyn
						}
					}
					if (_.isNumber(likenessidx)) {
						item = {
							id : this.getSearchList().list[prodidx].likeness.list[likenessidx].id,
							cpId : this.getSearchList().list[prodidx].likeness.list[likenessidx].cpId,
							mvalidyn : this.getSearchList().list[prodidx].likeness.list[likenessidx].mvalidyn
						}
					}
					if (item.model == "1") {
						return true
					} else {
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.id, item.isPlay)
						} else {
							if (item.cpId == "11st" || item.cpId == "gmarket"
									|| item.cpId == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.id, target.attr("href"),
										item.isPlay, item.cpId)
							} else {
								return true
							}
						}
						return false
					}
				},
				depthCateidMap : {
					1 : "bcate",
					2 : "mcate",
					3 : "scate",
					4 : "dcate"
				},
				openLayer : function() {
					if ($.cookie("search_help") != "false") {
						if (!window.orientation || window.orientation == 0
								|| window.orientation == 180) {
							var imgUrl = "http://m1.daumcdn.net/imgsrc.search/shopping/img/mobile/m640/20130404_popup2.png";
							if (HOWAPPINFO) {
								imgUrl = "http://m1.daumcdn.net/imgsrc.search/shopping/img/mobile/m640/20130405_popup2.png"
							}
							var layer = document.createElement("div");
							$(layer)
									.addClass("open_help_layer")
									.html(
											'<div style="position:relative"><img src="'
													+ imgUrl
													+ '" class="img_layer"/><a href="#btnClose" class="btn_close_layer">닫기</a></span></div>')
									.height(
											HOWAPPINFO ? $(window).height() + 6
													: $(window).height()).find(
											".btn_close_layer").on("click",
											this.closeLayer);
							$("body").append(layer).addClass("hide_cont")
						} else {
							$.cookie("main_help", "false", {
								expires : 9999
							});
							$(".open_help_layer").remove();
							$("body").removeClass("hide_cont");
							$(window).off("orientationchange.helplayer")
						}
					}
				},
				closeLayer : function(e) {
					e.preventDefault();
					$(".open_help_layer").remove();
					$("body").removeClass("hide_cont");
					$(window).off("orientationchange.helplayer");
					$.cookie("search_help", "false", {
						expires : 9999
					});
					$(window).scrollTop(0)
				},
				sendRealTimeIssue : function() {
					var params = this.model.get("mobileSearchLog");
					if (!_.isUndefined(params)) {
						var size = !_.isEmpty(this.model.get("searchList")) ? _
								.size(this.model.get("searchList")) : 0;
						var sendParams = {
							where : "shop",
							host : params.host,
							ip : params.ip,
							dislog : "0SL_SIN" + size,
							sex : params.sex,
							biryr : params.biryr,
							user_agent : params.agent,
							param : params.paramurl
						};
						var url = "http://sl.search.daum.net/WebSearchLogger/shop_log?query="
								+ params.lq + "&" + $.param(sendParams);
						document.getElementById("mobileLog").contentWindow.location
								.replace(url)
					}
				},
				renderChildView : function(viewClassName, commonDataOption) {
					var viewInstanceName = this.getViewName(viewClassName);
					this.makeChildViewInstance(viewClassName, commonDataOption);
					this.childView[viewInstanceName].render()
				},
				makeChildViewInstance : function(viewClassName,
						commonDataOption) {
					var viewData = commonDataOption || this.childCommonData;
					var viewInstanceName = this.getViewName(viewClassName);
					var viewOption = _.extend({
						name : viewInstanceName
					}, viewData);
					setViewInstance(this.childView, window[viewClassName],
							viewOption);
					return this.childView[viewInstanceName]
				},
				getViewName : function(viewClassName) {
					var firstChar = viewClassName.charAt(0);
					return (viewClassName.replace(firstChar, firstChar
							.toLowerCase())).replace("View", "")
				},
				childCommonData : {},
				changeOption : function(e) {
					e.preventDefault();
					var el = $(e.currentTarget);
					var key = el.data("optkey");
					var value = el.data("optval") || el.val();
					var group = el.data("optgrp") || "";
					var type = el.data("data-opttype")
							|| Shopping.views.mobileSearchMain.optionType[key];
					var param = {
						key : key,
						value : value,
						type : type,
						group : group,
						send : true
					};
					this.setRefineOption(param)
				},
				viewToggleLayer : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var onClass = /(\S+)_on/;
					var pTarget = target.parent();
					var className = pTarget.attr("class");
					if (onClass.test(className)) {
						pTarget.attr("class", "desc_list")
					} else {
						pTarget.addClass(this.options.view_type + "_on")
					}
				},
				labelClick : function(e) {
					var target = $(e.currentTarget);
					target.toggleClass("on")
				},
				deleteOption : function(e) {
					e.preventDefault();
					var el = $(e.currentTarget);
					var key = el.data("optkey");
					var value = el.data("optval") || el.val();
					var group = el.data("optgrp") || "";
					var type = el.data("data-opttype")
							|| Shopping.views.mobileSearchMain.optionType[key];
					if (key == "price") {
						this.delRefineOption({
							key : "price_min",
							send : false
						});
						this.delRefineOption({
							key : "price_max",
							send : true
						});
						this.$el.find("[name='price']").removeAttr("checked")
					} else {
						if (this.optionType[key] == "multi") {
							var param = {
								key : key,
								value : value,
								type : type,
								group : group,
								send : true
							};
							this.setRefineOption(param)
						} else {
							this.delRefineOption({
								key : key
							})
						}
					}
					if (group || this.optionType[key] == "multi") {
						this.$el.find("[value='" + value + "']").removeAttr(
								"selected");
						this.$el.find("[value='" + value + "']").removeAttr(
								"checked");
						this.$el.find("[data-brandloading='" + value + "']")
								.parent().removeClass("on");
						if (key === "option") {
							var target = this.$el.find("[data-optgrp='" + group
									+ "']");
							if (target.size()) {
								this.childView[this
										.getViewName("MobileSearchOptionView")]
										.getSpecOptinoTitle(target)
							}
						}
					} else {
						this.$el.find("[name='" + key + "']").removeAttr(
								"checked")
					}
					el.remove()
				},
				changePage : function(e) {
					var target = $(e.currentTarget);
					this.setRefineOption({
						key : "page",
						value : target.data("page")
					})
				},
				morePage : function(e) {
					var moreButton = $(e.currentTarget);
					var page = moreButton.data("page");
					moreButton.find(".emph_g").html("1 - ...");
					var tiara = {
						url : "http://m.shopping.daum.net/mini/search.daum",
						title : "검색결과 | Daum 쇼핑하우"
					};
					if (this.options.cc_type != "search") {
						tiara = {
							url : "http://m.shopping.daum.net/mini/prodlist.daum",
							title : "카테고리 검색결과 | Daum 쇼핑하우"
						}
					}
					var router = this.router;
					var selApiObj = [ "searchList" ];
					var prevparam = router.getPrevParam();
					var currentparam = router.getParam();
					router.selectPartData(prevparam, currentparam);
					var param = _.extend(_.pick(router.getParam(), _
							.keys(router.pickParam)), {
						name : "mobileSearchMain"
					});
					param.selapi = router.getSelectApi(selApiObj);
					param.page = page;
					this.options.page = page;
					if (window.gargoyle) {
						try {
							gargoyle.initParam({
								pd : $.now(),
								de : "MO",
								s1 : "shopping",
								s2 : "search",
								s3 : this.options.cc_type == "search" ? "query"
										: "category",
								pn : this.options.cc_type == "search" ? "_main"
										: this.options.cateid,
								sc : this.options.cateid,
								sp : this.options.page,
								q : encodeURIComponent(this.options.q),
								qa : encodeURIComponent(this.model
										.get("qaKeyword")
										|| ""),
								vt : this.options.view_type || "list"
							})
						} catch (e) {
						}
					}
					this.getCurrentView().model.fetch({
						data : param,
						tiara : tiara
					});
					this.setRefineOption({
						key : "page",
						value : moreButton.data("page")
					}, true)
				},
				showOptionView : function() {
					this.childView.mobileSearchOption.render()
				},
				toggleClass : function(e) {
					$(e.currentTarget).toggleClass("on")
				},
				triggerClick : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					target.parent().prev().trigger("click")
				},
				changeMoibleBuy : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var optname = target.attr("name");
					this.setRefineOption({
						key : "page",
						value : "1",
						send : false
					});
					this.setRefineOption({
						type : "alone",
						key : optname,
						value : (target.next().hasClass("on") ? "" : "Y")
					})
				},
				changeSort : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					target.prev().html(
							target.find(":selected").html()
									+ '<span class="ico_key ico_more"></span>');
					var value = target.val();
					var clickParam = "g=G_msearch_sort,a=A_msearch_sort_";
					switch (value) {
					case "1":
						clickParam += "1";
						break;
					case "3":
						clickParam += "2";
						break;
					case "4":
						clickParam += "3";
						break;
					case "6":
						clickParam += "4";
						break;
					case "5":
						clickParam += "5";
						break
					}
					this.setRefineOption({
						key : "page",
						value : "1",
						send : false
					});
					this.setRefineOption({
						key : "sort_type",
						value : value
					});
					target.blur();
					this.$el.find(".list_on").removeClass("list_on")
				},
				changeView : function(e) {
					e.preventDefault();
					if (this.model.get("code") == "200") {
						var target = $(e.currentTarget);
						var titleTarget = this.$el
								.find(".desc_list .link_sort");
						var value = target.data("view");
						var titleText = target.html()
								+ '<span class="ico_key ico_more"></span>';
						titleTarget.html(titleText);
						target.parent().parent().parent().removeClass("on");
						this.setRefineOption({
							key : "view_type",
							value : value
						})
					}
					this.$el.find(".view_sort").trigger("click")
				},
				toggleLayer : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					target.parent().toggleClass("on")
				},
				toggleKeyword : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					target.parent().toggleClass("relative_open")
				},
				setRefineOption : function(param, triggerOff) {
					var params = _.defaults(param, {
						type : "alone",
						send : true
					});
					var blnOverlap = false;
					if (params.type.indexOf("reset") >= 0) {
						this.setOptDefaultQuery(params.exclude || "")
					}
					if (params.type.indexOf("overlap") >= 0) {
						blnOverlap = true
					}
					if (params.type.indexOf("alone") >= 0) {
						this.refineOptions[params.key] = params.value
					} else {
						if (params.type.indexOf("multi") >= 0) {
							this.initMultiOption(params);
							if (_.isObject(this.refineOptions[params.key])) {
								this.setMultiGrorupOption(params, blnOverlap,
										params.resetGroup)
							} else {
								this.setMultiOption(params, blnOverlap)
							}
						} else {
							if (params.type.indexOf("radio") >= 0) {
								this.setRadioOption(params)
							} else {
								if (params.type.indexOf("toggle") >= 0) {
									if (this.refineOptions[params.key] == params.value) {
										this.refineOptions[params.key] = ""
									} else {
										this.refineOptions[params.key] = params.value
									}
								}
							}
						}
					}
					if (this.refineOptions[params.key] == ""
							|| (_.isObject(this.refineOptions[params.key]) && _
									.size(this.refineOptions[params.key]) == 0)) {
						delete this.refineOptions[params.key]
					}
					if (params.send) {
						this.sendQuery(triggerOff)
					}
				},
				setMultiGrorupOption : function(params, blnOverlap, resetGroup) {
					var optionValue = this.refineOptions[params.key][params.group];
					if (_.isUndefined(optionValue) || resetGroup) {
						optionValue = "|"
					}
					if (optionValue.indexOf("|"
							+ decodeURIComponent(params.value) + "|") < 0) {
						s_console.log("checked");
						optionValue += decodeURIComponent(params.value) + "|"
					} else {
						s_console.log("unchecked");
						if (!blnOverlap) {
							optionValue = optionValue.replace("|"
									+ decodeURIComponent(params.value) + "|",
									"|")
						}
					}
					if (optionValue == "|") {
						delete this.refineOptions[params.key][params.group]
					} else {
						this.refineOptions[params.key][params.group] = optionValue
					}
				},
				setMultiOption : function(params, blnOverlap) {
					if (_.isUndefined(this.refineOptions[params.key])) {
						this.refineOptions[params.key] = "|"
					}
					if (this.refineOptions[params.key].indexOf("|"
							+ decodeURIComponent(params.value) + "|") < 0) {
						s_console.log("checked");
						this.refineOptions[params.key] += decodeURIComponent(params.value)
								+ "|"
					} else {
						s_console.log("unchecked");
						if (!blnOverlap) {
							this.refineOptions[params.key] = this.refineOptions[params.key]
									.replace("|"
											+ decodeURIComponent(params.value)
											+ "|", "|")
						}
					}
				},
				initMultiOption : function(params) {
					if (_.isUndefined(this.refineOptions[params.key])) {
						s_console.debug("refineOption Reset", params.key);
						this.refineOptions[params.key] = "|"
					}
					if (!_.isUndefined(params.group) && params.group != ""
							&& !_.isObject(this.refineOptions[params.key])) {
						this.refineOptions[params.key] = {}
					}
				},
				setRadioOption : function(params) {
					if (this.refineOptions[params.key]) {
						this.refineOptions[params.key] = 0
					} else {
						this.refineOptions[params.key] = 1
					}
				},
				getParamString : function() {
					var optionQuery = "";
					_.chain(this.refineOptions).pick(
							_.without(_.keys(this.options), "options")).each(
							function(value, key) {
								var optValue = value;
								if (_.isObject(value)) {
									_.each(optValue, function(v) {
										if (_.isObject(optValue)) {
											optValue = ""
										}
										optValue += "^" + v
									})
								}
								if (optValue != "") {
									optionQuery += key + ":"
											+ encodeURIComponent(optValue)
											+ "&"
								}
							});
					return optionQuery
				},
				delRefineOption : function(params) {
					var param = _.defaults(params, {
						send : true
					});
					delete this.refineOptions[param.key];
					if (param.send == true) {
						this.sendQuery()
					}
				},
				sendQuery : function(triggerOff) {
					var paramString = this.getParamString();
					var url = "";
					if (!_.isEmpty(this.options.q)) {
						url += "!/search/" + encodeURIComponent(this.options.q)
					} else {
						url += "!/category/" + this.refineOptions.cateid
					}
					url += "/" + paramString;
					if (triggerOff) {
						this.router.navigate(url)
					} else {
						this.router.navigate(url, {
							trigger : true
						})
					}
				},
				setParamRefineOption : function() {
					var arrParam = this.model.get("parameterList");
					this.setOptDefaultQuery();
					_
							.each(
									arrParam,
									function(item) {
										if (_
												.isUndefined(this.refineOptions[item.key])) {
											this.refineOptions[item.key] = "|"
										}
										if (item.group != "") {
											if (this.refineOptions[item.key] == "|") {
												this.refineOptions[item.key] = {}
											}
											if (_
													.isUndefined(this.refineOptions[item.key][item.group])) {
												this.refineOptions[item.key][item.group] = "|"
														+ item.value + "|"
											} else {
												this.refineOptions[item.key][item.group] += item.value
														+ "|"
											}
										} else {
											var optType = _.first(_.values(_
													.pick(this.optionType,
															item.key)))
													|| "";
											if (optType.indexOf("multi") >= 0) {
												this.refineOptions[item.key] += item.value
														+ "|"
											} else {
												this.refineOptions[item.key] = item.value
											}
										}
									}, this)
				},
				setOptDefaultQuery : function(excludeOpt) {
					var defaultData = {
						model : "",
						tab : "total",
						page : "1",
						view_type : this.options.view_type
					};
					if (excludeOpt && excludeOpt != "") {
						_.each(jQuery.makeArray(excludeOpt), function(item) {
							defaultData[item] = this.refineOptions[item] || ""
						}, this)
					}
					this.refineOptions = defaultData
				},
				optionType : {
					option : "multi",
					brand_loading : "multi",
					cp_loading : "multi",
					addquery : "multi",
					color_code : "multi"
				},
				setSelectedOption : function() {
					var paramObj = this.initServerParamList();
					var template = _
							.template('<a href="#none" class="link_result _GC" data-optgrp="<%- group %>" data-optkey="<%- key %>" data-optval="<%- value || text %>"><%- text || value %><span class="ico_key ico_delete">삭제</span></a>');
					var templateHTML = "";
					var mainOption = [ "brand_loading", "shopgroup",
							"color_code", "option", "coupon", "point", "pcard",
							"used", "discard", "subcateid", "deli_no_pay" ];
					if (!_.isEmpty(this.options.q)
							&& _.isEmpty(this.options.brandcateid)) {
						mainOption.push("cateid")
					}
					if (_.isEmpty(this.options.subcateid)) {
						mainOption.push("brandcateid")
					}
					_.each(mainOption, function(item) {
						if (__.hasContent(paramObj[item])) {
							_.each(paramObj[item], function(subItem) {
								templateHTML += template(subItem)
							})
						}
					});
					if (__.hasContent(paramObj.price_min)
							|| __.hasContent(paramObj.price_max)) {
						var text = paramObj.price_min ? __
								.toNumberExp(paramObj.price_min[0].value) : "";
						text += "~"
								+ (paramObj.price_max ? __
										.toNumberExp(paramObj.price_max[0].value)
										: "");
						text += "원";
						templateHTML += template({
							text : text,
							key : "price",
							value : "",
							group : ""
						})
					}
					var viewTarget = this.$el.find("[data-view='"
							+ this.options.view_type + "']");
					var titleTarget = this.$el.find(".desc_list .link_sort");
					var titleText = viewTarget.html()
							+ '</span><span class="ico_key ico_more">';
					titleTarget.html(titleText);
					if (templateHTML != "") {
						this.$el.find(".result_option").html(templateHTML);
						this.$el.find(".offer_result").show()
					} else {
						this.$el.find(".offer_result").hide()
					}
					if (paramObj.sort_type[0]) {
						var title = this.$el.find(
								".desc_sort .select_sort [value='"
										+ paramObj.sort_type[0].value + "']")
								.attr("selected", true).html();
						this.$el
								.find(".desc_sort .link_sort")
								.html(
										title
												+ '</span><span class="ico_key ico_more">')
					}
				},
				initServerParamList : function() {
					var paramList = this.model.get("parameterList");
					var obj = {};
					_.each(paramList, function(item) {
						if (!__.hasContent(obj[item.key])) {
							obj[item.key] = []
						}
						obj[item.key].push({
							key : item.key,
							group : item.group,
							text : item.text,
							value : item.value
						})
					});
					return obj
				},
				getSearchList : function() {
					var KEY = "search";
					var page_size = this.options.page_size;
					var page = this.getCurrentView().options.page = this.options.page;
					var searchList = {};
					if (isLocalStorage) {
						if (page == 1) {
							searchList = this.model.get("searchList");
							searchList.code = this.model.get("code");
							localStorage.setItem(KEY, JSON
									.stringify(searchList))
						} else {
							searchList = this.getCurrentView().model
									.get("searchList");
							searchList.code = this.getCurrentView().model
									.get("code");
							var localSearchList = JSON
									.parse(window.localStorage.getItem(KEY));
							if ((page - 1) * page_size == localSearchList.list.length) {
								searchList.list = localSearchList.list
										.concat(searchList.list);
								localStorage.setItem(KEY, JSON
										.stringify(searchList))
							} else {
								if (page * page_size < localSearchList.list.length) {
									searchList.list = localSearchList.list
											.slice(0, page * page_size);
									localStorage.setItem(KEY, JSON
											.stringify(searchList))
								} else {
									searchList.list = localSearchList.list
											.slice(0, page * page_size)
								}
							}
						}
					} else {
						if (page == 1) {
							searchList = this.model.get("searchList");
							searchList.code = this.model.get("code")
						} else {
							var mainSearchList = this.model.get("searchList");
							var moreSearchList = this.getCurrentView().model
									.get("searchList");
							searchList.code = this.getCurrentView().model
									.get("code");
							if (_.isEmpty(moreSearchList)) {
								searchList.list = mainSearchList.list
							} else {
								if ((page - 1) * page_size == mainSearchList.list.length) {
									searchList.list = mainSearchList.list
											.concat(moreSearchList.list)
								} else {
									if (page * page_size < mainSearchList.list.length) {
										searchList.list = mainSearchList.list
												.slice(0, page * page_size)
									}
								}
							}
						}
					}
					$("#moreButton").data("page", ++page).find(".emph_g").html(
							"1 - " + searchList.list.length);
					return searchList
				},
				getCurrentView : function() {
					if (this.options.view_type == "preview") {
						return this.childView.mobileSearchPreview
					} else {
						if (this.options.view_type == "image") {
							return this.childView.mobileSearchImage
						} else {
							return this.childView.mobileSearchList
						}
					}
				},
				initParamForGargoyle : function() {
					if (window.gargoyle) {
						try {
							gargoyle.initParam({
								de : "MO",
								s1 : "shopping",
								s2 : "search",
								s3 : this.options.cc_type == "search" ? "query"
										: "category",
								pn : this.options.cc_type == "search" ? "_main"
										: this.options.cateid,
								sc : this.options.cateid,
								sp : this.options.page,
								q : encodeURIComponent(this.options.q),
								qa : encodeURIComponent(this.model
										.get("qaKeyword")
										|| ""),
								vt : this.options.view_type || "list"
							})
						} catch (e) {
						}
					}
				}
			})
})(jQuery);
(function($) {
	window.MobileSearchNoResultView = Backbone.ShoppingView.extend({
		el : "#mContent",
		initialize : function() {
			this.setTemplate("#MobileSearchNoResultViewTemplate")
		},
		render : function() {
			this.$el.off();
			var data = this.options.data;
			if (!data.recomSearchList) {
				data.recomSearchList = {
					list : []
				}
			}
			data.params = this.options.params;
			this.$el.html(this.getTemplate(data))
		}
	})
})(jQuery);
(function($) {
	window.MobileSearchOptionView = Backbone.ShoppingView
			.extend({
				el : "#optionContent",
				slideID : "searchoption",
				initialize : function() {
					this.setTemplate("#MobileSearchOptionViewTemplate");
					this.model = new Backbone.Model();
					this.optionList = [ {
						title : "관련",
						attrName : "keywordList",
						type : "keyword",
						data : {},
						cateoption : false
					}, {
						title : "카테고리",
						attrName : "categoryList",
						type : "category",
						data : {},
						cateoption : true
					}, {
						title : "브랜드",
						attrName : "brandList",
						type : "brand",
						data : {},
						cateoption : true
					}, {
						title : "가격/컬러",
						attrName : [ "priceOption", "colorList" ],
						type : "price",
						data : {},
						cateoption : true
					}, {
						title : "몰/혜택",
						attrName : "shopList",
						type : "shop",
						data : {},
						cateoption : true
					}, {
						title : "스펙",
						attrName : "optList",
						type : "spec",
						data : {},
						cateoption : true
					} ];
					this.depthMap = {
						1 : "bcateid",
						2 : "mcateid",
						3 : "scateid",
						4 : "dcateid",
						5 : "ecateid",
						6 : "fcateid"
					};
					this.depthType = {
						1 : "bcatetype",
						2 : "mcatetype",
						3 : "scatetype",
						4 : "dcatetype",
						5 : "ecatetype",
						6 : "fcatetype"
					};
					this.depthList = {
						1 : "bcatelist",
						2 : "mcatelist",
						3 : "scatelist",
						4 : "dcatelist",
						5 : "ecatelist",
						6 : "fcatelist"
					};
					this.MobileSearchOptionSlide = slide.Slide.extend({
						checkAndResizeSlideFrame : function() {
							var self = this;
							function checkResize() {
								if (self.frameEl) {
									var width = self.frameEl.clientWidth;
									var height = self.frameEl.clientHeight;
									if (self.isChangedSize(width, height)) {
										self.resize(width)
									}
								}
							}
							window.setTimeout(checkResize, 300)
						}
					})
				},
				commonRender : function(index, toHTML, row) {
					row = row || 8;
					var tabData = this.tabData[+index];
					var list = _.has(tabData.data, "list") ? tabData.data.list
							: tabData.data;
					var chunkData = __.chunk(list, row, true);
					var totalPage = Math.ceil(_.size(chunkData));
					var dataSource = [];
					_.each(chunkData, function(item, index) {
						dataSource.push({
							list : item,
							page : index,
							total : totalPage,
							params : this.model.get("params"),
							toHTML : toHTML
						})
					}, this);
					this.slideDs = new slide.InfiniteDataSource(dataSource);
					this.$el.find("#optionTabContent").addClass("slide_offer");
					this.optionSlide = new this.MobileSearchOptionSlide(
							this.$el.find("#optionTabContent")[0],
							this.slideDs, {
								container : {
									id : tabData.type
								}
							});
					if (totalPage <= 1) {
						this.optionSlide.listener.destroy()
					}
					this.optionSlide.on("next", _.bind(function() {
						this.slideDs
								.queryCurrent(_.bind(this.pageRender, this))
					}, this));
					this.optionSlide.on("prev", _.bind(function() {
						this.slideDs
								.queryCurrent(_.bind(this.pageRender, this))
					}, this));
					this.pageRender({
						page : this.slideDs.index,
						total : _.size(dataSource)
					})
				},
				keywordRender : function() {
					this.optionCommonInit();
					var index = this.$el.find("#keyword").data("tabindex");
					var self = this;
					var toHTML = function() {
						return self.getChildTemplate(
								"#searchOptionRelationItemTemplate", {
									list : this.list
								})
					};
					this.commonRender(index, toHTML);
					this.optionNoti("keyword")
				},
				destorySlide : function() {
					if (this.slideDs) {
						this.slideDs.destroy();
						this.slideDs = null
					}
					if (this.optionSlide) {
						this.optionSlide.destroy();
						this.optionSlide = null
					}
				},
				optionCommonInit : function() {
					this.destorySlide();
					this.$el.find("#optionTabContent").removeAttr("class")
				},
				categoryRender : function() {
					this.optionCommonInit();
					var index = this.$el.find("#category").data("tabindex");
					var self = this;
					var toHTML = function() {
						return self.getChildTemplate(
								"#searchOptionCategoryItemTemplate", {
									list : this.list,
									page : this.page,
									params : this.params
								})
					};
					this.commonRender(index, toHTML);
					this.optionNoti("category")
				},
				brandRender : function() {
					this.optionCommonInit();
					var index = this.$el.find("#brand").data("tabindex");
					var self = this;
					var toHTML = function() {
						return self.getChildTemplate(
								"#searchOptionBrandItemTemplate", this)
					};
					this.commonRender(index, toHTML);
					this.optionNoti("brand")
				},
				priceRender : function() {
					this.optionCommonInit();
					var index = this.$el.find("#price").data("tabindex");
					var data = this.tabData[+index].data;
					data.params = this.model.get("params");
					this.$el
							.find("#optionTabContent")
							.addClass("sort_offer")
							.html(
									this.getChildTemplate(
											"#searchOptionPriceTemplate", data));
					this.pageRender();
					this.optionNoti("price")
				},
				shopRender : function() {
					this.optionCommonInit();
					var index = this.$el.find("#shop").data("tabindex");
					var data = this.tabData[+index].data;
					data.params = this.model.get("params");
					this.$el.find("#optionTabContent").addClass("sort_offer")
							.html(
									this.getChildTemplate(
											"#searchOptionShopTemplate", data));
					this.pageRender();
					this.optionNoti("shop")
				},
				specRender : function() {
					this.optionCommonInit();
					var index = this.$el.find("#spec").data("tabindex");
					var self = this;
					var toHTML = function() {
						return self.getChildTemplate(
								"#searchOptionSpecItemTemplate", {
									list : this.list,
									params : this.params
								})
					};
					this.commonRender(index, toHTML, 5);
					this.optionNoti("spec")
				},
				pageRender : function(data) {
					this.$el.find("#optionPageContent").removeClass("page_off");
					if (data) {
						if (!this.$el.find("#optionPageContent").parent()
								.hasClass("list_folded")) {
							this.$el.find("#optionPageContent").show();
							if (data.total <= 1) {
								this.$el.find("#optionPageContent").addClass(
										"page_off")
							}
						} else {
							this.$el.find("#optionPageContent").hide()
						}
						this.$el.find("#optionPageContent .paging_num").html(
								this.getChildTemplate(
										"#searchOptionPageTemplate", data))
					} else {
						this.$el.find("#optionPageContent").hide()
					}
				},
				optionNoti : function(type) {
					this.$el.find(".btn_cate").hide();
					this.$el.find("#optionNoti").hide();
					if (type == "price") {
						this.$el
								.find("#optionNoti")
								.html(
										'<span class="ico_key ico_noti"></span>컬러 중복선택 가능')
					} else {
						if (type == "brand") {
							this.$el
									.find("#optionNoti")
									.html(
											'<span class="ico_key ico_noti"></span>중복선택 가능')
						} else {
							if (type == "shop") {
								this.$el
										.find("#optionNoti")
										.html(
												'<span class="ico_key ico_noti"></span>혜택 중복선택 가능')
							} else {
								if (type == "spec") {
									this.$el
											.find("#optionNoti")
											.html(
													'<span class="ico_key ico_noti"></span>중복선택 가능')
								}
							}
						}
					}
					if (!this.$el.find("#optionNoti").parent().hasClass(
							"list_folded")) {
						if (type == "price") {
							if (this.$el.find(".list_color").size() >= 1) {
								this.$el.find("#optionNoti").show()
							}
						} else {
							if (type == "brand") {
								this.$el.find("#optionNoti").show()
							} else {
								if (type == "shop") {
									this.$el.find("#optionNoti").show()
								} else {
									if (type == "spec") {
										this.$el.find("#optionNoti").show()
									} else {
										if (type == "category") {
											this.$el.find(".btn_cate").show()
										}
									}
								}
							}
						}
					}
				},
				initServerParamList : function() {
					var paramList = this.model.get("parameterList");
					var obj = {};
					_.each(paramList, function(item) {
						if (!__.hasContent(obj[item.key])) {
							obj[item.key] = []
						}
						obj[item.key].push({
							key : item.key,
							group : item.group,
							text : item.text,
							value : item.value
						})
					});
					return obj
				},
				initTabData : function() {
					var data = this.model.toJSON(), searchOptionList = _
							.clone(this.optionList), tablist = [];
					if (_.isEmpty(data.params.q)) {
						searchOptionList = _.reject(searchOptionList, function(
								item) {
							return !item.cateoption
						})
					}
					_
							.each(
									searchOptionList,
									function(item) {
										if (item.attrName) {
											if (_.isArray(item.attrName)) {
												_.each(item.attrName, function(
														name) {
													item.data[name] = _
															.clone(data[name])
												}, this)
											} else {
												item.data = _
														.clone(data[item.attrName]);
												if (item.attrName == "categoryList") {
													if (_
															.isEmpty(data.params.q)) {
														var thisCategory = this.model
																.get("thisCategory");
														cateList = thisCategory[this.depthList[thisCategory.depth + 1]];
														item.data.list = _
																.clone(cateList)
													} else {
														this.isSameCate = false;
														if (_
																.isEmpty(item.data.list)) {
															item.data.list = item.data.sameCateList
																	|| [];
															this.isSameCate = true
														}
													}
												}
											}
										}
										if (item.attrName === "brandList") {
											if (data.params.cateid
													.indexOf("103109") >= 0) {
												item.title = "테마"
											} else {
												item.title = "브랜드"
											}
										}
										var checkData = _
												.has(item.data, "list") ? item.data.list
												: item.data;
										if (!_.isEmpty(checkData)) {
											item.index = tablist.length;
											item.toHTML = _.bind(this[item.type
													+ "Render"], this)
													|| function() {
														return " "
													};
											tablist.push(item)
										}
									}, this);
					return tablist
				},
				render : function() {
					this.setElement("#optionContent");
					if (!this.options.isCateChange) {
						this.type = ""
					}
					var data = this.model.toJSON();
					var optionFoldCookie = $.cookie("optionFold");
					this.tabData = this.initTabData();
					data.tabList = this.tabData;
					this.$el.html(this.getTemplate(data));
					this.$tabTitleList = this.$el.find(".offer_tab li");
					var selectTab = this.$tabTitleList.filter(".on");
					if (selectTab.hasClass("title_price")
							|| selectTab.hasClass("title_shop")
							|| optionFoldCookie == "Y") {
						this.optionFold()
					}
					if (this.type) {
						if (this.$tabTitleList.find("#" + this.type).size() > 0) {
							this.$tabTitleList.find("#" + this.type).trigger(
									"click")
						} else {
							this.$tabTitleList.filter(".on").find("a").trigger(
									"click")
						}
					} else {
						this.$tabTitleList.filter(".on").find("a").trigger(
								"click")
					}
				},
				cleanEl : function() {
					this.$el.html("")
				},
				events : {
					"click .link_apply" : "applyOption",
					"click .none_selectbox .link_all" : "toggleList",
					"click .desc_cate .link_kind" : "toggleSubList",
					"click [data-cateid]" : "selectCateid",
					"click .ico_del" : "deleteOption",
					"click .list_color input" : "selectColor",
					"click [data-brandloading]" : "changeBrandSelectOption",
					"click input[type='radio']" : "changeSelectOption",
					"change .spec_sort .box_select" : "changeSpecOption",
					"click #optionPageContent .btn_prev" : "prevSlide",
					"click #optionPageContent .btn_next" : "nextSlide",
					"click .link_tab" : "changeTab",
					"click .list_benefit input" : "selRadioOpt",
					"click .btn_fold" : "optionToggle",
					"click .btn_setting" : "userPriceOption",
					"click .btn_reset" : "resetOption",
					"click #upCate" : "moveUpCate"
				},
				moveUpCate : function(e) {
					e.preventDefault();
					var thisCategory = this.model.get("thisCategory"), params = this.model
							.get("params"), moveDepth = (this.isSameCate ? 2
							: 1), upcate = thisCategory[this.depthMap[thisCategory.depth
							- moveDepth]], upcatetype = thisCategory[this.depthType[thisCategory.depth
							- moveDepth]];
					if (params.q) {
						if (params.brandcateid && upcatetype == "B") {
							s_console.log("DelSub");
							this.delRefineOpt({
								key : "subcateid",
								send : true
							})
						} else {
							if (upcatetype == "I" && params.brandcateid
									&& !params.subcateid) {
								s_console.log("DelBrand");
								this.delRefineOpt({
									key : "brandcateid",
									send : true
								})
							} else {
								if (params.brandcateid && params.subcateid) {
									s_console.log("UpSub");
									this.setRefineOpt({
										key : "subcateid",
										value : upcate,
										reset : true,
										exclud : [ "cateid", "brandcateid" ],
										send : true
									})
								} else {
									if (upcate) {
										s_console.log("GoUp");
										this.setRefineOpt({
											key : "cateid",
											value : upcate,
											reset : true,
											send : true
										})
									} else {
										s_console.log("removeCate");
										this.delRefineOpt({
											key : "cateid",
											send : true
										})
									}
								}
							}
						}
					} else {
						Backbone.history.navigate("!/category/" + upcate, {
							trigger : true
						})
					}
				},
				resetOption : function() {
					if (_.isEmpty(this.model.get("params").q)) {
						this.setRefineOpt({
							type : "reset",
							exclude : [ "cateid", "brandcateid", "subcateid" ]
						})
					} else {
						this.setRefineOpt({
							type : "reset"
						})
					}
					this.render()
				},
				optionToggle : function(e) {
					if (e) {
						e.preventDefault()
					}
					if (!this.$el.find(".offer_list").hasClass("list_folded")) {
						$.cookie("optionFold", "Y");
						this.optionFold()
					} else {
						$.cookie("optionFold", "N");
						this.optionUnFold()
					}
				},
				optionFold : function() {
					this.$el.find(".offer_list").addClass("list_folded");
					this.$el.find("#optionNoti").hide();
					this.$el.find("#optionPageContent").hide()
				},
				optionUnFold : function() {
					this.$el.find(".offer_list").removeClass("list_folded");
					this.optionNoti(this.type);
					if (this.type != "price" && this.type != "shop") {
						this.$el.find("#optionPageContent").show()
					}
				},
				getSpecOptinoTitle : function(target) {
					var selectTitle = target.prev();
					var title = [];
					target.find(":checked").each(
							function(index, item) {
								title.push(item.innerHTML
										+ '<span class="ico_key"></span>')
							});
					if (!_.isEmpty(title)) {
						selectTitle.html(title.join(","));
						target.parent().addClass("on")
					} else {
						selectTitle.html("전체");
						target.parent().removeClass("on")
					}
					var val = target.val();
					val = (val || []).join("|");
					return val
				},
				changeSpecOption : function(e) {
					var target = $(e.currentTarget);
					var group = target.data("optgrp");
					var val = this.getSpecOptinoTitle(target);
					this.setRefineOpt({
						key : "option",
						value : val,
						type : "multi",
						group : group,
						resetGroup : true,
						send : false
					});
					if (this.mutilSelectTimer) {
						clearTimeout(this.mutilSelectTimer)
					}
					this.mutilSelectTimer = setTimeout(_.bind(function() {
						this.setRefineOpt({
							key : "page",
							value : "1",
							send : true
						})
					}, this), 500)
				},
				selRadioOpt : function(e) {
					var target = $(e.currentTarget);
					var optname = target.attr("name");
					this.setRefineOpt({
						key : "page",
						value : "1",
						send : false
					});
					if (optname == "deli_no_pay") {
						var refineOption = this.getRefineOpt();
						this.setRefineOpt({
							type : "alone",
							key : optname,
							value : refineOption.deli_no_pay == 0 ? "" : "0",
							send : true
						})
					} else {
						this.setRefineOpt({
							type : "radio",
							key : optname,
							send : true
						})
					}
				},
				changeTab : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var type = target.attr("id");
					this.$tabTitleList.removeClass("on").find("#" + type)
							.parent().addClass("on");
					this.$el.find("#optionNoti").hide();
					this.type = type;
					this[type + "Render"]();
					if (window.gargoyle) {
						gargoyle.bind()
					}
				},
				prevSlide : function() {
					this.optionSlide.prev()
				},
				nextSlide : function() {
					this.optionSlide.next()
				},
				changeSelectOption : function(e) {
					var target = $(e.currentTarget);
					var name = target.attr("name");
					if (name == "price") {
						this.selectPrice(e)
					} else {
						var param = {
							key : name,
							value : target.val(),
							type : "toggle",
							group : "",
							send : true
						};
						var refineOption = this.getRefineOpt();
						if (refineOption[name] == target.val()) {
							target.removeAttr("checked")
						}
						this.setRefineOpt(param)
					}
				},
				changeBrandSelectOption : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					if (this.mutilSelectTimer) {
						clearTimeout(this.mutilSelectTimer)
					}
					this.mutilSelectTimer = setTimeout(_.bind(function() {
						var value = target.data("brandloading");
						var param = {
							key : "brand_loading",
							value : value,
							type : "multi",
							group : "",
							send : false
						};
						target.parent().toggleClass("on");
						this.setRefineOpt(param);
						this.setRefineOpt({
							key : "page",
							value : "1",
							send : true
						})
					}, this), 500)
				},
				moveRecomm : function() {
					$("body").removeClass("searchoption_cont");
					this.cleanEl()
				},
				selectPrice : function(e) {
					var target = $(e.currentTarget);
					var value = target.val();
					var priceValue = value.split("|");
					var minPrice = parseInt(priceValue[0], 10) * 10000
							|| undefined;
					var maxPrice = parseInt(priceValue[1], 10) * 10000
							|| undefined;
					var refineOption = this.getRefineOpt();
					if (refineOption.price_max == maxPrice
							&& refineOption.price_min == minPrice) {
						target.removeAttr("checked")
					}
					this.sendPriceOption(minPrice, maxPrice)
				},
				sendPriceOption : function(minPrice, maxPrice, optionType) {
					optionType = optionType || "toggle";
					minPrice = parseInt(minPrice, 10);
					maxPrice = parseInt(maxPrice, 10);
					if (!_.isNaN(minPrice)) {
						this.setRefineOpt({
							key : "price_min",
							value : minPrice,
							type : optionType,
							send : false
						})
					} else {
						this.delRefineOpt({
							key : "price_min",
							send : false
						})
					}
					if (!_.isNaN(maxPrice)) {
						this.setRefineOpt({
							key : "price_max",
							value : maxPrice,
							type : optionType,
							send : true
						})
					} else {
						this.delRefineOpt({
							key : "price_max",
							send : true
						})
					}
				},
				selectColor : function(e) {
					var target = $(e.currentTarget);
					this.setOption(target);
					this.setRefineOpt({
						key : "page",
						value : "1",
						send : true
					})
				},
				clickTrigger : function(e) {
					e.preventDefault();
					e.stopPropagation();
					var target = $(e.currentTarget);
					target.parent().prev().trigger("click")
				},
				deleteOption : function(e) {
					e.preventDefault();
					s_console.log("delete");
					var target = $(e.currentTarget);
					var deleteKey = target.data("optkey");
					if (deleteKey == "price") {
						this.delRefineOpt({
							key : "price_min",
							send : false
						});
						this.delRefineOpt({
							key : "price_max",
							send : false
						})
					} else {
						this.setOption(target)
					}
					if (deleteKey == "brand_loading") {
						target.parent().remove();
						this.$el
								.find("[value='" + target.data("optval") + "']")
								.attr("selected", false).parent().trigger(
										"change")
					} else {
						target.remove()
					}
				},
				selectCateid : function(e) {
					e.preventDefault();
					var params = this.model.get("params");
					var target = $(e.currentTarget);
					var value = target.data("cateid");
					var brandcate = target.data("brandcateid") || "";
					var subcate = target.data("subcateid") || "";
					this.setRefineOpt({
						type : "reset",
						exclude : [ "cateid", "brandcateid", "subcateid" ],
						send : false
					});
					if (subcate) {
						this.setRefineOpt({
							key : "subcateid",
							value : subcate,
							exclude : [ "cateid", "brandcateid" ],
							send : true
						})
					} else {
						if (brandcate) {
							this.setRefineOpt({
								key : "changecateid",
								type : "alone",
								value : "B",
								send : false
							});
							this.setRefineOpt({
								key : "brandcateid",
								value : brandcate,
								exclude : "cateid",
								send : true
							})
						} else {
							this.setRefineOpt({
								key : "changecateid",
								type : "alone",
								value : "C",
								send : false
							});
							this.setRefineOpt({
								key : "cateid",
								value : value,
								send : true
							})
						}
					}
				},
				toggleSubList : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var parent = target.parent();
					parent.toggleClass("kind_open");
					parent.parent().toggleClass("desc_open");
					if (!parent.hasClass("kind_open")) {
						parent.parent().parent().parent().find(".link_all")
								.removeClass("link_select")
					} else {
						parent.parent().parent().parent().find(".link_all")
								.addClass("link_select");
						$(window).scrollTop(parent.offset().top)
					}
				},
				toggleList : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					target.parent().toggleClass("all_open");
					$(window).scrollTop(
							this.$el.find("#categoryOption").offset().top)
				},
				applyOption : function(e) {
					e.preventDefault();
					Shopping.views.mobileSearchMain.setRefineOption({
						key : "page",
						value : "1",
						send : true
					})
				},
				userPriceOption : function() {
					var $minPrice = $("#minPrice");
					var $maxPrice = $("#maxPrice");
					var price_min = $minPrice.val().replace(/\s*,\s*/g, "");
					var price_max = $maxPrice.val().replace(/\s*,\s*/g, "");
					if (price_min == "") {
						alert("최소금액을 입력해주세요.");
						$minPrice.focus();
						return false
					}
					if (price_max == "") {
						alert("최대금액을 입력해주세요.");
						$maxPrice.focus();
						return false
					}
					var refineOption = this.getRefineOpt();
					if (price_min < price_max) {
						this.$el.find("[name='price']").removeAttr("checked");
						if (refineOption.price_max != price_max
								|| refineOption.price_min != price_min) {
							this.sendPriceOption(price_min, price_max, "alone")
						}
					} else {
						alert("낮은 가격 먼저 입력해주세요.");
						return false
					}
				},
				setOption : function(target) {
					var el = $(target);
					var key = el.data("optkey");
					var value = el.data("optval") || el.val();
					var group = el.data("optgrp") || "";
					var type = el.data("data-opttype")
							|| Shopping.views.mobileSearchMain.optionType[key];
					var param = {
						key : key,
						value : value,
						type : type,
						group : group,
						send : false
					};
					this.setRefineOpt(param)
				},
				setRefineOpt : function(param) {
					Shopping.views.mobileSearchMain.setRefineOption(param)
				},
				delRefineOpt : function(param) {
					Shopping.views.mobileSearchMain.delRefineOption(param)
				},
				getRefineOpt : function() {
					return _
							.clone(Shopping.views.mobileSearchMain.refineOptions)
				}
			})
})(jQuery);
(function($) {
	window.MobileSearchPreviewView = Backbone.ShoppingView.extend({
		el : "#searchList",
		initialize : function() {
			this.setTemplate("#MobileSearchPreviewTemplate");
			this.model = new MobileSearchModel();
			this.model.on("reset change", this.render, this)
		},
		events : {
			"click .link_info" : "toggleMoreInfo",
			"click [data-prodidx]" : function(e) {
				return Shopping.views.mobileSearchMain.goOutLink(e)
			}
		},
		render : function() {
			this.setElement("#searchList");
			this.$el.parent().attr("class", "cont_item cont_text cont_focus");
			var searchList = Shopping.views.mobileSearchMain.getSearchList();
			this.$el.html(this.getTemplate({
				searchList : searchList,
				docid : this.options.docid,
				page : this.options.page,
				page_size : this.options.page_size
			}));
			checkGNBInfo.trigger("check:zzim");
			if (this.options.docid) {
				var docid = "#" + this.options.docid;
				setTimeout(function() {
					$(window).scrollTop($(docid).offset().top)
				}, 500)
			}
			if (window.gargoyle) {
				gargoyle.bind()
			}
		},
		toggleMoreInfo : function(e) {
			var target = $(e.currentTarget);
			target.parent().parent().parent().toggleClass("info_open")
		}
	})
})(jQuery);
(function($) {
	window.MobileSearchRecentRelateView = Backbone.ShoppingView
			.extend({
				el : "#recentRelateProd",
				initialize : function() {
					this.setTemplate("#MobileSearchRecentRelateTemplate");
					this.model = new MobileSearchRecommendModel();
					this.model.on("sync", this.render, this)
				},
				events : {
					"click [data-prodid]" : "goOutLink"
				},
				render : function(modelData) {
					this.setElement("#recentRelateProd");
					var productList = [];
					this.modelData = modelData;
					if (this.modelData.prodlist) {
						productList = _.first(__.chunk(this.modelData.prodlist,
								3, true), 5)
					} else {
						productList = _.first(__.chunk(this.model
								.get("prodlist"), 3, true), 5)
					}
					this.renderSlide(productList)
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodid = target.data("prodid");
					var list = this.modelData.prodlist
							|| this.model.get("prodlist");
					var item = {};
					for (var i = 0; i < list.length; i++) {
						if (list[i].prodid == prodid) {
							item = list[i];
							break
						}
					}
					if (item.prodtype == "1") {
						return true
					} else {
						var isPlay = !item.cateid.indexOf("103108");
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, isPlay)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), isPlay,
										item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				renderSlide : function(productList) {
					var slideData = [];
					var self = this;
					if (!_.isEmpty(productList)) {
						var totalPage = _.size(productList);
						_.each(productList, function(item, index) {
							slideData.push({
								subprodlist : item,
								currentPage : index + 1,
								totalPage : totalPage,
								toHTML : function() {
									return self.getTemplate(this)
								}
							})
						});
						this.ds = new slide.InfiniteDataSource(slideData);
						this.sl = new slide.Slide(this.el, this.ds, {
							container : {
								id : "mobileSearchRecentRelate"
							}
						});
						this.sl.on("next", this.setCurrentPage.bind(this));
						this.sl.on("prev", this.setCurrentPage.bind(this));
						$(".linkage_list .btn_prev").on("click", function() {
							self.sl.prev()
						});
						$(".linkage_list .btn_next").on("click", function() {
							self.sl.next()
						});
						this.setCurrentPage()
					} else {
						this.$el.hide()
					}
				},
				setCurrentPage : function() {
					this.ds
							.queryCurrent(function(current) {
								var pageing = '<span class="screen_out">현재페이지</span><em class="num_page">'
										+ current.currentPage
										+ '</em><span class="txt_bar">/</span> <span class="screen_out">전체페이지</span>'
										+ current.totalPage;
								$("#thisPage").html(pageing)
							});
					if (window.gargoyle) {
						gargoyle.bind()
					}
				}
			})
})(jQuery);
(function($) {
	window.MobileSearchRecentView = Backbone.ShoppingView
			.extend({
				el : "#recentProd",
				initialize : function() {
					this.setTemplate("#MobileSearchRecentTemplate");
					this.model = new MobileSearchRecentModel();
					this.model.on("reset change", this.render, this)
				},
				events : {
					"click .link_item" : "showRecentRelateView",
					"click [data-prodidx]" : "goOutLink"
				},
				render : function() {
					this.setElement("#recentProd");
					var data = this.model.toJSON();
					var prodid = "";
					if (data.totalCnt > 0) {
						$("#recentProd").show();
						this.$el.html(this.getTemplate(data));
						prodid = this.model.get("list").length > 0 ? this.model
								.get("list")[0].prodid : ""
					}
					Shopping.views.mobileSearchMain.makeChildViewInstance(
							"MobileSearchRecommendView").fetchModel(prodid)
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var item = this.model.get("list")[prodidx];
					if (item.prodtype == "1") {
						return true
					} else {
						var isPlay = !item.cateid.indexOf("103108");
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, isPlay)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), isPlay,
										item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				showRecentRelateView : function(e) {
					var target = $(e.currentTarget);
					this.$el.find(".linkage_open").removeClass("linkage_open");
					target.parent().addClass("linkage_open");
					var pagetype = Shopping.views.mobileSearchMain.options.cc_type;
					if (Backbone.history.getFragment().indexOf("!/detail/") == 0) {
						pagetype = "model"
					}
					Shopping.views.mobileSearchMain.childView.mobileSearchRecentRelate.model
							.fetch({
								data : {
									prodid : target.data("prodid"),
									pagetype : pagetype,
									casetype : "B",
									page : 1,
									platformType : "mobile"
								}
							})
				}
			})
})(jQuery);
(function($) {
	window.MobileSearchRecommendView = Backbone.ShoppingView
			.extend({
				el : "#recomProd",
				initialize : function() {
					this.setTemplate("#MobileSearchRecommendTemplate");
					this.model = new MobileSearchRecommendModel();
					this.model.on("change", this.render, this)
				},
				events : {
					"click [data-prodidx]" : "goOutLink"
				},
				render : function() {
					this.setElement("#recomProd");
					var data = {};
					if (this.model.get("casetype") == "B") {
						Shopping.views.mobileSearchMain.makeChildViewInstance(
								"MobileSearchRecentRelateView").render(
								this.model.toJSON())
					} else {
						if (this.model.get("casetype") == "C") {
							data = this.model.toJSON()
						} else {
							_
									.each(
											this.model.get("tablist"),
											function(item) {
												if (item.casetype == "C"
														|| item.casetype == "D"
														|| item.casetype == "E") {
													data = item
												}
												if (item.casetype == "B") {
													Shopping.views.mobileSearchMain
															.makeChildViewInstance(
																	"MobileSearchRecentRelateView")
															.render(item)
												}
											})
						}
					}
					this.modelData = data;
					if (this.modelData.casetype) {
						$("#recomProd").show();
						this.$el.html(this.getTemplate(this.modelData))
					} else {
						$("#recomProd").hide()
					}
					if (Backbone.history.getFragment().indexOf("!/detail/") != 0) {
						Shopping.views.mobileSearchMain.makeChildViewInstance(
								"MobileSimilarImageProdView").modelFetch(
								this.options.prodid, "search")
					}
				},
				goOutLink : function(e) {
					var target = $(e.currentTarget);
					var prodidx = target.data("prodidx");
					var item = this.modelData.prodlist[prodidx];
					if (item.prodtype == "1") {
						return true
					} else {
						var isPlay = !item.cateid.indexOf("103108");
						if (item.mvalidyn == "N") {
							Backbone.history.previousFragment = Backbone.history.fragment;
							Backbone.history.navigate("outLinkLayer");
							onlyPcLayer(item.prodid, isPlay)
						} else {
							if (item.shopid == "11st"
									|| item.shopid == "gmarket"
									|| item.shopid == "auction") {
								Backbone.history.previousFragment = Backbone.history.fragment;
								Backbone.history.navigate("outLinkLayer");
								priceDiffLayer(item.prodid,
										target.attr("href"), isPlay,
										item.shopid)
							} else {
								return true
							}
						}
						return false
					}
				},
				fetchModel : function(prodid) {
					this.options.prodid = prodid;
					var cateid = "";
					var keyword = "";
					var pagetype = "cate";
					var main = Shopping.views.mobileSearchMain;
					if (main
							&& main.model.get("searchList")
							&& !_
									.isUndefined(main.model.get("searchList").list)
							&& _.size(main.model.get("searchList").list) > 0) {
						if (main.model.get("thisCategory")) {
							cateid = main.model.get("thisCategory").id
									|| main.model.get("searchList").list[0].lastcateid
									|| ""
						} else {
							cateid = main.model.get("searchList").list[0].lastcateid
									|| ""
						}
						keyword = main.model.get("qaKeyword");
						pagetype = main.options.cc_type
					} else {
						cateid = (M_SHOPHOW.GNB) ? (M_SHOPHOW.GNB.selCateid || "")
								: ""
					}
					if (Backbone.history.getFragment().indexOf("!/detail/") == 0) {
						pagetype = "model"
					}
					this.model.clear({
						silent : true
					});
					this.model.fetch({
						data : {
							prodid : prodid || "",
							cateid : cateid,
							keyword : keyword,
							pagetype : pagetype,
							page : 1,
							platformType : "mobile"
						}
					})
				}
			})
})(jQuery);
(function($) {
	window.MobileSimilarImageProdView = Backbone.ShoppingView.extend({
		el : "#mobileSimilarImage",
		initialize : function() {
			var fragment = Backbone.history.getFragment();
			if (fragment.indexOf("search") > -1
					|| fragment.indexOf("category") > -1) {
				this.setTemplate("#mobileSimilarImageProdTemplate");
				this.listenTo(checkGNBInfo, "sync:latest", this.modelFetch)
			} else {
				this.setTemplate("#mobileDetailSimilarImageProdTemplate")
			}
			this.model = new MobileSimilarImageProdModel();
			this.model.on("sync", this.render, this);
			_.bind(this.modelFetch, this)
		},
		events : {},
		modelFetch : function(prodid, page) {
			this.model.clear({
				silent : true
			});
			this.params.prodid = prodid;
			this.params.target_page = page;
			this.model.fetch({
				data : this.params
			})
		},
		render : function() {
			if (this.params.target_page == "detail") {
				$("#mobileSimilarImage").hide();
				this.setElement("#mobileSimilarImageToDetail")
			} else {
				$("#mobileSimilarImage").show();
				this.setElement("#mobileSimilarImage")
			}
			var data = this.model.toJSON();
			var currentProdid = data.prodid = this.params.prodid;
			if (data.prodlist) {
				data.prodlist = _.first(_.reject(data.prodlist, function(item) {
					return item.prodid == currentProdid
				}), 3)
			}
			if (_.size(data.prodlist) >= 3) {
				this.$el.html(this.getTemplate(data));
				this.$el.show();
				$("#recomProd").hide()
			} else {
				this.$el.hide()
			}
			if (window.gargoyle) {
				gargoyle.bind()
			}
		},
		params : {
			prodid : "",
			pagesize : 4,
			target_device : "MO",
			target_page : "search"
		}
	})
})(jQuery);
(function($) {
	window.StarshopAllView = Backbone.ShoppingView.extend({
		tagName : "div",
		initialize : function() {
			this.model = new StarshopAllModel();
			this.model.on("reset change", this.storeList, this);
			this.storeModel = new Backbone.Model();
			this.storeModel.on("reset change", this.render, this);
			this.setTemplate("#mobileStarShopTemplate")
		},
		events : {
			"click [data-page]" : "changePage"
		},
		render : function() {
			try {
				$("#daumFoot").hide();
				this.$el.html(this.getTemplate(this.model.toJSON()));
				$(document).scrollTop(0);
				this.setClickCode({
					t : "T_mobile",
					g : "G_mobile_starshop"
				});
				if (!$("#daumContent").hasClass("nav_on") && !HOWAPPINFO) {
					$("#daumFoot").show()
				}
				return this
			} catch (e) {
				this.error(e)
			}
		},
		changePage : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var page = target.data("page");
			this.options.params.page = page;
			this.hashChange();
			this.model.fetch({
				data : this.options.params
			})
		},
		storeList : function() {
			var storePageInfo = this.storeModel.get("pageInfo") || {};
			var pageInfo = this.model.get("pageInfo");
			if (this.model.hasChanged("pageInfo")
					|| storePageInfo.page > pageInfo.page) {
				this.storeModel.clear({
					silent : true
				})
			}
			var data = this.model.toJSON();
			var storeData = this.storeModel.get("list") || [];
			data.list = storeData.concat(data.list);
			this.storeModel.set(data)
		},
		hashChange : function() {
			Shopping.views.mMain.hashChange(this.options.params, "")
		}
	})
})(jQuery);
(function($) {
	window.StarshopView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				initialize : function() {
					this.model = new StarshopModel();
					this.model.on("reset change", this.storeList, this);
					this.storeModel = new (Backbone.Model.extend({
						defaults : {
							tabProdList : []
						}
					}));
					this.storeModel.on("reset change", this.render, this);
					this.setTemplate("#starshopViewTemplate")
				},
				storeList : function() {
					var storePageInfo = this.storeModel.get("pageInfo") || {};
					var pageInfo = this.model.get("pageInfo") || {};
					if (this.model.hasChanged("selectTab")
							|| storePageInfo.page > pageInfo.page) {
						this.storeModel.clear({
							silent : true
						})
					}
					var data = this.model.toJSON();
					var datalist = this.model.get("tabProdList") || [];
					var storeData = this.storeModel.get("tabProdList") || [];
					if (!_.isEmpty(datalist)) {
						data.tabProdList = storeData.concat(datalist);
						this.storeModel.set(data)
					} else {
						this.render()
					}
				},
				events : {
					"click .starshop .link_tab" : "selectMainExhibition",
					"click .starshop [data-page]" : "selectPagingBtn"
				},
				toScroll : 0,
				render : function() {
					try {
						this.$el.off();
						this.setElement("#mContent");
						$("#daumFoot").hide();
						$(this.el).html(
								this.getTemplate(this.storeModel.toJSON()));
						var tabWidth = parseFloat(100 / (this.model
								.get("tabList").length))
								+ "%";
						this.$el.find(".tab_exhibition li").css("width",
								tabWidth);
						$(document).scrollTop(0);
						this.setClickCode({
							t : "T_mobile",
							g : "G_mobile_starshop"
						});
						if (this.toScroll != 0) {
							$(window).scrollTop(this.toScroll);
							this.toScroll = 0
						} else {
							$(document).scrollTop(0)
						}
						if (M_SHOPHOW.GNB) {
							M_SHOPHOW.GNB.checkZZim()
						}
						if (!$("#daumContent").hasClass("nav_on")
								&& !HOWAPPINFO) {
							$("#daumFoot").show()
						}
						return this
					} catch (e) {
						this.error(e)
					}
				},
				selectPagingBtn : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					this.toScroll = $(window).scrollTop();
					this.model.fetch({
						data : {
							shopid : this.options.showId,
							tabid : this.model.get("selectTab"),
							page : target.data("page")
						}
					})
				},
				selectMainExhibition : function(e) {
					e.preventDefault();
					var targetNode = e.currentTarget.parentNode;
					var list = $(".tab_exhibition .fst");
					_.each(list, function(item, index) {
						if (item == targetNode) {
							$(item).addClass("on")
						} else {
							$(item).removeClass("on")
						}
					});
					var url = "!/starshop/" + this.options.showId + "/tabid:"
							+ e.currentTarget.parentNode.id + "&page:1";
					Backbone.history.navigate(url, {
						trigger : true
					})
				},
				selectViewType : function(viewtype) {
					var url = "!/starshop/"
							+ Shopping.views.starshop.options.showId
							+ "/tabid:"
							+ Shopping.views.starshop.model.get("selectTab")
							+ "&page:"
							+ Shopping.views.starshop.model.get("pageInfo").selectPage
							+ "&viewtype:" + viewtype;
					Backbone.history.navigate(url, {
						trigger : true
					})
				}
			})
})(jQuery);
(function($) {
	window.MobileStyleOnAirListView = Backbone.ShoppingView.extend({
		initialize : function() {
			_.bindAll(this, "render");
			this.model = new StyleOnAirProgramModel();
			this.detailModel = new MobileTvListDetailModel();
			this.scrollPosition = 0;
			this.setTemplate("#styleOnAirListViewTemplate")
		},
		modelFetch : function() {
			Shopping.views.mStyleonairList.model.clear({
				silent : true
			});
			$.when(this.model.fetch({
				sendtiara : false
			}), this.detailModel.fetch()).done(this.render)
		},
		events : {
			"click a" : "savePosition"
		},
		savePosition : function(e) {
			this.scrollPosition = $(window).scrollTop()
		},
		cnt : 0,
		render : function() {
			var data = this.model.toJSON();
			var detailData = {};
			_.each(this.detailModel.get("list"), function(item) {
				detailData[item.cateid] = item.result.product_list
			});
			data.detailData = detailData;
			this.$el.html(this.getTemplate(data));
			if (ua_result.platform == "tablet"
					&& ua_result.ua.indexOf("ipad") > 0 && this.cnt == 0) {
				this.cnt = 1;
				clearTimeout(this.timeid);
				this.timeid = setTimeout(_.bind(this.render, this), 300)
			}
		},
		restoreScroll : function() {
			var self = this;
			if ($(window).scrollTop() != this.scrollPosition) {
				setTimeout(function() {
					$(window).scrollTop(self.scrollPosition)
				}, 500)
			}
		}
	})
})(jQuery);
(function($) {
	window.StyleOnAirView = Backbone.ShoppingView
			.extend({
				el : "#mContent",
				initialize : function() {
					this.model = new StyleOnAirProgramModel();
					this.model.on("reset change", this.getProdList, this);
					this.prodlistmodel = new StyleOnAirProdlistModel();
					this.prodlistmodel.on("reset change", this.storeList, this);
					this.storemodel = new Backbone.Model();
					this.storemodel.on("reset change", this.render, this);
					this.setTemplate("#styleOnAirViewTemplate");
					this.setChildTemplate("prodlist",
							"#styleOnAirProdListTemplate");
					$(window).on("resize", function() {
						Shopping.views.styleonair.setOptionWidth()
					});
					$(window).one("load", function() {
						Shopping.views.styleonair.setOptionWidth()
					});
					this.programid = "";
					this.prodid = ""
				},
				events : {
					"change .select_sort" : "changeSort",
					"click .section_styleonair [data-page]" : "changePage"
				},
				toScroll : 0,
				render : function() {
					try {
						this.$el.off();
						this.setElement(this.$el);
						this.setTemplate("#styleOnAirViewTemplate");
						this.model
								.set(
										"imgURL",
										"http://i1.daumcdn.net/imgsrc.search/shopping/img/mobile/m_tv_v2.jpg",
										{
											silent : true
										});
						this.$el.html(this.getTemplate(this.model.toJSON()));
						this.renderProdList()
					} catch (e) {
						this.error(e)
					}
				},
				renderProdList : function() {
					try {
						var dfd = $.Deferred();
						dfd
								.done(
										function(self) {
											$(window).scrollTop(0);
											self.storemodel
													.set(
															"viewtype",
															self.options.params.viewtype,
															{
																silent : true
															});
											self.programid = self.options.programid;
											self.prodid = self.options.params.prodid;
											self.$el
													.find(
															"#styleOnAirProdListWrap")
													.html(
															self
																	.getChildTemplate(
																			"prodlist",
																			self.storemodel
																					.toJSON()));
											self.setClickCode({
												t : "T_mobile",
												g : "G_mobile_styleonair"
											});
											if (!_
													.isEmpty(self.options.params.zzimid)) {
												addMobileZzim(self.options.params.zzimid)
											}
										})
								.done(
										function(self) {
											if (self.toScroll != 0
													|| self.options.params.scrollTop != 0) {
												if (self.options.params.scrollTop != 0) {
													self.toScroll = parseInt(self.options.params.scrollTop)
												}
												$(window).scrollTop(
														self.toScroll);
												self.toScroll = 0;
												self.options.params.scrollTop = "";
												Backbone.history
														.navigate(
																Shopping.views.styleonair
																		.getHash(),
																{
																	trigger : false,
																	replace : true
																})
											}
										}).done(function(self) {
									self.setOptionWidth()
								}).resolve(this)
					} catch (e) {
						this.error(e)
					}
				},
				getProdList : function(opt) {
					this.prodlistmodel.clear({
						silent : true
					});
					this.prodlistmodel.fetch({
						data : {
							programid : this.options.programid,
							castid : this.options.params.castid,
							no : this.options.params.no,
							page : this.options.params.page,
							prodid : this.options.params.prodid
						}
					})
				},
				selectViewType : function(val) {
					Shopping.views.styleonair.options.params.viewtype = val;
					Shopping.routes.styleonair.navigate(
							Shopping.views.styleonair.getHash(), {
								trigger : true
							})
				},
				changeSort : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					var value = target.val();
					var id = target.attr("id");
					target.prev().html(
							target.find(":selected").html()
									+ '<span class="ico_key ico_more"></span>');
					if (id == "programList") {
						this.options.programid = value;
						this.options.params.castid = "";
						this.options.params.no = "";
						this.options.params.page = "1"
					} else {
						if (id == "castList") {
							this.options.params.castid = value
						} else {
							this.options.params.no = value
						}
					}
					this.storemodel.clear({
						silent : true
					});
					Shopping.routes.styleonair.navigate(this.getHash(), {
						trigger : true
					})
				},
				changePage : function(e) {
					e.preventDefault();
					var target = $(e.currentTarget);
					this.options.params.page = target.data("page");
					this.toScroll = $(window).scrollTop();
					Shopping.routes.styleonair.navigate(this.getHash(), {
						trigger : true
					})
				},
				getHash : function() {
					var opt = "";
					var param = this.options.params;
					if (param.castid != "") {
						opt += "castid:" + param.castid + "&"
					}
					if (param.no != "") {
						opt += "no:" + param.no + "&"
					}
					if (param.viewtype != "") {
						opt += "viewtype:" + param.viewtype + "&"
					}
					if (param.page != "") {
						opt += "page:" + param.page + "&"
					}
					if (param.scrollTop != "") {
						opt += "scrollTop:" + param.scrollTop + "&"
					}
					if (param.prodid != "") {
						opt += "prodid:" + param.prodid + "&"
					}
					if (this.options.programid && this.options.programid != "") {
						return "!/styleonair/" + this.options.programid + "/"
								+ opt
					} else {
						if (opt != "") {
							return "!/styleonair/" + opt
						} else {
							return "!/styleonair/"
						}
					}
				},
				checkScrollTop : function(e) {
					if ($(e.currentTarget).attr("target") != "_blank") {
						var dfd = $.Deferred();
						dfd.done(function(self, e) {
							e.preventDefault();
							var scrollTop = $(window).scrollTop();
							self.options.params.scrollTop = scrollTop;
							Backbone.history.navigate(self.getHash(), {
								trigger : false
							})
						}).done(function(self, e) {
							location.href = $(e.currentTarget).attr("href")
						}).resolve(this, e)
					}
				},
				storeList : function() {
					var data = this.prodlistmodel.toJSON();
					var storeData = this.storemodel.get("tabProdList") || [];
					if (this.programid != this.options.programid
							|| this.prodid != this.options.params.prodid) {
						storeData = []
					}
					data.tabProdList = storeData.concat(data.tabProdList);
					this.storemodel.set(data)
				},
				setOptionWidth : function() {
					$(".link_program_type").width(
							$(".desc_program").width() - 60);
					$(".link_cast_type").width($(".desc_cast").width() - 60);
					$(".link_no_type")
							.width($(".desc_program_no").width() - 44)
				}
			})
})(jQuery);
(function($) {
	window.MobileRecentShoppingboxView = Backbone.ShoppingView.extend({
		tagName : "div",
		className : "box_shopbox",
		initialize : function() {
			this.model = new MobileRecentShoppingboxModel();
			this.model.on("reset change", this.render, this);
			this.setTemplate("#mobileRecentShoppingboxTemplate")
		},
		events : {
			"click [data-rspage]" : "morePage"
		},
		page : 1,
		render : function() {
			try {
				var data = this.model.toJSON();
				if (!_.isEmpty(data.latestShoppingList.list)) {
					this.$el.html(this.getTemplate({
						list : this.getList(),
						listSize : _.size(data.latestShoppingList.list),
						page : this.page
					}))
				} else {
					this.$el.hide()
				}
				Shopping.views.mMain.setCurrentHeight()
			} catch (e) {
				this.error(e)
			}
		},
		morePage : function(e) {
			e.preventDefault();
			this.page = (this.page + 1 >= _.size(this.getList())) ? _.size(this
					.getList()) : this.page + 1;
			this.render()
		},
		getList : function() {
			var list;
			if (this.model.has("latestShoppingList")) {
				list = __.chunk(this.model.get("latestShoppingList").list, 4,
						true)
			} else {
				list = []
			}
			return list
		}
	})
})(jQuery);
(function($) {
	window.MobileShoppingPartnerView = Backbone.ShoppingView.extend({
		tagName : "div",
		className : "box_direct",
		initialize : function() {
			this.model = new MobileShoppingPartnerModel();
			this.model.on("reset change", this.render, this);
			this.setTemplate("#mobileShoppingPartnerTemplate")
		},
		events : {},
		render : function() {
			try {
				var data = this.model.toJSON();
				if (!_.isEmpty(data.list)) {
					this.$el.html(this.getTemplate(data))
				} else {
					this.$el.hide()
				}
			} catch (e) {
				this.error(e)
			}
		}
	})
})(jQuery);
(function($) {
	window.MobileTrendView = Backbone.ShoppingView.extend({
		tagName : "div",
		initialize : function() {
			this.model = new MobileTrendModel();
			this.model.on("reset change", this.storeList, this);
			this.storeModel = new Backbone.Model();
			this.storeModel.on("reset change", this.render, this);
			this.setTemplate("#mobileNewTrendTemplate")
		},
		events : {
			"click [data-boxcate]" : "changeShoppingCate",
			"click .link_titcate" : "toggleCate",
			"click [data-page]" : "moreTrendPage"
		},
		moreTrendPage : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var page = target.data("page");
			this.options.params.page = page;
			this.hashChange();
			this.render()
		},
		storeList : function() {
			var storePageInfo = this.storeModel.get("pageInfo") || {};
			var pageInfo = this.model.get("pageInfo");
			if (pageInfo.countPerPage == 30) {
				pageInfo.totalPage = Math.ceil(pageInfo.totalCount / 32)
			}
			if (this.model.hasChanged("cateid")
					|| storePageInfo.page > pageInfo.page) {
				this.storeModel.clear({
					silent : true
				})
			}
			this.render()
		},
		renderRecentShoppingbox : function() {
			var instance = setViewInstance(this.childView,
					window.MobileRecentShoppingboxView, {
						name : "mRecentShoppingbox"
					});
			this.$el.detach(".box_shopbox");
			if (instance) {
				this.childView.mRecentShoppingbox.model.fetch({
					data : {
						size : 16
					}
				})
			}
			this.childView.mRecentShoppingbox
					.setElement(this.childView.mRecentShoppingbox.$el);
			this.$el.append(this.childView.mRecentShoppingbox.$el)
		},
		renderShoppingPartnerbox : function() {
			var instance = setViewInstance(this.childView,
					window.MobileShoppingPartnerView, {
						name : "mShoppingPartner"
					});
			this.$el.detach(".box_direct");
			if (instance) {
				this.childView.mShoppingPartner.model.fetch({
					data : {
						size : 20
					}
				})
			}
			this.childView.mShoppingPartner
					.setElement(this.childView.mShoppingPartner.$el);
			this.$el.append(this.childView.mShoppingPartner.$el)
		},
		toggleCate : function(e) {
			e.preventDefault();
			this.$el.find(".info_sort").toggleClass("open_sort")
		},
		changeShoppingCate : function(e) {
			e.preventDefault();
			var target = $(e.currentTarget);
			var cate = target.data("boxcate");
			this.options.params.cateid = cate;
			this.options.params.page = 1;
			this.hashChange();
			this.model.fetch({
				data : {
					cateid : cate,
					page : 1
				}
			})
		},
		latestPageInfo : {
			page : 1,
			totalpage : 0
		},
		render : function() {
			try {
				var dfd = $.Deferred();
				var list = this.getList();
				dfd.done(function(self) {
					var pageInfo = self.model.get("pageInfo");
					self.$el.html(self.getTemplate({
						cateMap : self.cateMap,
						cateid : self.model.get("cateid") || "all",
						pageInfo : pageInfo,
						list : list
					}))
				}).done(function(self) {
					self.renderRecentShoppingbox()
				}).done(function(self) {
					self.renderShoppingPartnerbox()
				}).resolve(this)
			} catch (e) {
				this.error(e)
			}
		},
		getList : function() {
			var result = {
				shopItemList : []
			};
			if (this.model.get("result")) {
				result = _.first(this.model.get("result"))
			}
			var pageInfo = _.clone(this.model.get("pageInfo"));
			pageInfo.page = this.options.params.page || 1;
			this.model.set({
				pageInfo : pageInfo
			}, {
				silent : true
			});
			var originlist = result.shopItemList || [];
			var countPerPage = 32;
			return _.first(originlist, (countPerPage * pageInfo.page))
		},
		cateMap : {
			all : "전체",
			clothes : "패션의류",
			etc : "패션잡화",
			living : "유아/리빙"
		},
		hashChange : function() {
			Shopping.views.mMain.hashChange(this.options.params, "")
		}
	})
})(jQuery);
(function($) {
	window.MobileBestShopRecommRouter = Backbone.ShoppingRouter.extend({
		routes : {
			"!/recombest100/(:areaid)" : "defaultRoute"
		},
		defaultRoute : function(areaid) {
			this.navigate("!/best/areaid:" + areaid, {
				trigger : true
			});
			return false;
			setViewInstance(Shopping.views, window.MobileBestShopRecommView, {
				name : "mBestshoprecommview"
			});
			if (!_.isEmpty(areaid)) {
				areaid = "A_sh_best100_main_"
						+ areaid.replace("A_sh_best100_main_", "").replace(
								"product", "") + "product"
			} else {
				areaid = ""
			}
			Shopping.views.mBestshoprecommview.model.fetch({
				data : {
					mobile : "Y",
					areaid : areaid
				}
			});
			M_SHOPHOW.init({
				top : false,
				searchbar : false,
				title : "BEST 100"
			})
		}
	})
})(jQuery);
(function($) {
	window.MobileDetailRouter = Backbone.ShoppingRouter.extend({
		initialize : function() {
		},
		routes : {
			"!/detail/:prodid(/*options)" : "detailRouter",
			"!/layer/:layertype/:clickid/:prodid(/*options)" : "layerRouter"
		},
		layerRouter : function(layertype, clickid, prodid, options) {
			var type = layertype;
			var zzimid = clickid;
			if (!Shopping.views.mobileDetail || $("#detailTop").size() == 0) {
				this.detailRouter(prodid, options);
				Shopping.views.mobileDetail.once("render:after", function() {
					Shopping.views.mobileDetail.renderLayer(type, zzimid)
				})
			} else {
				Shopping.views.mobileDetail.renderLayer(type, zzimid)
			}
		},
		detailRouter : function(prodid, options) {
			$(".dimmed_layer").remove();
			$(".shopping_layer").remove();
			this.initOption(options);
			M_SHOPHOW.init({
				top : false,
				searchbar : false,
				latest : false,
				recommend : true,
				asyncRender : true,
				viewtype : "",
				lawInfo : true
			});
			$("#q").val(this.params.q);
			$("#shop_q").val(this.params.q);
			var existed = setViewInstance(Shopping.views, MobileDetailMainView,
					{
						name : "mobileDetail",
						params : _.clone(this.params),
						prodid : prodid,
						rendertrigger : true
					});
			Shopping.views.mobileDetail.model.fetch({
				data : _.extend(_.clone(this.params), {
					prodid : prodid
				}),
				remake : true
			})
		},
		initOption : function(option) {
			if (_.isEmpty(option)) {
				_.each(this.resetParams, function(value, key) {
					this.params[key] = getOptParam(decodeURIComponent(option),
							key, value)
				}, this)
			} else {
				_.each(this.params, function(value, key) {
					this.params[key] = getOptParam(decodeURIComponent(option),
							key, this.resetParams[key])
				}, this)
			}
		},
		params : {
			tab : "",
			subcode : "",
			pricegroupid : "",
			seat : "",
			cateid : "",
			mobile_buy_yn : "",
			zzimid : "",
			seqid : "",
			q : ""
		},
		resetParams : {
			tab : "",
			subcode : "",
			pricegroupid : "",
			seat : "",
			cateid : "",
			mobile_buy_yn : "",
			zzimid : "",
			seqid : "",
			q : ""
		}
	})
})(jQuery);
(function($) {
	window.MobileMyRouter = Backbone.ShoppingRouter.extend({
		routes : {
			"!/my/:hash/*paramStr" : "defaultRoute",
			"!/my/" : "defaultRoute"
		},
		defaultRoute : function(hash, paramStr) {
			M_SHOPHOW.init({
				top : false,
				latest : false,
				recommend : false,
				viewtype : "",
				searchbar : false,
				title : "MY 쇼핑"
			});
			$("body").removeClass("searchoption_cont");
			var instance = setViewInstance(Shopping.views,
					window.MobileMySlideView, {
						name : "mMy",
						paramStr : paramStr,
						hash : hash
					});
			Shopping.views.mMy.render()
		}
	})
})(jQuery);
(function($) {
	window.MobilePlusshopRouter = Backbone.ShoppingRouter
			.extend({
				routes : {
					"!/plusshop/:shopid/:cateid" : "defaultRoute",
					"!/plusshop/:shopid(/)" : "defaultRoute",
					"!/plusshopdb/:shopid/:cateid" : "dbRoute",
					"!/plusshopdb/:shopid(/)" : "dbRoute"
				},
				scrollTop : 93,
				defaultRoute : function(shopid, cateid) {
					this.scrollTop = 93;
					this.commonRouter(shopid, cateid)
				},
				commonRouter : function(shopid, cateid) {
					M_SHOPHOW
							.init({
								top : false,
								latest : false,
								recommend : false,
								viewtype : {
									type : "toList",
									href : "#!/plusshoplist/",
									cc : "t=T_mobile,g=G_mobile_plusshop,a=A_mobile_plusshop_home"
								},
								searchbar : false,
								title : "플러스샵",
								titleContainerClass : "head_navi2",
							});
					cateid = cateid || "";
					var instance = setViewInstance(Shopping.views,
							window.MobilePlusshopDetailView, {
								name : "mPlusshopDetailView",
								shopid : shopid,
								cateid : cateid,
								scrollTop : this.scrollTop,
								rendertrigger : true
							});
					Shopping.views.mPlusshopDetailView.off("render:after");
					Shopping.views.mPlusshopDetailView.on("render:after",
							Shopping.views.mPlusshopDetailView.fixedLayer);
					Shopping.views.mPlusshopDetailView.page = 1;
					Shopping.views.mPlusshopDetailView.model.clear({
						silent : true
					});
					Shopping.views.mPlusshopDetailView.model.fetch({
						data : {
							shopid : shopid,
							cateid : cateid
						}
					})
				},
				dbRoute : function(shopid, cateid) {
					var url = "#!/plusshop/" + shopid
							+ ((cateid) ? "/" + cateid : "");
					Backbone.history.navigate(url, {
						replace : true,
						trigger : false
					});
					this.scrollTop = 168;
					this.commonRouter(shopid, cateid)
				}
			})
})(jQuery);
(function($) {
	window.MobileSearchRouter = Backbone.ShoppingRouter
			.extend({
				routes : {
					"!/search/:q" : "searchRoute",
					"!/search/:q/*paramString" : "searchRoute",
					"!/category/:cateid" : "categoryRoute",
					"!/category/:cateid/*paramString" : "categoryRoute"
				},
				initialize : function() {
					this.param = {};
					$(window).on("orientationchange", this.openLayer)
				},
				searchDetailRoute : function(q, paramString) {
					this.searchRoute(q, paramString, true)
				},
				categoryDetailRoute : function(cateid, paramString) {
					this.categoryRoute(cateid, paramString, true)
				},
				categoryRoute : function(cateid, paramString) {
					this.setParam({
						q : "",
						cc_type : "cate",
						cateid : cateid,
						options : paramString || ""
					});
					var tiara = {
						url : "http://m.shopping.daum.net/mini/prodlist.daum",
						title : "카테고리 검색결과 | Daum 쇼핑하우"
					};
					this.commonRoute(tiara)
				},
				searchRoute : function(q, paramString) {
					try {
						this.setParam({
							cc_type : "search",
							q : decodeURIComponent(q),
							options : paramString || ""
						})
					} catch (e) {
						s_console.log("decodeURIComponent error");
						this.setParam({
							cc_type : "search",
							q : unescape(q),
							options : paramString || ""
						})
					}
					this.commonRoute({
						url : "http://m.shopping.daum.net/mini/search.daum",
						title : "검색결과 | Daum 쇼핑하우"
					})
				},
				commonRoute : function(tiara) {
					M_SHOPHOW.init({
						top : false,
						searchbar : true,
						latest : true,
						recommend : true,
						asyncRender : false,
						viewtype : ""
					});
					$("#list_suggest").addClass("hide");
					$("#list_latest").addClass("hide");
					var selApiObj = [ "brandList", "categoryList", "colorList",
							"keywordList", "pageInfo", "parameterList",
							"priceOption", "recommendCategoryList",
							"searchList", "shopList", "thisCategory", "optList" ];
					var prevparam = this.getPrevParam();
					var currentparam = this.getParam();
					this.selectPartData(prevparam, currentparam);
					var param = _.extend(_.pick(this.getParam(), _
							.keys(this.pickParam)), {
						name : "mobileSearchMain"
					});
					param.selapi = this.getSelectApi(selApiObj);
					var params = _.clone(param);
					params.isCateChange = this.param.isCateChange;
					var hasView = setViewInstance(Shopping.views,
							window.MobileSearchMainView, params);
					$("body").removeClass("searchoption_cont");
					Shopping.views.mobileSearchMain.model.resetDefault({
						silent : true
					});
					Shopping.views.mobileSearchMain.model.fetch({
						data : param,
						tiara : tiara
					});
					var paramsQ = decodeURIComponent(this.getParam("q"));
					$("#q").val(paramsQ);
					$("#shop_q").val(paramsQ);
					if (paramsQ) {
						$("#q").parent().addClass("write_on")
					}
					if (coco.modules.shoppingSuggest) {
						coco.modules.shoppingSuggest.checkInputValue()
					}
				},
				getSelectApi : function(selectApiObj) {
					var apiMap = {
						best100 : 0,
						bookList : 1,
						brandCategoryList : 2,
						brandList : 3,
						categoryList : 4,
						clickBestList : 5,
						clixList : 6,
						colorList : 7,
						eventList : 8,
						firstProdCateid : 9,
						floatBanner : 10,
						isWating : 12,
						keywordList : 13,
						optList : 14,
						pageInfo : 15,
						parameterList : 16,
						priceOption : 17,
						recommendCategoryList : 18,
						searchList : 19,
						shopList : 20,
						sohoList : 21,
						spqid : 22,
						tabList : 23,
						themeCategory : 24,
						thisCategory : 25,
						directMall : 26,
						brandInfo : 27,
						decidedViewType : 28,
						sohovip : 29
					};
					var selapiparams = [];
					selapiparams.length = _.size(apiMap);
					selapiparams = (selapiparams.toString().replace(/,/g, "N,") + "N")
							.split(",");
					_.each(selectApiObj, function(item, index) {
						selapiparams[apiMap[item]] = "Y"
					});
					return selapiparams.join("|")
				},
				resetOption : function(e, blnReset) {
					var hash = !_.isEmpty(Backbone.history.mainHash) ? Backbone.history.mainHash[0]
							: "";
					if (hash !== "!search" && hash !== "!category" || blnReset) {
						s_console.log("reset", this.param, this.prevparam);
						this.param = {};
						this.prevparam = {}
					}
				},
				setParam : function(params) {
					this.setPrevParam();
					var lkj = this;
					_.chain(this.pickParam).each(
							function(value, key) {
								lkj.param[key] = getOptParam(params.options,
										key, value)
							});
					this.param.prevcateid = !_
							.isUndefined(this.prevparam.cateid) ? this.prevparam.cateid
							: "";
					if (params.options.indexOf("view_type") > -1) {
						this.param.view_type = getOptParam(params.options,
								"view_type")
					}
					this.param.sort_type = _.isEmpty(this.param.status) ? (this.param.sort_type === "" ? "1"
							: this.param.sort_type)
							: "";
					_.extend(this.param, params);
					s_console.log("defaultParam", this.param)
				},
				getParam : function(key) {
					s_console.log("getParam", key, this.param);
					if (_.isUndefined(key)) {
						return _.clone(this.param)
					} else {
						return _.clone(this.param)[key]
					}
				},
				setPrevParam : function() {
					s_console.log("setPrevParam", _.clone(this.getParam()));
					this.prevparam = _.clone(this.getParam())
				},
				getPrevParam : function(key) {
					s_console.log("getPrevParam", key);
					if (_.isUndefined(key)) {
						return this.prevparam
					} else {
						return this.prevparam[key]
					}
				},
				selectPartData : function(prevparam, currentparam) {
					this.param.part = "Y";
					this.param.isCateChange = false;
					if (prevparam.q !== currentparam.q) {
						this.param.part = "N"
					} else {
						if (prevparam.cateid !== currentparam.cateid
								|| prevparam.brandcateid !== currentparam.brandcateid
								|| prevparam.subcateid !== currentparam.subcateid) {
							this.param.part = "N";
							if (prevparam.q === currentparam.q) {
								this.param.isCateChange = true
							}
						} else {
							if (prevparam.view_type == "preview") {
								this.param.part = "N"
							}
						}
					}
				},
				pickParam : {
					q : "",
					platformType : "mobile",
					part : "N",
					page : "1",
					page_size : "30",
					page_group_size : "5",
					sort_type : "",
					view_type : "",
					cateid : "",
					option : "",
					brand_loading : "",
					shopgroup : "",
					price_min : "",
					price_max : "",
					color_code : "",
					image_filter_cnt : "",
					thumbnail_filter : "",
					srchhow : "",
					docid : "",
					cc_type : "",
					model : "",
					brandcateid : "",
					subcateid : "",
					prevcateid : "",
					changecateid : "",
					selapi : "",
					mobile_buy_yn : "",
					idx : 0,
					zzimid : "",
					coupon : "",
					pcard : "",
					discard : "",
					point : "",
					used : "",
					deli_no_pay : ""
				}
			})
})(jQuery);
(function($) {
	window.MobileTopRouter = Backbone.ShoppingRouter.extend({
		routes : {
			"" : "defaultRoute",
			"!/:hash/*paramStr" : "defaultRoute",
			"!/" : "defaultRoute"
		},
		defaultRoute : function(hash, paramStr) {
			if (PRODID != "") {
				Shopping.routes.mdetail.detailRouter(PRODID);
				return
			}
			M_SHOPHOW.init({
				top : true,
				latest : false,
				recommend : false,
				viewtype : "",
				searchbar : true
			});
			$("body").removeClass("searchoption_cont");
			paramStr = (_.isUndefined(paramStr)) ? {} : paramStr;
			var instance = setViewInstance(Shopping.views,
					window.MobileMainSlideView, {
						name : "mMain",
						paramStr : paramStr,
						hash : hash
					});
			if (!_.isEmpty(defaultSetting)) {
				var tabindex = defaultSetting.tab || 0;
				if (_.size(defaultSetting.newSectionList) > 0) {
					_.each(defaultSetting.newSectionList, function(item) {
						Shopping.views.mMain.viewMap[item].newSection = "Y"
					})
				}
				if (_.isEmpty(hash)) {
					_.each(Shopping.views.mMain.viewMap, function(v, k) {
						if (v.index == tabindex) {
							Shopping.views.mMain.options.hash = k
						}
					})
				}
				Shopping.views.mMain.render()
			} else {
				if (_.isEmpty(hash)) {
					$.ajax({
						url : Shopping.apis.mDefaultFlicking
					}).done(function(data) {
						var tabindex = data.tab || 0;
						_.each(Shopping.views.mMain.viewMap, function(v, k) {
							if (v.index == tabindex) {
								Shopping.views.mMain.options.hash = k
							}
						});
						Shopping.views.mMain.render()
					}).fail(function() {
						Shopping.views.mMain.render()
					})
				} else {
					Shopping.views.mMain.render()
				}
				return false
			}
		}
	})
})(jQuery);
(function($) {
	window.PlanningShowRouter = Backbone.ShoppingRouter
			.extend({
				routes : {
					"!/planningshow/:showId" : "planningshowRoute",
					"!/planningshow/:showId/*options" : "planningshowRoute"
				},
				planningshowRoute : function(showId, options) {
					this.initOption(options);
					var headerOpt = null;
					this.prodlistRoute(showId, options);
					headerOpt = {
						top : false,
						searchbar : false,
						title : "기획전",
						viewtype : {
							type : "toList",
							href : "#!/planningall/",
							cc : "t=T_mobile,g=G_mobile_event,a=A_mobile_event_home"
						},
						titleClick : function() {
							M_SHOPHOW.GNB.SHOP_CC
									.send("t=T_mobile,g=G_mobile_event,a=A_mobile_event_home,tp=1,v=D");
							Backbone.history.navigate("#!/planningall/", {
								trigger : true
							})
						}
					};
					M_SHOPHOW.init(headerOpt)
				},
				prodlistRoute : function(showId, options) {
					setViewInstance(Shopping.views, window.PlanningShowView, {
						name : "planningShow",
						params : _.clone(this.params),
						showId : showId,
						rendertrigger : true
					});
					Shopping.views.planningShow.model.fetch({
						data : {
							areaid : showId,
							tabid : this.params.tabid,
							page : this.params.page
						}
					})
				},
				initOption : function(option) {
					if (_.isUndefined(option)) {
						this.params = _.clone(this.resetParams)
					} else {
						this.params = _.clone(this.resetParams);
						_.each(this.params, function(value, key) {
							this.params[key] = getOptParam(
									decodeURIComponent(option), key, value)
						}, this)
					}
				},
				viewtypeMap : {
					list : "리스트",
					image : "이미지"
				},
				params : {
					viewtype : "image",
					tabid : "",
					page : "",
					listtab : "hot"
				},
				resetParams : {
					viewtype : "image",
					tabid : "",
					page : "",
					listtab : "hot"
				}
			})
})(jQuery);
(function($) {
	window.StarshopRouter = Backbone.ShoppingRouter
			.extend({
				routes : {
					"!/starshop/:showId(/)" : "starshopRoute",
					"!/starshop/:showId/*options" : "starshopRoute"
				},
				starshopRoute : function(showId, options) {
					this.initOption(options);
					var headerOpt = null;
					this.prodlistRoute(showId, options);
					headerOpt = {
						top : false,
						searchbar : false,
						title : "스타샵",
						viewtype : {
							type : "toList",
							href : "#!/starshopall/",
							cc : "t=T_mobile,g=G_mobile_starshop,a=A_mobile_starshop_home"
						},
						titleClick : function() {
							M_SHOPHOW.GNB.SHOP_CC
									.send("t=T_mobile,g=G_mobile_starshop,a=A_mobile_starshop_home,tp=1,v=D");
							Backbone.history.navigate("#!/starshopall/", {
								trigger : true
							})
						}
					};
					M_SHOPHOW.init(headerOpt)
				},
				prodlistRoute : function(showId, options) {
					setViewInstance(Shopping.views, window.StarshopView, {
						name : "starshop",
						params : _.clone(this.params),
						showId : showId
					});
					Shopping.views.starshop.model.fetch({
						data : {
							shopid : showId,
							tabid : this.params.tabid,
							page : this.params.page,
							viewtype : this.params.viewtype
						},
						cache : false
					})
				},
				initOption : function(option) {
					if (_.isUndefined(option)) {
						this.params = _.clone(this.resetParams)
					} else {
						this.params = _.clone(this.resetParams);
						_.each(this.params, function(value, key) {
							this.params[key] = getOptParam(
									decodeURIComponent(option), key, value)
						}, this)
					}
				},
				viewtypeMap : {
					list : "리스트",
					image : "이미지"
				},
				params : {
					viewtype : "image",
					tabid : "",
					page : ""
				},
				resetParams : {
					viewtype : "image",
					tabid : "",
					page : ""
				}
			})
})(jQuery);
(function($) {
	window.StyleOnAirRouter = Backbone.ShoppingRouter
			.extend({
				routes : {
					"!/styleonair/(:programid/*options)" : "styleonairRoute",
					"!/styleonair/*options" : "styleonairViewTypeRoute"
				},
				styleonairViewTypeRoute : function(options) {
					this.styleonairRoute("", options)
				},
				styleonairRoute : function(programid, options) {
					this.initOption(options);
					setViewInstance(Shopping.views, window.StyleOnAirView, {
						name : "styleonair",
						params : _.clone(this.params),
						programid : programid
					}, "programid");
					Shopping.views.styleonair.model.clear({
						silent : true
					});
					Shopping.views.styleonair.model.fetch({
						data : {
							programid : programid,
							castid : this.params.castid,
							no : this.params.no,
							prodid : this.params.prodid
						},
						cache : false
					});
					M_SHOPHOW
							.init({
								top : false,
								searchbar : false,
								title : "TV속 상품",
								viewtype : {
									type : "toList",
									href : "#!/styleonairall/",
									cc : "t=T_mobile,g=G_mobile_styleonair,a=A_mobile_styleonair_home"
								},
								titleClick : function() {
									M_SHOPHOW.GNB.SHOP_CC
											.send("t=T_mobile,g=G_mobile_styleonair,a=A_mobile_styleonair_home,tp=1,v=D");
									Backbone.history.navigate(
											"#!/styleonairall/", {
												trigger : true
											})
								}
							})
				},
				initOption : function(option) {
					_.each(this.resetParams, function(value, key) {
						this.params[key] = getOptParam(
								decodeURIComponent(this.resetParams), key,
								value)
					}, this);
					if (!_.isUndefined(option)) {
						_.each(this.params, function(value, key) {
							this.params[key] = getOptParam(
									decodeURIComponent(option), key, value)
						}, this)
					}
				},
				viewtypeMap : {
					list : "리스트",
					image : "이미지"
				},
				params : {
					no : "",
					castid : "",
					viewtype : "list",
					page : "",
					scrollTop : 0,
					zzimid : "",
					prodid : ""
				},
				resetParams : {
					no : "",
					castid : "",
					viewtype : "list",
					page : "",
					scrollTop : 0,
					zzimid : "",
					prodid : ""
				}
			})
})(jQuery);